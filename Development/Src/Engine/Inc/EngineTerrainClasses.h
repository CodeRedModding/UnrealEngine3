/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY


class ATerrain : public AInfo
{
public:
    TArrayNoInit<FTerrainHeight> Heights;
    TArrayNoInit<FTerrainLayer> Layers;
    TArrayNoInit<FTerrainDecoLayer> DecoLayers;
    TArrayNoInit<FAlphaMap> AlphaMaps;
    TArrayNoInit<class UTerrainComponent*> TerrainComponents;
    INT NumSectionsX;
    INT NumSectionsY;
    INT SectionSize;
    TArrayNoInit<FTerrainWeightedMaterial> WeightedMaterials;
    TArrayNoInit<BYTE> CachedDisplacements;
    FLOAT MaxCollisionDisplacement;
    INT MaxTesselationLevel;
    FLOAT TesselationDistanceScale;
    TArrayNoInit<FTerrainMaterialResource> CachedMaterials;
    FTerrainMaterialInstancePointer MaterialInstance;
    INT NumVerticesX;
    INT NumVerticesY;
    INT NumPatchesX;
    INT NumPatchesY;
    INT MaxComponentSize;
    INT StaticLightingResolution;
    DECLARE_CLASS(ATerrain,AInfo,0,Engine)
    // UObject interface

	virtual void Serialize(FArchive& Ar);
	virtual void PostEditChange(UProperty* PropertyThatChanged);
	virtual void PostLoad();
	virtual void Destroy();

	// AActor interface

	virtual void Spawned();
	virtual UBOOL ShouldTrace(UPrimitiveComponent* Primitive,AActor *SourceActor, DWORD TraceFlags);

	virtual void InitRBPhys();
	virtual void TermRBPhys();

	virtual void ClearComponents();
	virtual void UpdateComponents();

	virtual void CacheLighting();
	virtual void InvalidateLightingCache();

	virtual UBOOL ActorLineCheck(FCheckResult& Result,const FVector& End,const FVector& Start,const FVector& Extent,DWORD TraceFlags);

	// CompactAlphaMaps - Cleans up alpha maps that are no longer used.
	
	void CompactAlphaMaps();

	// CacheWeightMaps - Generates the weightmaps from the layer stack and filtered materials.

	void CacheWeightMaps(INT MinX,INT MinY,INT MaxX,INT MaxY);

	// CacheDisplacements - Caches the amount each tesselated vertex is displaced.

	void CacheDisplacements(INT MinX,INT MinY,INT MaxX,INT MaxY);

	// CacheDecorations - Generates a set of decoration components for an area of the terrain.
	
	void CacheDecorations(INT MinX,INT MinY,INT MaxX,INT MaxY);

	// UpdateRenderData - Updates the weightmaps, displacements, decorations, vertex buffers and bounds when the heightmap, an alphamap or a terrain property changes.

	void UpdateRenderData(INT MinX,INT MinY,INT MaxX,INT MaxY);

	/**
	 * Allocates and initializes resolution dependent persistent data. (height-map, alpha-map, components)
	 * Keeps the old height-map and alpha-map data, cropping and extending as necessary.
	 * Uses DesiredSizeX, DesiredSizeY to determine the desired resolution.
	 * DesiredSectionSize determines the size of the components the terrain is split into.
	 */
	void Allocate();

	// Data access.

	const _WORD& Height(INT X,INT Y) const;
	_WORD& Height(INT X,INT Y);
	FVector GetLocalVertex(INT X,INT Y) const; // Returns a vertex in actor-local space.
	FVector GetWorldVertex(INT X,INT Y) const; // Returns a vertex in world space.

	FTerrainPatch GetPatch(INT X,INT Y) const;
	FVector GetCollisionVertex(const FTerrainPatch& Patch,UINT PatchX,UINT PatchY,UINT SubX,UINT SubY) const;

	const BYTE Alpha(INT AlphaMapIndex,INT X,INT Y) const;	// If AlphaMapIndex == INDEX_NONE, returns 0.
	BYTE& Alpha(INT& AlphaMapIndex,INT X,INT Y);			// If AlphaMapIndex == INDEX_NONE, creates a new alphamap and places the index in AlphaMapIndex.

	FLOAT GetCachedDisplacement(INT X,INT Y,INT SubX,INT SubY) const;

	// GetCachedMaterial - Returns a cached terrain material containing a given set of weighted materials.

	FTerrainMaterialResource* GetCachedMaterial(const FTerrainMaterialMask& Mask);

	// GetCachedMaterialInstance

	FMaterialInstance* GetCachedMaterialInstance();
};


class UTerrainLayerSetup : public UObject
{
public:
    TArrayNoInit<FTerrainFilteredMaterial> Materials;
    DECLARE_CLASS(UTerrainLayerSetup,UObject,0,Engine)
	// UObject interface.

	virtual void PostEditChange(UProperty* PropertyThatChanged);
	virtual void DrawThumbnail(EThumbnailPrimType PrimType,INT X,INT Y,struct FChildViewport* Viewport,struct FRenderInterface* RI,FLOAT Zoom,UBOOL ShowBackground,FLOAT ZoomPct,INT InFixedSz);
	virtual FThumbnailDesc GetThumbnailDesc(FRenderInterface* RI, FLOAT Zoom, INT InFixedSz);
	virtual INT GetThumbnailLabels(TArray<FString>* Labels);
};

enum ETerrainMappingType
{
    TMT_Auto                =0,
    TMT_XY                  =1,
    TMT_XZ                  =2,
    TMT_YZ                  =3,
    TMT_MAX                 =4,
};
struct FTerrainFoliageMesh
{
    class UStaticMesh* StaticMesh;
    class UMaterialInstance* Material;
    INT Density;
    FLOAT MaxDrawRadius;
    FLOAT MinTransitionRadius;
    FLOAT MinScale;
    FLOAT MaxScale;
    INT Seed;
    FLOAT SwayScale;
    BITFIELD StaticLighting:1 GCC_PACK(PROPERTY_ALIGNMENT);
};


class UTerrainMaterial : public UObject
{
public:
    FMatrix LocalToMapping;
    BYTE MappingType;
    FLOAT MappingScale GCC_PACK(PROPERTY_ALIGNMENT);
    FLOAT MappingRotation;
    FLOAT MappingPanU;
    FLOAT MappingPanV;
    class UMaterialInstance* Material;
    class UTexture2D* DisplacementMap;
    FLOAT DisplacementScale;
    TArrayNoInit<FTerrainFoliageMesh> FoliageMeshes;
    DECLARE_CLASS(UTerrainMaterial,UObject,0,Engine)
	// UpdateMappingTransform

	void UpdateMappingTransform();

	// Displacement sampler.

	FLOAT GetDisplacement(FLOAT U,FLOAT V) const;

	// UObject interface.

	virtual void PostEditChange(UProperty* PropertyThatChanged);
	virtual void DrawThumbnail(EThumbnailPrimType PrimType,INT X,INT Y,struct FChildViewport* Viewport,struct FRenderInterface* RI,FLOAT Zoom,UBOOL ShowBackground,FLOAT ZoomPct,INT InFixedSz);
	virtual FThumbnailDesc GetThumbnailDesc(FRenderInterface* RI, FLOAT Zoom, INT InFixedSz);
	virtual INT GetThumbnailLabels(TArray<FString>* Labels);
};

#endif


#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif

