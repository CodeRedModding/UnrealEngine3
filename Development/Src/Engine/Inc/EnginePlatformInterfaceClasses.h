/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#include "EngineNames.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_ENGINE_PLATFORMINTERFACE_ENUMS
#define INCLUDED_ENGINE_PLATFORMINTERFACE_ENUMS 1

enum EPlatformInterfaceDataType
{
    PIDT_None               =0,
    PIDT_Int                =1,
    PIDT_Float              =2,
    PIDT_String             =3,
    PIDT_Object             =4,
    PIDT_Custom             =5,
    PIDT_MAX                =6,
};
#define FOREACH_ENUM_EPLATFORMINTERFACEDATATYPE(op) \
    op(PIDT_None) \
    op(PIDT_Int) \
    op(PIDT_Float) \
    op(PIDT_String) \
    op(PIDT_Object) \
    op(PIDT_Custom) 
enum ECloudStorageDelegate
{
    CSD_KeyValueReadComplete=0,
    CSD_KeyValueWriteComplete=1,
    CSD_ValueChanged        =2,
    CSD_DocumentQueryComplete=3,
    CSD_DocumentReadComplete=4,
    CSD_DocumentWriteComplete=5,
    CSD_DocumentConflictDetected=6,
    CSD_MAX                 =7,
};
#define FOREACH_ENUM_ECLOUDSTORAGEDELEGATE(op) \
    op(CSD_KeyValueReadComplete) \
    op(CSD_KeyValueWriteComplete) \
    op(CSD_ValueChanged) \
    op(CSD_DocumentQueryComplete) \
    op(CSD_DocumentReadComplete) \
    op(CSD_DocumentWriteComplete) \
    op(CSD_DocumentConflictDetected) 
enum EFacebookIntegrationDelegate
{
    FID_AuthorizationComplete=0,
    FID_FacebookRequestComplete=1,
    FID_DialogComplete      =2,
    FID_FriendsListComplete =3,
    FID_MAX                 =4,
};
#define FOREACH_ENUM_EFACEBOOKINTEGRATIONDELEGATE(op) \
    op(FID_AuthorizationComplete) \
    op(FID_FacebookRequestComplete) \
    op(FID_DialogComplete) \
    op(FID_FriendsListComplete) 
enum EInAppMessageInterfaceDelegate
{
    IAMD_InAppSMSUIComplete =0,
    IAMD_InAppEmailComplete =1,
    IAMD_MAX                =2,
};
#define FOREACH_ENUM_EINAPPMESSAGEINTERFACEDELEGATE(op) \
    op(IAMD_InAppSMSUIComplete) \
    op(IAMD_InAppEmailComplete) 
enum EAdManagerDelegate
{
    AMD_ClickedBanner       =0,
    AMD_UserClosedAd        =1,
    AMD_MAX                 =2,
};
#define FOREACH_ENUM_EADMANAGERDELEGATE(op) \
    op(AMD_ClickedBanner) \
    op(AMD_UserClosedAd) 
enum EMicroTransactionResult
{
    MTR_Succeeded           =0,
    MTR_Failed              =1,
    MTR_Canceled            =2,
    MTR_RestoredFromServer  =3,
    MTR_MAX                 =4,
};
#define FOREACH_ENUM_EMICROTRANSACTIONRESULT(op) \
    op(MTR_Succeeded) \
    op(MTR_Failed) \
    op(MTR_Canceled) \
    op(MTR_RestoredFromServer) 
enum EMicroTransactionDelegate
{
    MTD_PurchaseQueryComplete=0,
    MTD_PurchaseComplete    =1,
    MTD_MAX                 =2,
};
#define FOREACH_ENUM_EMICROTRANSACTIONDELEGATE(op) \
    op(MTD_PurchaseQueryComplete) \
    op(MTD_PurchaseComplete) 
enum ETwitterIntegrationDelegate
{
    TID_AuthorizeComplete   =0,
    TID_TweetUIComplete     =1,
    TID_RequestComplete     =2,
    TID_MAX                 =3,
};
#define FOREACH_ENUM_ETWITTERINTEGRATIONDELEGATE(op) \
    op(TID_AuthorizeComplete) \
    op(TID_TweetUIComplete) \
    op(TID_RequestComplete) 
enum ETwitterRequestMethod
{
    TRM_Get                 =0,
    TRM_Post                =1,
    TRM_Delete              =2,
    TRM_MAX                 =3,
};
#define FOREACH_ENUM_ETWITTERREQUESTMETHOD(op) \
    op(TRM_Get) \
    op(TRM_Post) \
    op(TRM_Delete) 

#endif // !INCLUDED_ENGINE_PLATFORMINTERFACE_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_ENGINE_PLATFORMINTERFACE_CLASSES
#define INCLUDED_ENGINE_PLATFORMINTERFACE_CLASSES 1
#define ENABLE_DECLARECLASS_MACRO 1
#include "UnObjBas.h"
#undef ENABLE_DECLARECLASS_MACRO

struct FPlatformInterfaceData
{
    FName DataName;
    BYTE Type;
    INT IntValue;
    FLOAT FloatValue;
    FString StringValue;
    FString StringValue2;
    class UObject* ObjectValue;

    /** Constructors */
    FPlatformInterfaceData() {}
    FPlatformInterfaceData(EEventParm)
    {
        appMemzero(this, sizeof(FPlatformInterfaceData));
    }
};

struct FPlatformInterfaceDelegateResult
{
    BITFIELD bSuccessful:1;
    SCRIPT_ALIGN;
    struct FPlatformInterfaceData Data;

    /** Constructors */
    FPlatformInterfaceDelegateResult() {}
    FPlatformInterfaceDelegateResult(EEventParm)
    {
        appMemzero(this, sizeof(FPlatformInterfaceDelegateResult));
    }
};

struct FDelegateArray
{
    TArrayNoInit<FScriptDelegate> Delegates;

    /** Constructors */
    FDelegateArray() {}
    FDelegateArray(EEventParm)
    {
        appMemzero(this, sizeof(FDelegateArray));
    }
};

struct PlatformInterfaceBase_eventPlatformInterfaceDelegate_Parms
{
    struct FPlatformInterfaceDelegateResult Result;
    PlatformInterfaceBase_eventPlatformInterfaceDelegate_Parms(EEventParm)
    : Result(EC_EventParm)
    {
    }
};
class UPlatformInterfaceBase : public UObject
{
public:
    //## BEGIN PROPS PlatformInterfaceBase
    TArrayNoInit<struct FDelegateArray> AllDelegates;
    FScriptDelegate __PlatformInterfaceDelegate__Delegate;
    //## END PROPS PlatformInterfaceBase

    virtual void CallDelegates(INT DelegateType,struct FPlatformInterfaceDelegateResult& DelegateResult);
    class UCloudStorageBase* GetCloudStorageInterface();
    class UCloudStorageBase* GetLocalStorageInterface();
    class UFacebookIntegration* GetFacebookIntegration();
    class UInGameAdManager* GetInGameAdManager();
    class UMicroTransactionBase* GetMicroTransactionInterface();
    class UAnalyticEventsBase* GetAnalyticEventsInterface();
    class UTwitterIntegrationBase* GetTwitterIntegration();
    class UAppNotificationsBase* GetAppNotificationsInterface();
    class UInAppMessageBase* GetInAppMessageInterface();
    DECLARE_FUNCTION(execCallDelegates)
    {
        P_GET_INT(DelegateType);
        P_GET_STRUCT_INIT_REF(struct FPlatformInterfaceDelegateResult,DelegateResult);
        P_FINISH;
        this->CallDelegates(DelegateType,DelegateResult);
    }
    DECLARE_FUNCTION(execGetCloudStorageInterface)
    {
        P_FINISH;
        *(class UCloudStorageBase**)Result=this->GetCloudStorageInterface();
    }
    DECLARE_FUNCTION(execGetLocalStorageInterface)
    {
        P_FINISH;
        *(class UCloudStorageBase**)Result=this->GetLocalStorageInterface();
    }
    DECLARE_FUNCTION(execGetFacebookIntegration)
    {
        P_FINISH;
        *(class UFacebookIntegration**)Result=this->GetFacebookIntegration();
    }
    DECLARE_FUNCTION(execGetInGameAdManager)
    {
        P_FINISH;
        *(class UInGameAdManager**)Result=this->GetInGameAdManager();
    }
    DECLARE_FUNCTION(execGetMicroTransactionInterface)
    {
        P_FINISH;
        *(class UMicroTransactionBase**)Result=this->GetMicroTransactionInterface();
    }
    DECLARE_FUNCTION(execGetAnalyticEventsInterface)
    {
        P_FINISH;
        *(class UAnalyticEventsBase**)Result=this->GetAnalyticEventsInterface();
    }
    DECLARE_FUNCTION(execGetTwitterIntegration)
    {
        P_FINISH;
        *(class UTwitterIntegrationBase**)Result=this->GetTwitterIntegration();
    }
    DECLARE_FUNCTION(execGetAppNotificationsInterface)
    {
        P_FINISH;
        *(class UAppNotificationsBase**)Result=this->GetAppNotificationsInterface();
    }
    DECLARE_FUNCTION(execGetInAppMessageInterface)
    {
        P_FINISH;
        *(class UInAppMessageBase**)Result=this->GetInAppMessageInterface();
    }
    void delegatePlatformInterfaceDelegate(const struct FPlatformInterfaceDelegateResult& Result)
    {
        PlatformInterfaceBase_eventPlatformInterfaceDelegate_Parms Parms(EC_EventParm);
        Parms.Result=Result;
        ProcessDelegate(ENGINE_PlatformInterfaceDelegate,&__PlatformInterfaceDelegate__Delegate,&Parms);
    }
    DECLARE_CLASS(UPlatformInterfaceBase,UObject,0|CLASS_Transient,Engine)
	/**
	 * C++ interface to get the singleton
	 */
	static UCloudStorageBase* GetCloudStorageInterfaceSingleton();
	static UCloudStorageBase* GetLocalStorageInterfaceSingleton();
	static UFacebookIntegration* GetFacebookIntegrationSingleton();
	static UInGameAdManager* GetInGameAdManagerSingleton();
	static UMicroTransactionBase* GetMicroTransactionInterfaceSingleton();
	static UAnalyticEventsBase* GetAnalyticEventsInterfaceSingleton();
	static UTwitterIntegrationBase* GetTwitterIntegrationSingleton();
	static UAppNotificationsBase* GetAppNotificationsInterfaceSingleton();
	static UInAppMessageBase* GetInAppMessageInterfaceSingleton();

	/**
	 * Check for certain exec commands that map to the various subclasses (it will only
	 * get/create the singleton if the first bit of the exec command matches a one of 
	 * the special strings, like "ad" for ad manager)
	 */
	static UBOOL StaticExec(const TCHAR* Cmd, FOutputDevice& Ar);

	/**
	 * Determines if there are any delegates of the given type on this platform interface object.
	 * This is useful to skip a bunch of FPlatformInterfaceDelegateResult if there is no
	 * one even listening!
	 *
	 * @param DelegateType The type of delegate to look up delegates for
	 *
	 * @return TRUE if there are any delegates set of the given type
	 */
	UBOOL HasDelegates(INT DelegateType);
};

class UCloudStorageUpgradeHelper : public UInterface
{
public:
    DECLARE_ABSTRACT_CLASS(UCloudStorageUpgradeHelper,UInterface,0|CLASS_Interface,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCloudStorageUpgradeHelper)
};

class ICloudStorageUpgradeHelper
{
protected:
	virtual ~ICloudStorageUpgradeHelper() {}
public:
	typedef UCloudStorageUpgradeHelper UClassType;
	virtual UObject* GetUObjectInterfaceCloudStorageUpgradeHelper()=0;
    virtual void eventGetCloudUpgradeKeys(TArray<FString>& CloudKeys)=0;
    virtual void eventHandleLocalKeyValue(FString& CloudKeyName,struct FPlatformInterfaceData& CloudValue,INT& bShouldMoveToCloud,INT& bShouldDeleteLocalKey)=0;
    virtual void eventHandleLocalDocument(FString& DocName,INT& bShouldMoveToCloud,INT& bShouldDeleteLocalFile)=0;
    NO_DEFAULT_CONSTRUCTOR(ICloudStorageUpgradeHelper)
};

struct FEventStringParam
{
    FStringNoInit ParamName;
    FStringNoInit ParamValue;

		FEventStringParam(const FString& InNameStr,const FString& InValueStr)
		{
			appMemzero(this, sizeof(FEventStringParam));
			ParamName = InNameStr;
			ParamValue = InValueStr;
		}
		FEventStringParam(EEventParm)
		{
			appMemzero(this, sizeof(FEventStringParam));
		}
	
};

struct AnalyticEventsBase_eventSendCachedEvents_Parms
{
    AnalyticEventsBase_eventSendCachedEvents_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventLogCurrencyGivenEvent_Parms
{
    FString GameCurrencyType;
    INT GameCurrencyAmount;
    AnalyticEventsBase_eventLogCurrencyGivenEvent_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventLogCurrencyPurchaseEvent_Parms
{
    FString GameCurrencyType;
    INT GameCurrencyAmount;
    FString RealCurrencyType;
    FLOAT RealMoneyCost;
    FString PaymentProvider;
    AnalyticEventsBase_eventLogCurrencyPurchaseEvent_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventLogItemPurchaseEvent_Parms
{
    FString ItemId;
    FString Currency;
    INT PerItemCost;
    INT ItemQuantity;
    AnalyticEventsBase_eventLogItemPurchaseEvent_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventLogUserAttributeUpdateArray_Parms
{
    TArray<struct FEventStringParam> AttributeArray;
    AnalyticEventsBase_eventLogUserAttributeUpdateArray_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventLogUserAttributeUpdate_Parms
{
    FString AttributeName;
    FString AttributeValue;
    AnalyticEventsBase_eventLogUserAttributeUpdate_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventLogErrorMessage_Parms
{
    FString ErrorName;
    FString ErrorMessage;
    AnalyticEventsBase_eventLogErrorMessage_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventEndStringEventParamArray_Parms
{
    FString EventName;
    TArray<struct FEventStringParam> ParamArray;
    AnalyticEventsBase_eventEndStringEventParamArray_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventLogStringEventParamArray_Parms
{
    FString EventName;
    TArray<struct FEventStringParam> ParamArray;
    UBOOL bTimed;
    AnalyticEventsBase_eventLogStringEventParamArray_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventEndStringEventParam_Parms
{
    FString EventName;
    FString ParamName;
    FString ParamValue;
    AnalyticEventsBase_eventEndStringEventParam_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventLogStringEventParam_Parms
{
    FString EventName;
    FString ParamName;
    FString ParamValue;
    UBOOL bTimed;
    AnalyticEventsBase_eventLogStringEventParam_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventEndStringEvent_Parms
{
    FString EventName;
    AnalyticEventsBase_eventEndStringEvent_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventLogStringEvent_Parms
{
    FString EventName;
    UBOOL bTimed;
    AnalyticEventsBase_eventLogStringEvent_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventEndSession_Parms
{
    AnalyticEventsBase_eventEndSession_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventStartSession_Parms
{
    AnalyticEventsBase_eventStartSession_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventSetUserId_Parms
{
    FString NewUserId;
    AnalyticEventsBase_eventSetUserId_Parms(EEventParm)
    {
    }
};
struct AnalyticEventsBase_eventInit_Parms
{
    AnalyticEventsBase_eventInit_Parms(EEventParm)
    {
    }
};
class UAnalyticEventsBase : public UPlatformInterfaceBase
{
public:
    //## BEGIN PROPS AnalyticEventsBase
    BITFIELD bSessionInProgress:1;
    BITFIELD bAutoStartSession:1;
    INT SessionPauseThresholdSec;
    FStringNoInit UserId;
    //## END PROPS AnalyticEventsBase

    virtual void Init();
    virtual void SetUserId(const FString& NewUserId);
    virtual void StartSession();
    virtual void EndSession();
    virtual void LogStringEvent(const FString& EventName,UBOOL bTimed);
    virtual void EndStringEvent(const FString& EventName);
    virtual void LogStringEventParam(const FString& EventName,const FString& ParamName,const FString& ParamValue,UBOOL bTimed);
    virtual void EndStringEventParam(const FString& EventName,const FString& ParamName,const FString& ParamValue);
    virtual void LogStringEventParamArray(const FString& EventName,const TArray<struct FEventStringParam>& ParamArray,UBOOL bTimed);
    virtual void EndStringEventParamArray(const FString& EventName,const TArray<struct FEventStringParam>& ParamArray);
    virtual void LogErrorMessage(const FString& ErrorName,const FString& ErrorMessage);
    virtual void LogUserAttributeUpdate(const FString& AttributeName,const FString& AttributeValue);
    virtual void LogUserAttributeUpdateArray(const TArray<struct FEventStringParam>& AttributeArray);
    virtual void LogItemPurchaseEvent(const FString& ItemId,const FString& Currency,INT PerItemCost,INT ItemQuantity);
    virtual void LogCurrencyPurchaseEvent(const FString& GameCurrencyType,INT GameCurrencyAmount,const FString& RealCurrencyType,FLOAT RealMoneyCost,const FString& PaymentProvider);
    virtual void LogCurrencyGivenEvent(const FString& GameCurrencyType,INT GameCurrencyAmount);
    virtual void SendCachedEvents();
    DECLARE_FUNCTION(execInit)
    {
        P_FINISH;
        this->Init();
    }
    DECLARE_FUNCTION(execSetUserId)
    {
        P_GET_STR(NewUserId);
        P_FINISH;
        this->SetUserId(NewUserId);
    }
    DECLARE_FUNCTION(execStartSession)
    {
        P_FINISH;
        this->StartSession();
    }
    DECLARE_FUNCTION(execEndSession)
    {
        P_FINISH;
        this->EndSession();
    }
    DECLARE_FUNCTION(execLogStringEvent)
    {
        P_GET_STR(EventName);
        P_GET_UBOOL(bTimed);
        P_FINISH;
        this->LogStringEvent(EventName,bTimed);
    }
    DECLARE_FUNCTION(execEndStringEvent)
    {
        P_GET_STR(EventName);
        P_FINISH;
        this->EndStringEvent(EventName);
    }
    DECLARE_FUNCTION(execLogStringEventParam)
    {
        P_GET_STR(EventName);
        P_GET_STR(ParamName);
        P_GET_STR(ParamValue);
        P_GET_UBOOL(bTimed);
        P_FINISH;
        this->LogStringEventParam(EventName,ParamName,ParamValue,bTimed);
    }
    DECLARE_FUNCTION(execEndStringEventParam)
    {
        P_GET_STR(EventName);
        P_GET_STR(ParamName);
        P_GET_STR(ParamValue);
        P_FINISH;
        this->EndStringEventParam(EventName,ParamName,ParamValue);
    }
    DECLARE_FUNCTION(execLogStringEventParamArray)
    {
        P_GET_STR(EventName);
        P_GET_TARRAY(struct FEventStringParam,ParamArray);
        P_GET_UBOOL(bTimed);
        P_FINISH;
        this->LogStringEventParamArray(EventName,ParamArray,bTimed);
    }
    DECLARE_FUNCTION(execEndStringEventParamArray)
    {
        P_GET_STR(EventName);
        P_GET_TARRAY(struct FEventStringParam,ParamArray);
        P_FINISH;
        this->EndStringEventParamArray(EventName,ParamArray);
    }
    DECLARE_FUNCTION(execLogErrorMessage)
    {
        P_GET_STR(ErrorName);
        P_GET_STR(ErrorMessage);
        P_FINISH;
        this->LogErrorMessage(ErrorName,ErrorMessage);
    }
    DECLARE_FUNCTION(execLogUserAttributeUpdate)
    {
        P_GET_STR(AttributeName);
        P_GET_STR(AttributeValue);
        P_FINISH;
        this->LogUserAttributeUpdate(AttributeName,AttributeValue);
    }
    DECLARE_FUNCTION(execLogUserAttributeUpdateArray)
    {
        P_GET_TARRAY(struct FEventStringParam,AttributeArray);
        P_FINISH;
        this->LogUserAttributeUpdateArray(AttributeArray);
    }
    DECLARE_FUNCTION(execLogItemPurchaseEvent)
    {
        P_GET_STR(ItemId);
        P_GET_STR(Currency);
        P_GET_INT(PerItemCost);
        P_GET_INT(ItemQuantity);
        P_FINISH;
        this->LogItemPurchaseEvent(ItemId,Currency,PerItemCost,ItemQuantity);
    }
    DECLARE_FUNCTION(execLogCurrencyPurchaseEvent)
    {
        P_GET_STR(GameCurrencyType);
        P_GET_INT(GameCurrencyAmount);
        P_GET_STR(RealCurrencyType);
        P_GET_FLOAT(RealMoneyCost);
        P_GET_STR(PaymentProvider);
        P_FINISH;
        this->LogCurrencyPurchaseEvent(GameCurrencyType,GameCurrencyAmount,RealCurrencyType,RealMoneyCost,PaymentProvider);
    }
    DECLARE_FUNCTION(execLogCurrencyGivenEvent)
    {
        P_GET_STR(GameCurrencyType);
        P_GET_INT(GameCurrencyAmount);
        P_FINISH;
        this->LogCurrencyGivenEvent(GameCurrencyType,GameCurrencyAmount);
    }
    DECLARE_FUNCTION(execSendCachedEvents)
    {
        P_FINISH;
        this->SendCachedEvents();
    }
    void eventSendCachedEvents()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SendCachedEvents),NULL);
    }
    void eventLogCurrencyGivenEvent(const FString& GameCurrencyType,INT GameCurrencyAmount)
    {
        AnalyticEventsBase_eventLogCurrencyGivenEvent_Parms Parms(EC_EventParm);
        Parms.GameCurrencyType=GameCurrencyType;
        Parms.GameCurrencyAmount=GameCurrencyAmount;
        ProcessEvent(FindFunctionChecked(ENGINE_LogCurrencyGivenEvent),&Parms);
    }
    void eventLogCurrencyPurchaseEvent(const FString& GameCurrencyType,INT GameCurrencyAmount,const FString& RealCurrencyType,FLOAT RealMoneyCost,const FString& PaymentProvider)
    {
        AnalyticEventsBase_eventLogCurrencyPurchaseEvent_Parms Parms(EC_EventParm);
        Parms.GameCurrencyType=GameCurrencyType;
        Parms.GameCurrencyAmount=GameCurrencyAmount;
        Parms.RealCurrencyType=RealCurrencyType;
        Parms.RealMoneyCost=RealMoneyCost;
        Parms.PaymentProvider=PaymentProvider;
        ProcessEvent(FindFunctionChecked(ENGINE_LogCurrencyPurchaseEvent),&Parms);
    }
    void eventLogItemPurchaseEvent(const FString& ItemId,const FString& Currency,INT PerItemCost,INT ItemQuantity)
    {
        AnalyticEventsBase_eventLogItemPurchaseEvent_Parms Parms(EC_EventParm);
        Parms.ItemId=ItemId;
        Parms.Currency=Currency;
        Parms.PerItemCost=PerItemCost;
        Parms.ItemQuantity=ItemQuantity;
        ProcessEvent(FindFunctionChecked(ENGINE_LogItemPurchaseEvent),&Parms);
    }
    void eventLogUserAttributeUpdateArray(const TArray<struct FEventStringParam>& AttributeArray)
    {
        AnalyticEventsBase_eventLogUserAttributeUpdateArray_Parms Parms(EC_EventParm);
        Parms.AttributeArray=AttributeArray;
        ProcessEvent(FindFunctionChecked(ENGINE_LogUserAttributeUpdateArray),&Parms);
    }
    void eventLogUserAttributeUpdate(const FString& AttributeName,const FString& AttributeValue)
    {
        AnalyticEventsBase_eventLogUserAttributeUpdate_Parms Parms(EC_EventParm);
        Parms.AttributeName=AttributeName;
        Parms.AttributeValue=AttributeValue;
        ProcessEvent(FindFunctionChecked(ENGINE_LogUserAttributeUpdate),&Parms);
    }
    void eventLogErrorMessage(const FString& ErrorName,const FString& ErrorMessage)
    {
        AnalyticEventsBase_eventLogErrorMessage_Parms Parms(EC_EventParm);
        Parms.ErrorName=ErrorName;
        Parms.ErrorMessage=ErrorMessage;
        ProcessEvent(FindFunctionChecked(ENGINE_LogErrorMessage),&Parms);
    }
    void eventEndStringEventParamArray(const FString& EventName,const TArray<struct FEventStringParam>& ParamArray)
    {
        AnalyticEventsBase_eventEndStringEventParamArray_Parms Parms(EC_EventParm);
        Parms.EventName=EventName;
        Parms.ParamArray=ParamArray;
        ProcessEvent(FindFunctionChecked(ENGINE_EndStringEventParamArray),&Parms);
    }
    void eventLogStringEventParamArray(const FString& EventName,const TArray<struct FEventStringParam>& ParamArray,UBOOL bTimed)
    {
        AnalyticEventsBase_eventLogStringEventParamArray_Parms Parms(EC_EventParm);
        Parms.EventName=EventName;
        Parms.ParamArray=ParamArray;
        Parms.bTimed=bTimed ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_LogStringEventParamArray),&Parms);
    }
    void eventEndStringEventParam(const FString& EventName,const FString& ParamName,const FString& ParamValue)
    {
        AnalyticEventsBase_eventEndStringEventParam_Parms Parms(EC_EventParm);
        Parms.EventName=EventName;
        Parms.ParamName=ParamName;
        Parms.ParamValue=ParamValue;
        ProcessEvent(FindFunctionChecked(ENGINE_EndStringEventParam),&Parms);
    }
    void eventLogStringEventParam(const FString& EventName,const FString& ParamName,const FString& ParamValue,UBOOL bTimed)
    {
        AnalyticEventsBase_eventLogStringEventParam_Parms Parms(EC_EventParm);
        Parms.EventName=EventName;
        Parms.ParamName=ParamName;
        Parms.ParamValue=ParamValue;
        Parms.bTimed=bTimed ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_LogStringEventParam),&Parms);
    }
    void eventEndStringEvent(const FString& EventName)
    {
        AnalyticEventsBase_eventEndStringEvent_Parms Parms(EC_EventParm);
        Parms.EventName=EventName;
        ProcessEvent(FindFunctionChecked(ENGINE_EndStringEvent),&Parms);
    }
    void eventLogStringEvent(const FString& EventName,UBOOL bTimed)
    {
        AnalyticEventsBase_eventLogStringEvent_Parms Parms(EC_EventParm);
        Parms.EventName=EventName;
        Parms.bTimed=bTimed ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_LogStringEvent),&Parms);
    }
    void eventEndSession()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndSession),NULL);
    }
    void eventStartSession()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_StartSession),NULL);
    }
    void eventSetUserId(const FString& NewUserId)
    {
        AnalyticEventsBase_eventSetUserId_Parms Parms(EC_EventParm);
        Parms.NewUserId=NewUserId;
        ProcessEvent(FindFunctionChecked(ENGINE_SetUserId),&Parms);
    }
    void eventInit()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Init),NULL);
    }
    DECLARE_CLASS(UAnalyticEventsBase,UPlatformInterfaceBase,0|CLASS_Transient|CLASS_Config,Engine)
    static const TCHAR* StaticConfigName() {return TEXT("Engine");}

    NO_DEFAULT_CONSTRUCTOR(UAnalyticEventsBase)
};

class UMultiProviderAnalytics : public UAnalyticEventsBase
{
public:
    //## BEGIN PROPS MultiProviderAnalytics
    TArrayNoInit<FString> AnalyticsProviderClassNames;
    TArrayNoInit<class UAnalyticEventsBase*> AnalyticsProviders;
    //## END PROPS MultiProviderAnalytics

    virtual void SetUserId(const FString& NewUserId);
    virtual void StartSession();
    virtual void EndSession();
    virtual void LogStringEvent(const FString& EventName,UBOOL bTimed);
    virtual void EndStringEvent(const FString& EventName);
    virtual void LogStringEventParam(const FString& EventName,const FString& ParamName,const FString& ParamValue,UBOOL bTimed);
    virtual void EndStringEventParam(const FString& EventName,const FString& ParamName,const FString& ParamValue);
    virtual void LogStringEventParamArray(const FString& EventName,const TArray<struct FEventStringParam>& ParamArray,UBOOL bTimed);
    virtual void EndStringEventParamArray(const FString& EventName,const TArray<struct FEventStringParam>& ParamArray);
    virtual void LogErrorMessage(const FString& ErrorName,const FString& ErrorMessage);
    virtual void LogUserAttributeUpdate(const FString& AttributeName,const FString& AttributeValue);
    virtual void LogUserAttributeUpdateArray(const TArray<struct FEventStringParam>& AttributeArray);
    virtual void LogItemPurchaseEvent(const FString& ItemId,const FString& Currency,INT PerItemCost,INT ItemQuantity);
    virtual void LogCurrencyPurchaseEvent(const FString& GameCurrencyType,INT GameCurrencyAmount,const FString& RealCurrencyType,FLOAT RealMoneyCost,const FString& PaymentProvider);
    virtual void LogCurrencyGivenEvent(const FString& GameCurrencyType,INT GameCurrencyAmount);
    virtual void SendCachedEvents();
    DECLARE_CLASS(UMultiProviderAnalytics,UAnalyticEventsBase,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMultiProviderAnalytics)
};

struct FNotificationMessageInfo
{
    FStringNoInit Key;
    FStringNoInit Value;

    /** Constructors */
    FNotificationMessageInfo() {}
    FNotificationMessageInfo(EEventParm)
    {
        appMemzero(this, sizeof(FNotificationMessageInfo));
    }
};

struct FNotificationInfo
{
    BITFIELD bIsLocal:1;
    FStringNoInit MessageBody;
    INT BadgeNumber;
    TArrayNoInit<struct FNotificationMessageInfo> MessageInfo;

    /** Constructors */
    FNotificationInfo() {}
    FNotificationInfo(EEventParm)
    {
        appMemzero(this, sizeof(FNotificationInfo));
    }
};

struct FLaunchNotificationInfo
{
    BITFIELD bWasLaunchedViaNotification:1;
    SCRIPT_ALIGN;
    struct FNotificationInfo Notification;

    /** Constructors */
    FLaunchNotificationInfo() {}
    FLaunchNotificationInfo(EEventParm)
    {
        appMemzero(this, sizeof(FLaunchNotificationInfo));
    }
};

struct AppNotificationsBase_eventOnReceivedRemoteNotification_Parms
{
    struct FNotificationInfo Notification;
    UBOOL bWasAppActive;
    AppNotificationsBase_eventOnReceivedRemoteNotification_Parms(EEventParm)
    : Notification(EC_EventParm)
    {
    }
};
struct AppNotificationsBase_eventOnReceivedLocalNotification_Parms
{
    struct FNotificationInfo Notification;
    UBOOL bWasAppActive;
    AppNotificationsBase_eventOnReceivedLocalNotification_Parms(EEventParm)
    : Notification(EC_EventParm)
    {
    }
};
struct AppNotificationsBase_eventInit_Parms
{
    AppNotificationsBase_eventInit_Parms(EEventParm)
    {
    }
};
class UAppNotificationsBase : public UPlatformInterfaceBase
{
public:
    //## BEGIN PROPS AppNotificationsBase
    struct FLaunchNotificationInfo AppLaunchNotification;
    FScriptDelegate __OnReceivedLocalNotification__Delegate;
    FScriptDelegate __OnReceivedRemoteNotification__Delegate;
    //## END PROPS AppNotificationsBase

    virtual void Init();
    virtual void ScheduleLocalNotification(const struct FNotificationInfo& Notification,INT StartOffsetSeconds);
    virtual void CancelAllScheduledLocalNotifications();
    DECLARE_FUNCTION(execInit)
    {
        P_FINISH;
        this->Init();
    }
    DECLARE_FUNCTION(execScheduleLocalNotification)
    {
        P_GET_STRUCT_INIT_REF(struct FNotificationInfo,Notification);
        P_GET_INT(StartOffsetSeconds);
        P_FINISH;
        this->ScheduleLocalNotification(Notification,StartOffsetSeconds);
    }
    DECLARE_FUNCTION(execCancelAllScheduledLocalNotifications)
    {
        P_FINISH;
        this->CancelAllScheduledLocalNotifications();
    }
    void delegateOnReceivedRemoteNotification(const struct FNotificationInfo& Notification,UBOOL bWasAppActive)
    {
        AppNotificationsBase_eventOnReceivedRemoteNotification_Parms Parms(EC_EventParm);
        Parms.Notification=Notification;
        Parms.bWasAppActive=bWasAppActive ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ENGINE_OnReceivedRemoteNotification,&__OnReceivedRemoteNotification__Delegate,&Parms);
    }
    void delegateOnReceivedLocalNotification(const struct FNotificationInfo& Notification,UBOOL bWasAppActive)
    {
        AppNotificationsBase_eventOnReceivedLocalNotification_Parms Parms(EC_EventParm);
        Parms.Notification=Notification;
        Parms.bWasAppActive=bWasAppActive ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ENGINE_OnReceivedLocalNotification,&__OnReceivedLocalNotification__Delegate,&Parms);
    }
    void eventInit()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Init),NULL);
    }
    DECLARE_CLASS(UAppNotificationsBase,UPlatformInterfaceBase,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UAppNotificationsBase)
};

struct CloudStorageBase_eventUpgradeLocalStorageToCloud_Parms
{
    TScriptInterface<class ICloudStorageUpgradeHelper> UpgradeHelper;
    UBOOL bForceSearchAgain;
    UBOOL ReturnValue;
    CloudStorageBase_eventUpgradeLocalStorageToCloud_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventResolveConflictWithVersionIndex_Parms
{
    INT Index;
    UBOOL ReturnValue;
    CloudStorageBase_eventResolveConflictWithVersionIndex_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventResolveConflictWithNewestDocument_Parms
{
    UBOOL ReturnValue;
    CloudStorageBase_eventResolveConflictWithNewestDocument_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventWaitForWritesToFinish_Parms
{
    FLOAT MaxTimeSeconds;
    UBOOL ReturnValue;
    CloudStorageBase_eventWaitForWritesToFinish_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventIsStillWritingFiles_Parms
{
    UBOOL ReturnValue;
    CloudStorageBase_eventIsStillWritingFiles_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventSaveDocumentWithObject_Parms
{
    INT Index;
    class UObject* ObjectData;
    INT SaveVersion;
    UBOOL ReturnValue;
    CloudStorageBase_eventSaveDocumentWithObject_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventSaveDocumentWithBytes_Parms
{
    INT Index;
    TArray<BYTE> ByteData;
    UBOOL ReturnValue;
    CloudStorageBase_eventSaveDocumentWithBytes_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventSaveDocumentWithString_Parms
{
    INT Index;
    FString StringData;
    UBOOL ReturnValue;
    CloudStorageBase_eventSaveDocumentWithString_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventWriteCloudDocument_Parms
{
    INT Index;
    UBOOL ReturnValue;
    CloudStorageBase_eventWriteCloudDocument_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventParseDocumentAsObject_Parms
{
    INT Index;
    class UClass* ObjectClass;
    INT ExpectedVersion;
    UBOOL bIsForConflict;
    class UObject* ReturnValue;
    CloudStorageBase_eventParseDocumentAsObject_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventParseDocumentAsBytes_Parms
{
    INT Index;
    TArray<BYTE> ByteData;
    UBOOL bIsForConflict;
    CloudStorageBase_eventParseDocumentAsBytes_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventParseDocumentAsString_Parms
{
    INT Index;
    UBOOL bIsForConflict;
    FString ReturnValue;
    CloudStorageBase_eventParseDocumentAsString_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventReadCloudDocument_Parms
{
    INT Index;
    UBOOL bIsForConflict;
    UBOOL ReturnValue;
    CloudStorageBase_eventReadCloudDocument_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventDeleteAllCloudDocuments_Parms
{
    CloudStorageBase_eventDeleteAllCloudDocuments_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventCreateCloudDocument_Parms
{
    FString Filename;
    INT ReturnValue;
    CloudStorageBase_eventCreateCloudDocument_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventGetCloudDocumentName_Parms
{
    INT Index;
    FString ReturnValue;
    CloudStorageBase_eventGetCloudDocumentName_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventGetNumCloudDocuments_Parms
{
    UBOOL bIsForConflict;
    INT ReturnValue;
    CloudStorageBase_eventGetNumCloudDocuments_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventQueryForCloudDocuments_Parms
{
    UBOOL ReturnValue;
    CloudStorageBase_eventQueryForCloudDocuments_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventWriteKeyValue_Parms
{
    FString KeyName;
    struct FPlatformInterfaceData Value;
    UBOOL ReturnValue;
    CloudStorageBase_eventWriteKeyValue_Parms(EEventParm)
    {
    }
};
struct CloudStorageBase_eventReadKeyValueFromLocalStore_Parms
{
    FString KeyName;
    BYTE Type;
    struct FPlatformInterfaceDelegateResult Value;
    UBOOL ReturnValue;
    CloudStorageBase_eventReadKeyValueFromLocalStore_Parms(EEventParm)
    : Value(EC_EventParm)
    {
    }
};
struct CloudStorageBase_eventReadKeyValue_Parms
{
    FString KeyName;
    BYTE Type;
    struct FPlatformInterfaceDelegateResult Value;
    UBOOL ReturnValue;
    CloudStorageBase_eventReadKeyValue_Parms(EEventParm)
    : Value(EC_EventParm)
    {
    }
};
struct CloudStorageBase_eventInit_Parms
{
    CloudStorageBase_eventInit_Parms(EEventParm)
    {
    }
};
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
    //## BEGIN PROPS CloudStorageBase
    TArrayNoInit<FString> LocalCloudFiles;
    BITFIELD bSuppressDelegateCalls:1;
    SCRIPT_ALIGN;
    //## END PROPS CloudStorageBase

    virtual void Init();
    virtual UBOOL IsUsingLocalStorage();
    virtual UBOOL ReadKeyValue(const FString& KeyName,BYTE Type,struct FPlatformInterfaceDelegateResult& Value);
    virtual UBOOL ReadKeyValueFromLocalStore(const FString& KeyName,BYTE Type,struct FPlatformInterfaceDelegateResult& Value);
    virtual UBOOL WriteKeyValue(const FString& KeyName,const struct FPlatformInterfaceData& Value);
    virtual UBOOL QueryForCloudDocuments();
    virtual INT GetNumCloudDocuments(UBOOL bIsForConflict=FALSE);
    virtual FString GetCloudDocumentName(INT Index);
    virtual INT CreateCloudDocument(const FString& Filename);
    virtual void DeleteAllCloudDocuments();
    virtual UBOOL ReadCloudDocument(INT Index,UBOOL bIsForConflict=FALSE);
    virtual FString ParseDocumentAsString(INT Index,UBOOL bIsForConflict=FALSE);
    virtual void ParseDocumentAsBytes(INT Index,TArray<BYTE>& ByteData,UBOOL bIsForConflict=FALSE);
    virtual class UObject* ParseDocumentAsObject(INT Index,class UClass* ObjectClass,INT ExpectedVersion,UBOOL bIsForConflict=FALSE);
    virtual UBOOL WriteCloudDocument(INT Index);
    virtual UBOOL SaveDocumentWithString(INT Index,const FString& StringData);
    virtual UBOOL SaveDocumentWithBytes(INT Index,const TArray<BYTE>& ByteData);
    virtual UBOOL SaveDocumentWithObject(INT Index,class UObject* ObjectData,INT SaveVersion);
    virtual UBOOL IsStillWritingFiles();
    virtual UBOOL WaitForWritesToFinish(FLOAT MaxTimeSeconds=0);
    virtual UBOOL ResolveConflictWithNewestDocument();
    virtual UBOOL ResolveConflictWithVersionIndex(INT Index);
    virtual UBOOL UpgradeLocalStorageToCloud(const TScriptInterface<class ICloudStorageUpgradeHelper>& UpgradeHelper,UBOOL bForceSearchAgain=FALSE);
    DECLARE_FUNCTION(execInit)
    {
        P_FINISH;
        this->Init();
    }
    DECLARE_FUNCTION(execIsUsingLocalStorage)
    {
        P_FINISH;
        *(UBOOL*)Result=this->IsUsingLocalStorage();
    }
    DECLARE_FUNCTION(execReadKeyValue)
    {
        P_GET_STR(KeyName);
        P_GET_BYTE(Type);
        P_GET_STRUCT_INIT_REF(struct FPlatformInterfaceDelegateResult,Value);
        P_FINISH;
        *(UBOOL*)Result=this->ReadKeyValue(KeyName,Type,Value);
    }
    DECLARE_FUNCTION(execReadKeyValueFromLocalStore)
    {
        P_GET_STR(KeyName);
        P_GET_BYTE(Type);
        P_GET_STRUCT_INIT_REF(struct FPlatformInterfaceDelegateResult,Value);
        P_FINISH;
        *(UBOOL*)Result=this->ReadKeyValueFromLocalStore(KeyName,Type,Value);
    }
    DECLARE_FUNCTION(execWriteKeyValue)
    {
        P_GET_STR(KeyName);
        P_GET_STRUCT_INIT_REF(struct FPlatformInterfaceData,Value);
        P_FINISH;
        *(UBOOL*)Result=this->WriteKeyValue(KeyName,Value);
    }
    DECLARE_FUNCTION(execQueryForCloudDocuments)
    {
        P_FINISH;
        *(UBOOL*)Result=this->QueryForCloudDocuments();
    }
    DECLARE_FUNCTION(execGetNumCloudDocuments)
    {
        P_GET_UBOOL_OPTX(bIsForConflict,FALSE);
        P_FINISH;
        *(INT*)Result=this->GetNumCloudDocuments(bIsForConflict);
    }
    DECLARE_FUNCTION(execGetCloudDocumentName)
    {
        P_GET_INT(Index);
        P_FINISH;
        *(FString*)Result=this->GetCloudDocumentName(Index);
    }
    DECLARE_FUNCTION(execCreateCloudDocument)
    {
        P_GET_STR(Filename);
        P_FINISH;
        *(INT*)Result=this->CreateCloudDocument(Filename);
    }
    DECLARE_FUNCTION(execDeleteAllCloudDocuments)
    {
        P_FINISH;
        this->DeleteAllCloudDocuments();
    }
    DECLARE_FUNCTION(execReadCloudDocument)
    {
        P_GET_INT(Index);
        P_GET_UBOOL_OPTX(bIsForConflict,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->ReadCloudDocument(Index,bIsForConflict);
    }
    DECLARE_FUNCTION(execParseDocumentAsString)
    {
        P_GET_INT(Index);
        P_GET_UBOOL_OPTX(bIsForConflict,FALSE);
        P_FINISH;
        *(FString*)Result=this->ParseDocumentAsString(Index,bIsForConflict);
    }
    DECLARE_FUNCTION(execParseDocumentAsBytes)
    {
        P_GET_INT(Index);
        P_GET_TARRAY_REF(BYTE,ByteData);
        P_GET_UBOOL_OPTX(bIsForConflict,FALSE);
        P_FINISH;
        this->ParseDocumentAsBytes(Index,ByteData,bIsForConflict);
    }
    DECLARE_FUNCTION(execParseDocumentAsObject)
    {
        P_GET_INT(Index);
        P_GET_OBJECT(UClass,ObjectClass);
        P_GET_INT(ExpectedVersion);
        P_GET_UBOOL_OPTX(bIsForConflict,FALSE);
        P_FINISH;
        *(class UObject**)Result=this->ParseDocumentAsObject(Index,ObjectClass,ExpectedVersion,bIsForConflict);
    }
    DECLARE_FUNCTION(execWriteCloudDocument)
    {
        P_GET_INT(Index);
        P_FINISH;
        *(UBOOL*)Result=this->WriteCloudDocument(Index);
    }
    DECLARE_FUNCTION(execSaveDocumentWithString)
    {
        P_GET_INT(Index);
        P_GET_STR(StringData);
        P_FINISH;
        *(UBOOL*)Result=this->SaveDocumentWithString(Index,StringData);
    }
    DECLARE_FUNCTION(execSaveDocumentWithBytes)
    {
        P_GET_INT(Index);
        P_GET_TARRAY(BYTE,ByteData);
        P_FINISH;
        *(UBOOL*)Result=this->SaveDocumentWithBytes(Index,ByteData);
    }
    DECLARE_FUNCTION(execSaveDocumentWithObject)
    {
        P_GET_INT(Index);
        P_GET_OBJECT(UObject,ObjectData);
        P_GET_INT(SaveVersion);
        P_FINISH;
        *(UBOOL*)Result=this->SaveDocumentWithObject(Index,ObjectData,SaveVersion);
    }
    DECLARE_FUNCTION(execIsStillWritingFiles)
    {
        P_FINISH;
        *(UBOOL*)Result=this->IsStillWritingFiles();
    }
    DECLARE_FUNCTION(execWaitForWritesToFinish)
    {
        P_GET_FLOAT_OPTX(MaxTimeSeconds,0);
        P_FINISH;
        *(UBOOL*)Result=this->WaitForWritesToFinish(MaxTimeSeconds);
    }
    DECLARE_FUNCTION(execResolveConflictWithNewestDocument)
    {
        P_FINISH;
        *(UBOOL*)Result=this->ResolveConflictWithNewestDocument();
    }
    DECLARE_FUNCTION(execResolveConflictWithVersionIndex)
    {
        P_GET_INT(Index);
        P_FINISH;
        *(UBOOL*)Result=this->ResolveConflictWithVersionIndex(Index);
    }
    DECLARE_FUNCTION(execUpgradeLocalStorageToCloud)
    {
        P_GET_TINTERFACE(ICloudStorageUpgradeHelper,UpgradeHelper);
        P_GET_UBOOL_OPTX(bForceSearchAgain,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->UpgradeLocalStorageToCloud(UpgradeHelper,bForceSearchAgain);
    }
    UBOOL eventUpgradeLocalStorageToCloud(const TScriptInterface<class ICloudStorageUpgradeHelper>& UpgradeHelper,UBOOL bForceSearchAgain=FALSE)
    {
        CloudStorageBase_eventUpgradeLocalStorageToCloud_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.UpgradeHelper=UpgradeHelper;
        Parms.bForceSearchAgain=bForceSearchAgain ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_UpgradeLocalStorageToCloud),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventResolveConflictWithVersionIndex(INT Index)
    {
        CloudStorageBase_eventResolveConflictWithVersionIndex_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_ResolveConflictWithVersionIndex),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventResolveConflictWithNewestDocument()
    {
        CloudStorageBase_eventResolveConflictWithNewestDocument_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_ResolveConflictWithNewestDocument),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventWaitForWritesToFinish(FLOAT MaxTimeSeconds=0)
    {
        CloudStorageBase_eventWaitForWritesToFinish_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.MaxTimeSeconds=MaxTimeSeconds;
        ProcessEvent(FindFunctionChecked(ENGINE_WaitForWritesToFinish),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventIsStillWritingFiles()
    {
        CloudStorageBase_eventIsStillWritingFiles_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_IsStillWritingFiles),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventSaveDocumentWithObject(INT Index,class UObject* ObjectData,INT SaveVersion)
    {
        CloudStorageBase_eventSaveDocumentWithObject_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.Index=Index;
        Parms.ObjectData=ObjectData;
        Parms.SaveVersion=SaveVersion;
        ProcessEvent(FindFunctionChecked(ENGINE_SaveDocumentWithObject),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventSaveDocumentWithBytes(INT Index,const TArray<BYTE>& ByteData)
    {
        CloudStorageBase_eventSaveDocumentWithBytes_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.Index=Index;
        Parms.ByteData=ByteData;
        ProcessEvent(FindFunctionChecked(ENGINE_SaveDocumentWithBytes),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventSaveDocumentWithString(INT Index,const FString& StringData)
    {
        CloudStorageBase_eventSaveDocumentWithString_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.Index=Index;
        Parms.StringData=StringData;
        ProcessEvent(FindFunctionChecked(ENGINE_SaveDocumentWithString),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventWriteCloudDocument(INT Index)
    {
        CloudStorageBase_eventWriteCloudDocument_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_WriteCloudDocument),&Parms);
        return Parms.ReturnValue;
    }
    class UObject* eventParseDocumentAsObject(INT Index,class UClass* ObjectClass,INT ExpectedVersion,UBOOL bIsForConflict=FALSE)
    {
        CloudStorageBase_eventParseDocumentAsObject_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        Parms.Index=Index;
        Parms.ObjectClass=ObjectClass;
        Parms.ExpectedVersion=ExpectedVersion;
        Parms.bIsForConflict=bIsForConflict ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_ParseDocumentAsObject),&Parms);
        return Parms.ReturnValue;
    }
    void eventParseDocumentAsBytes(INT Index,TArray<BYTE>& ByteData,UBOOL bIsForConflict=FALSE)
    {
        CloudStorageBase_eventParseDocumentAsBytes_Parms Parms(EC_EventParm);
        Parms.Index=Index;
        Parms.ByteData=ByteData;
        Parms.bIsForConflict=bIsForConflict ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_ParseDocumentAsBytes),&Parms);
        ByteData=Parms.ByteData;
    }
    FString eventParseDocumentAsString(INT Index,UBOOL bIsForConflict=FALSE)
    {
        CloudStorageBase_eventParseDocumentAsString_Parms Parms(EC_EventParm);
        Parms.Index=Index;
        Parms.bIsForConflict=bIsForConflict ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_ParseDocumentAsString),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventReadCloudDocument(INT Index,UBOOL bIsForConflict=FALSE)
    {
        CloudStorageBase_eventReadCloudDocument_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.Index=Index;
        Parms.bIsForConflict=bIsForConflict ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_ReadCloudDocument),&Parms);
        return Parms.ReturnValue;
    }
    void eventDeleteAllCloudDocuments()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DeleteAllCloudDocuments),NULL);
    }
    INT eventCreateCloudDocument(const FString& Filename)
    {
        CloudStorageBase_eventCreateCloudDocument_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.Filename=Filename;
        ProcessEvent(FindFunctionChecked(ENGINE_CreateCloudDocument),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetCloudDocumentName(INT Index)
    {
        CloudStorageBase_eventGetCloudDocumentName_Parms Parms(EC_EventParm);
        Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_GetCloudDocumentName),&Parms);
        return Parms.ReturnValue;
    }
    INT eventGetNumCloudDocuments(UBOOL bIsForConflict=FALSE)
    {
        CloudStorageBase_eventGetNumCloudDocuments_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.bIsForConflict=bIsForConflict ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_GetNumCloudDocuments),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventQueryForCloudDocuments()
    {
        CloudStorageBase_eventQueryForCloudDocuments_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_QueryForCloudDocuments),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventWriteKeyValue(const FString& KeyName,const struct FPlatformInterfaceData& Value)
    {
        CloudStorageBase_eventWriteKeyValue_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.KeyName=KeyName;
        Parms.Value=Value;
        ProcessEvent(FindFunctionChecked(ENGINE_WriteKeyValue),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventReadKeyValueFromLocalStore(const FString& KeyName,BYTE Type,struct FPlatformInterfaceDelegateResult& Value)
    {
        CloudStorageBase_eventReadKeyValueFromLocalStore_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.KeyName=KeyName;
        Parms.Type=Type;
        Parms.Value=Value;
        ProcessEvent(FindFunctionChecked(ENGINE_ReadKeyValueFromLocalStore),&Parms);
        Value=Parms.Value;
        return Parms.ReturnValue;
    }
    UBOOL eventReadKeyValue(const FString& KeyName,BYTE Type,struct FPlatformInterfaceDelegateResult& Value)
    {
        CloudStorageBase_eventReadKeyValue_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.KeyName=KeyName;
        Parms.Type=Type;
        Parms.Value=Value;
        ProcessEvent(FindFunctionChecked(ENGINE_ReadKeyValue),&Parms);
        Value=Parms.Value;
        return Parms.ReturnValue;
    }
    void eventInit()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Init),NULL);
    }
    DECLARE_CLASS(UCloudStorageBase,UPlatformInterfaceBase,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCloudStorageBase)
};

struct FFacebookFriend
{
    FStringNoInit Name;
    FStringNoInit Id;

    /** Constructors */
    FFacebookFriend() {}
    FFacebookFriend(EEventParm)
    {
        appMemzero(this, sizeof(FFacebookFriend));
    }
};

struct FacebookIntegration_eventDisconnect_Parms
{
    FacebookIntegration_eventDisconnect_Parms(EEventParm)
    {
    }
};
struct FacebookIntegration_eventFacebookDialog_Parms
{
    FString Action;
    TArray<FString> ParamKeysAndValues;
    FacebookIntegration_eventFacebookDialog_Parms(EEventParm)
    {
    }
};
struct FacebookIntegration_eventFacebookRequest_Parms
{
    FString GraphRequest;
    FacebookIntegration_eventFacebookRequest_Parms(EEventParm)
    {
    }
};
struct FacebookIntegration_eventIsAuthorized_Parms
{
    UBOOL ReturnValue;
    FacebookIntegration_eventIsAuthorized_Parms(EEventParm)
    {
    }
};
struct FacebookIntegration_eventAuthorize_Parms
{
    UBOOL ReturnValue;
    FacebookIntegration_eventAuthorize_Parms(EEventParm)
    {
    }
};
struct FacebookIntegration_eventInit_Parms
{
    UBOOL ReturnValue;
    FacebookIntegration_eventInit_Parms(EEventParm)
    {
    }
};
class UFacebookIntegration : public UPlatformInterfaceBase
{
public:
    //## BEGIN PROPS FacebookIntegration
    FStringNoInit AppID;
    TArrayNoInit<FString> Permissions;
    FStringNoInit UserName;
    FStringNoInit UserId;
    FStringNoInit AccessToken;
    TArrayNoInit<struct FFacebookFriend> FriendsList;
    //## END PROPS FacebookIntegration

    virtual UBOOL Init();
    virtual UBOOL Authorize();
    virtual UBOOL IsAuthorized();
    virtual void FacebookRequest(const FString& GraphRequest);
    virtual void FacebookDialog(const FString& Action,const TArray<FString>& ParamKeysAndValues);
    virtual void Disconnect();
    DECLARE_FUNCTION(execInit)
    {
        P_FINISH;
        *(UBOOL*)Result=this->Init();
    }
    DECLARE_FUNCTION(execAuthorize)
    {
        P_FINISH;
        *(UBOOL*)Result=this->Authorize();
    }
    DECLARE_FUNCTION(execIsAuthorized)
    {
        P_FINISH;
        *(UBOOL*)Result=this->IsAuthorized();
    }
    DECLARE_FUNCTION(execFacebookRequest)
    {
        P_GET_STR(GraphRequest);
        P_FINISH;
        this->FacebookRequest(GraphRequest);
    }
    DECLARE_FUNCTION(execFacebookDialog)
    {
        P_GET_STR(Action);
        P_GET_TARRAY(FString,ParamKeysAndValues);
        P_FINISH;
        this->FacebookDialog(Action,ParamKeysAndValues);
    }
    DECLARE_FUNCTION(execDisconnect)
    {
        P_FINISH;
        this->Disconnect();
    }
    void eventDisconnect()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Disconnect),NULL);
    }
    void eventFacebookDialog(const FString& Action,const TArray<FString>& ParamKeysAndValues)
    {
        FacebookIntegration_eventFacebookDialog_Parms Parms(EC_EventParm);
        Parms.Action=Action;
        Parms.ParamKeysAndValues=ParamKeysAndValues;
        ProcessEvent(FindFunctionChecked(ENGINE_FacebookDialog),&Parms);
    }
    void eventFacebookRequest(const FString& GraphRequest)
    {
        FacebookIntegration_eventFacebookRequest_Parms Parms(EC_EventParm);
        Parms.GraphRequest=GraphRequest;
        ProcessEvent(FindFunctionChecked(ENGINE_FacebookRequest),&Parms);
    }
    UBOOL eventIsAuthorized()
    {
        FacebookIntegration_eventIsAuthorized_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_IsAuthorized),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventAuthorize()
    {
        FacebookIntegration_eventAuthorize_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_Authorize),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventInit()
    {
        FacebookIntegration_eventInit_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_Init),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UFacebookIntegration,UPlatformInterfaceBase,0|CLASS_Transient|CLASS_Config,Engine)
    static const TCHAR* StaticConfigName() {return TEXT("Engine");}

    NO_DEFAULT_CONSTRUCTOR(UFacebookIntegration)
};

struct InAppMessageBase_eventShowInAppEmailUI_Parms
{
    FString InitialSubject;
    FString InitialMessage;
    UBOOL ReturnValue;
    InAppMessageBase_eventShowInAppEmailUI_Parms(EEventParm)
    {
    }
};
struct InAppMessageBase_eventShowInAppSMSUI_Parms
{
    FString InitialMessage;
    UBOOL ReturnValue;
    InAppMessageBase_eventShowInAppSMSUI_Parms(EEventParm)
    {
    }
};
struct InAppMessageBase_eventInit_Parms
{
    InAppMessageBase_eventInit_Parms(EEventParm)
    {
    }
};
class UInAppMessageBase : public UPlatformInterfaceBase
{
public:
    //## BEGIN PROPS InAppMessageBase
    //## END PROPS InAppMessageBase

    virtual void Init();
    virtual UBOOL ShowInAppSMSUI(const FString& InitialMessage=TEXT(""));
    virtual UBOOL ShowInAppEmailUI(const FString& InitialSubject=TEXT(""),const FString& InitialMessage=TEXT(""));
    DECLARE_FUNCTION(execInit)
    {
        P_FINISH;
        this->Init();
    }
    DECLARE_FUNCTION(execShowInAppSMSUI)
    {
        P_GET_STR_OPTX(InitialMessage,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->ShowInAppSMSUI(InitialMessage);
    }
    DECLARE_FUNCTION(execShowInAppEmailUI)
    {
        P_GET_STR_OPTX(InitialSubject,TEXT(""));
        P_GET_STR_OPTX(InitialMessage,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->ShowInAppEmailUI(InitialSubject,InitialMessage);
    }
    UBOOL eventShowInAppEmailUI(const FString& InitialSubject=TEXT(""),const FString& InitialMessage=TEXT(""))
    {
        InAppMessageBase_eventShowInAppEmailUI_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.InitialSubject=InitialSubject;
        Parms.InitialMessage=InitialMessage;
        ProcessEvent(FindFunctionChecked(ENGINE_ShowInAppEmailUI),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventShowInAppSMSUI(const FString& InitialMessage=TEXT(""))
    {
        InAppMessageBase_eventShowInAppSMSUI_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.InitialMessage=InitialMessage;
        ProcessEvent(FindFunctionChecked(ENGINE_ShowInAppSMSUI),&Parms);
        return Parms.ReturnValue;
    }
    void eventInit()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Init),NULL);
    }
    DECLARE_CLASS(UInAppMessageBase,UPlatformInterfaceBase,0|CLASS_Transient,Engine)
    static const TCHAR* StaticConfigName() {return TEXT("Engine");}

    NO_DEFAULT_CONSTRUCTOR(UInAppMessageBase)
};

struct InGameAdManager_eventInit_Parms
{
    InGameAdManager_eventInit_Parms(EEventParm)
    {
    }
};
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
    //## BEGIN PROPS InGameAdManager
    BITFIELD bShouldPauseWhileAdOpen:1;
    SCRIPT_ALIGN;
    //## END PROPS InGameAdManager

    virtual void Init();
    virtual void ShowBanner(UBOOL bShowBottomOfScreen);
    virtual void HideBanner();
    virtual void ForceCloseAd();
    DECLARE_FUNCTION(execInit)
    {
        P_FINISH;
        this->Init();
    }
    DECLARE_FUNCTION(execShowBanner)
    {
        P_GET_UBOOL(bShowBottomOfScreen);
        P_FINISH;
        this->ShowBanner(bShowBottomOfScreen);
    }
    DECLARE_FUNCTION(execHideBanner)
    {
        P_FINISH;
        this->HideBanner();
    }
    DECLARE_FUNCTION(execForceCloseAd)
    {
        P_FINISH;
        this->ForceCloseAd();
    }
    void eventInit()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Init),NULL);
    }
    DECLARE_CLASS(UInGameAdManager,UPlatformInterfaceBase,0|CLASS_Transient,Engine)
	/**
	 * Called by platform when the user clicks on the ad banner. Will pause the game before
	 * calling the delegates
	 */
	void OnUserClickedBanner();

	/**
	 * Called by platform when an opened ad is closed. Will unpause the game before
	 * calling the delegates
	 */
	void OnUserClosedAd();
};

struct FPurchaseInfo
{
    FStringNoInit Identifier;
    FStringNoInit DisplayName;
    FStringNoInit DisplayDescription;
    FStringNoInit DisplayPrice;
    FStringNoInit CurrencyType;

    /** Constructors */
    FPurchaseInfo() {}
    FPurchaseInfo(EEventParm)
    {
        appMemzero(this, sizeof(FPurchaseInfo));
    }
};

struct MicroTransactionBase_eventGetProductIndex_Parms
{
    FString Identifier;
    INT ReturnValue;
    MicroTransactionBase_eventGetProductIndex_Parms(EEventParm)
    {
    }
};
struct MicroTransactionBase_eventBeginPurchase_Parms
{
    INT Index;
    UBOOL ReturnValue;
    MicroTransactionBase_eventBeginPurchase_Parms(EEventParm)
    {
    }
};
struct MicroTransactionBase_eventIsAllowedToMakePurchases_Parms
{
    UBOOL ReturnValue;
    MicroTransactionBase_eventIsAllowedToMakePurchases_Parms(EEventParm)
    {
    }
};
struct MicroTransactionBase_eventQueryForAvailablePurchases_Parms
{
    UBOOL ReturnValue;
    MicroTransactionBase_eventQueryForAvailablePurchases_Parms(EEventParm)
    {
    }
};
struct MicroTransactionBase_eventInit_Parms
{
    MicroTransactionBase_eventInit_Parms(EEventParm)
    {
    }
};
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
    //## BEGIN PROPS MicroTransactionBase
    TArrayNoInit<struct FPurchaseInfo> AvailableProducts;
    FStringNoInit LastError;
    FStringNoInit LastErrorSolution;
    //## END PROPS MicroTransactionBase

    virtual void Init();
    virtual UBOOL QueryForAvailablePurchases();
    virtual UBOOL IsAllowedToMakePurchases();
    virtual UBOOL BeginPurchase(INT Index);
    virtual INT GetProductIndex(const FString& Identifier);
    DECLARE_FUNCTION(execInit)
    {
        P_FINISH;
        this->Init();
    }
    DECLARE_FUNCTION(execQueryForAvailablePurchases)
    {
        P_FINISH;
        *(UBOOL*)Result=this->QueryForAvailablePurchases();
    }
    DECLARE_FUNCTION(execIsAllowedToMakePurchases)
    {
        P_FINISH;
        *(UBOOL*)Result=this->IsAllowedToMakePurchases();
    }
    DECLARE_FUNCTION(execBeginPurchase)
    {
        P_GET_INT(Index);
        P_FINISH;
        *(UBOOL*)Result=this->BeginPurchase(Index);
    }
    DECLARE_FUNCTION(execGetProductIndex)
    {
        P_GET_STR(Identifier);
        P_FINISH;
        *(INT*)Result=this->GetProductIndex(Identifier);
    }
    INT eventGetProductIndex(const FString& Identifier)
    {
        MicroTransactionBase_eventGetProductIndex_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.Identifier=Identifier;
        ProcessEvent(FindFunctionChecked(ENGINE_GetProductIndex),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventBeginPurchase(INT Index)
    {
        MicroTransactionBase_eventBeginPurchase_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(ENGINE_BeginPurchase),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventIsAllowedToMakePurchases()
    {
        MicroTransactionBase_eventIsAllowedToMakePurchases_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_IsAllowedToMakePurchases),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventQueryForAvailablePurchases()
    {
        MicroTransactionBase_eventQueryForAvailablePurchases_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_QueryForAvailablePurchases),&Parms);
        return Parms.ReturnValue;
    }
    void eventInit()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Init),NULL);
    }
    DECLARE_CLASS(UMicroTransactionBase,UPlatformInterfaceBase,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMicroTransactionBase)
};

struct TwitterIntegrationBase_eventTwitterRequest_Parms
{
    FString URL;
    TArray<FString> ParamKeysAndValues;
    BYTE RequestMethod;
    INT AccountIndex;
    UBOOL ReturnValue;
    TwitterIntegrationBase_eventTwitterRequest_Parms(EEventParm)
    {
    }
};
struct TwitterIntegrationBase_eventGetAccountId_Parms
{
    INT AccountIndex;
    FString ReturnValue;
    TwitterIntegrationBase_eventGetAccountId_Parms(EEventParm)
    {
    }
};
struct TwitterIntegrationBase_eventGetAccountName_Parms
{
    INT AccountIndex;
    FString ReturnValue;
    TwitterIntegrationBase_eventGetAccountName_Parms(EEventParm)
    {
    }
};
struct TwitterIntegrationBase_eventGetNumAccounts_Parms
{
    INT ReturnValue;
    TwitterIntegrationBase_eventGetNumAccounts_Parms(EEventParm)
    {
    }
};
struct TwitterIntegrationBase_eventAuthorizeAccounts_Parms
{
    UBOOL ReturnValue;
    TwitterIntegrationBase_eventAuthorizeAccounts_Parms(EEventParm)
    {
    }
};
struct TwitterIntegrationBase_eventShowTweetUI_Parms
{
    FString InitialMessage;
    FString URL;
    FString Picture;
    UBOOL ReturnValue;
    TwitterIntegrationBase_eventShowTweetUI_Parms(EEventParm)
    {
    }
};
struct TwitterIntegrationBase_eventCanShowTweetUI_Parms
{
    UBOOL ReturnValue;
    TwitterIntegrationBase_eventCanShowTweetUI_Parms(EEventParm)
    {
    }
};
struct TwitterIntegrationBase_eventInit_Parms
{
    TwitterIntegrationBase_eventInit_Parms(EEventParm)
    {
    }
};
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:
    //## BEGIN PROPS TwitterIntegrationBase
    //## END PROPS TwitterIntegrationBase

    virtual void Init();
    virtual UBOOL CanShowTweetUI();
    virtual UBOOL ShowTweetUI(const FString& InitialMessage=TEXT(""),const FString& URL=TEXT(""),const FString& Picture=TEXT(""));
    virtual UBOOL AuthorizeAccounts();
    virtual INT GetNumAccounts();
    virtual FString GetAccountName(INT AccountIndex);
    virtual FString GetAccountId(INT AccountIndex);
    virtual UBOOL TwitterRequest(const FString& URL,const TArray<FString>& ParamKeysAndValues,BYTE RequestMethod,INT AccountIndex);
    DECLARE_FUNCTION(execInit)
    {
        P_FINISH;
        this->Init();
    }
    DECLARE_FUNCTION(execCanShowTweetUI)
    {
        P_FINISH;
        *(UBOOL*)Result=this->CanShowTweetUI();
    }
    DECLARE_FUNCTION(execShowTweetUI)
    {
        P_GET_STR_OPTX(InitialMessage,TEXT(""));
        P_GET_STR_OPTX(URL,TEXT(""));
        P_GET_STR_OPTX(Picture,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->ShowTweetUI(InitialMessage,URL,Picture);
    }
    DECLARE_FUNCTION(execAuthorizeAccounts)
    {
        P_FINISH;
        *(UBOOL*)Result=this->AuthorizeAccounts();
    }
    DECLARE_FUNCTION(execGetNumAccounts)
    {
        P_FINISH;
        *(INT*)Result=this->GetNumAccounts();
    }
    DECLARE_FUNCTION(execGetAccountName)
    {
        P_GET_INT(AccountIndex);
        P_FINISH;
        *(FString*)Result=this->GetAccountName(AccountIndex);
    }
    DECLARE_FUNCTION(execGetAccountId)
    {
        P_GET_INT(AccountIndex);
        P_FINISH;
        *(FString*)Result=this->GetAccountId(AccountIndex);
    }
    DECLARE_FUNCTION(execTwitterRequest)
    {
        P_GET_STR(URL);
        P_GET_TARRAY(FString,ParamKeysAndValues);
        P_GET_BYTE(RequestMethod);
        P_GET_INT(AccountIndex);
        P_FINISH;
        *(UBOOL*)Result=this->TwitterRequest(URL,ParamKeysAndValues,RequestMethod,AccountIndex);
    }
    UBOOL eventTwitterRequest(const FString& URL,const TArray<FString>& ParamKeysAndValues,BYTE RequestMethod,INT AccountIndex)
    {
        TwitterIntegrationBase_eventTwitterRequest_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.URL=URL;
        Parms.ParamKeysAndValues=ParamKeysAndValues;
        Parms.RequestMethod=RequestMethod;
        Parms.AccountIndex=AccountIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_TwitterRequest),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetAccountId(INT AccountIndex)
    {
        TwitterIntegrationBase_eventGetAccountId_Parms Parms(EC_EventParm);
        Parms.AccountIndex=AccountIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_GetAccountId),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetAccountName(INT AccountIndex)
    {
        TwitterIntegrationBase_eventGetAccountName_Parms Parms(EC_EventParm);
        Parms.AccountIndex=AccountIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_GetAccountName),&Parms);
        return Parms.ReturnValue;
    }
    INT eventGetNumAccounts()
    {
        TwitterIntegrationBase_eventGetNumAccounts_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetNumAccounts),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventAuthorizeAccounts()
    {
        TwitterIntegrationBase_eventAuthorizeAccounts_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_AuthorizeAccounts),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventShowTweetUI(const FString& InitialMessage=TEXT(""),const FString& URL=TEXT(""),const FString& Picture=TEXT(""))
    {
        TwitterIntegrationBase_eventShowTweetUI_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.InitialMessage=InitialMessage;
        Parms.URL=URL;
        Parms.Picture=Picture;
        ProcessEvent(FindFunctionChecked(ENGINE_ShowTweetUI),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventCanShowTweetUI()
    {
        TwitterIntegrationBase_eventCanShowTweetUI_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_CanShowTweetUI),&Parms);
        return Parms.ReturnValue;
    }
    void eventInit()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Init),NULL);
    }
    DECLARE_CLASS(UTwitterIntegrationBase,UPlatformInterfaceBase,0|CLASS_Transient,Engine)
    static const TCHAR* StaticConfigName() {return TEXT("Engine");}

    NO_DEFAULT_CONSTRUCTOR(UTwitterIntegrationBase)
};

class UPlatformInterfaceWebResponse : public UObject
{
public:
    //## BEGIN PROPS PlatformInterfaceWebResponse
    FStringNoInit OriginalURL;
    INT ResponseCode;
    INT Tag;
    TMap<FString, FString> Headers;
    FStringNoInit StringResponse;
    TArrayNoInit<BYTE> BinaryResponse;
    //## END PROPS PlatformInterfaceWebResponse

    virtual INT GetNumHeaders();
    virtual void GetHeader(INT HeaderIndex,FString& Header,FString& Value);
    virtual FString GetHeaderValue(const FString& HeaderName);
    DECLARE_FUNCTION(execGetNumHeaders)
    {
        P_FINISH;
        *(INT*)Result=this->GetNumHeaders();
    }
    DECLARE_FUNCTION(execGetHeader)
    {
        P_GET_INT(HeaderIndex);
        P_GET_STR_REF(Header);
        P_GET_STR_REF(Value);
        P_FINISH;
        this->GetHeader(HeaderIndex,Header,Value);
    }
    DECLARE_FUNCTION(execGetHeaderValue)
    {
        P_GET_STR(HeaderName);
        P_FINISH;
        *(FString*)Result=this->GetHeaderValue(HeaderName);
    }
    DECLARE_CLASS(UPlatformInterfaceWebResponse,UObject,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPlatformInterfaceWebResponse)
};

#undef DECLARE_CLASS
#undef DECLARE_CASTED_CLASS
#undef DECLARE_ABSTRACT_CLASS
#undef DECLARE_ABSTRACT_CASTED_CLASS
#endif // !INCLUDED_ENGINE_PLATFORMINTERFACE_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UPlatformInterfaceBase,-1,execGetInAppMessageInterface);
AUTOGENERATE_FUNCTION(UPlatformInterfaceBase,-1,execGetAppNotificationsInterface);
AUTOGENERATE_FUNCTION(UPlatformInterfaceBase,-1,execGetTwitterIntegration);
AUTOGENERATE_FUNCTION(UPlatformInterfaceBase,-1,execGetAnalyticEventsInterface);
AUTOGENERATE_FUNCTION(UPlatformInterfaceBase,-1,execGetMicroTransactionInterface);
AUTOGENERATE_FUNCTION(UPlatformInterfaceBase,-1,execGetInGameAdManager);
AUTOGENERATE_FUNCTION(UPlatformInterfaceBase,-1,execGetFacebookIntegration);
AUTOGENERATE_FUNCTION(UPlatformInterfaceBase,-1,execGetLocalStorageInterface);
AUTOGENERATE_FUNCTION(UPlatformInterfaceBase,-1,execGetCloudStorageInterface);
AUTOGENERATE_FUNCTION(UPlatformInterfaceBase,-1,execCallDelegates);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execSendCachedEvents);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execLogCurrencyGivenEvent);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execLogCurrencyPurchaseEvent);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execLogItemPurchaseEvent);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execLogUserAttributeUpdateArray);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execLogUserAttributeUpdate);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execLogErrorMessage);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execEndStringEventParamArray);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execLogStringEventParamArray);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execEndStringEventParam);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execLogStringEventParam);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execEndStringEvent);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execLogStringEvent);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execEndSession);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execStartSession);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execSetUserId);
AUTOGENERATE_FUNCTION(UAnalyticEventsBase,-1,execInit);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execSendCachedEvents);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execLogCurrencyGivenEvent);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execLogCurrencyPurchaseEvent);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execLogItemPurchaseEvent);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execLogUserAttributeUpdateArray);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execLogUserAttributeUpdate);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execLogErrorMessage);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execEndStringEventParamArray);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execLogStringEventParamArray);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execEndStringEventParam);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execLogStringEventParam);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execEndStringEvent);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execLogStringEvent);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execEndSession);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execStartSession);
AUTOGENERATE_FUNCTION(UMultiProviderAnalytics,-1,execSetUserId);
AUTOGENERATE_FUNCTION(UAppNotificationsBase,-1,execCancelAllScheduledLocalNotifications);
AUTOGENERATE_FUNCTION(UAppNotificationsBase,-1,execScheduleLocalNotification);
AUTOGENERATE_FUNCTION(UAppNotificationsBase,-1,execInit);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execUpgradeLocalStorageToCloud);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execResolveConflictWithVersionIndex);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execResolveConflictWithNewestDocument);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execWaitForWritesToFinish);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execIsStillWritingFiles);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execSaveDocumentWithObject);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execSaveDocumentWithBytes);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execSaveDocumentWithString);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execWriteCloudDocument);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execParseDocumentAsObject);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execParseDocumentAsBytes);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execParseDocumentAsString);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execReadCloudDocument);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execDeleteAllCloudDocuments);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execCreateCloudDocument);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execGetCloudDocumentName);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execGetNumCloudDocuments);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execQueryForCloudDocuments);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execWriteKeyValue);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execReadKeyValueFromLocalStore);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execReadKeyValue);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execIsUsingLocalStorage);
AUTOGENERATE_FUNCTION(UCloudStorageBase,-1,execInit);
AUTOGENERATE_FUNCTION(UFacebookIntegration,-1,execDisconnect);
AUTOGENERATE_FUNCTION(UFacebookIntegration,-1,execFacebookDialog);
AUTOGENERATE_FUNCTION(UFacebookIntegration,-1,execFacebookRequest);
AUTOGENERATE_FUNCTION(UFacebookIntegration,-1,execIsAuthorized);
AUTOGENERATE_FUNCTION(UFacebookIntegration,-1,execAuthorize);
AUTOGENERATE_FUNCTION(UFacebookIntegration,-1,execInit);
AUTOGENERATE_FUNCTION(UInAppMessageBase,-1,execShowInAppEmailUI);
AUTOGENERATE_FUNCTION(UInAppMessageBase,-1,execShowInAppSMSUI);
AUTOGENERATE_FUNCTION(UInAppMessageBase,-1,execInit);
AUTOGENERATE_FUNCTION(UInGameAdManager,-1,execForceCloseAd);
AUTOGENERATE_FUNCTION(UInGameAdManager,-1,execHideBanner);
AUTOGENERATE_FUNCTION(UInGameAdManager,-1,execShowBanner);
AUTOGENERATE_FUNCTION(UInGameAdManager,-1,execInit);
AUTOGENERATE_FUNCTION(UMicroTransactionBase,-1,execGetProductIndex);
AUTOGENERATE_FUNCTION(UMicroTransactionBase,-1,execBeginPurchase);
AUTOGENERATE_FUNCTION(UMicroTransactionBase,-1,execIsAllowedToMakePurchases);
AUTOGENERATE_FUNCTION(UMicroTransactionBase,-1,execQueryForAvailablePurchases);
AUTOGENERATE_FUNCTION(UMicroTransactionBase,-1,execInit);
AUTOGENERATE_FUNCTION(UTwitterIntegrationBase,-1,execTwitterRequest);
AUTOGENERATE_FUNCTION(UTwitterIntegrationBase,-1,execGetAccountId);
AUTOGENERATE_FUNCTION(UTwitterIntegrationBase,-1,execGetAccountName);
AUTOGENERATE_FUNCTION(UTwitterIntegrationBase,-1,execGetNumAccounts);
AUTOGENERATE_FUNCTION(UTwitterIntegrationBase,-1,execAuthorizeAccounts);
AUTOGENERATE_FUNCTION(UTwitterIntegrationBase,-1,execShowTweetUI);
AUTOGENERATE_FUNCTION(UTwitterIntegrationBase,-1,execCanShowTweetUI);
AUTOGENERATE_FUNCTION(UTwitterIntegrationBase,-1,execInit);
AUTOGENERATE_FUNCTION(UPlatformInterfaceWebResponse,-1,execGetHeaderValue);
AUTOGENERATE_FUNCTION(UPlatformInterfaceWebResponse,-1,execGetHeader);
AUTOGENERATE_FUNCTION(UPlatformInterfaceWebResponse,-1,execGetNumHeaders);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef ENGINE_PLATFORMINTERFACE_NATIVE_DEFS
#define ENGINE_PLATFORMINTERFACE_NATIVE_DEFS

#define AUTO_INITIALIZE_REGISTRANTS_ENGINE_PLATFORMINTERFACE \
	UCloudStorageUpgradeHelper::StaticClass(); \
	UPlatformInterfaceBase::StaticClass(); \
	GNativeLookupFuncs.Set(FName("PlatformInterfaceBase"), GEngineUPlatformInterfaceBaseNatives); \
	UAnalyticEventsBase::StaticClass(); \
	GNativeLookupFuncs.Set(FName("AnalyticEventsBase"), GEngineUAnalyticEventsBaseNatives); \
	UMultiProviderAnalytics::StaticClass(); \
	GNativeLookupFuncs.Set(FName("MultiProviderAnalytics"), GEngineUMultiProviderAnalyticsNatives); \
	UAppNotificationsBase::StaticClass(); \
	GNativeLookupFuncs.Set(FName("AppNotificationsBase"), GEngineUAppNotificationsBaseNatives); \
	UCloudStorageBase::StaticClass(); \
	GNativeLookupFuncs.Set(FName("CloudStorageBase"), GEngineUCloudStorageBaseNatives); \
	UFacebookIntegration::StaticClass(); \
	GNativeLookupFuncs.Set(FName("FacebookIntegration"), GEngineUFacebookIntegrationNatives); \
	UInAppMessageBase::StaticClass(); \
	GNativeLookupFuncs.Set(FName("InAppMessageBase"), GEngineUInAppMessageBaseNatives); \
	UInGameAdManager::StaticClass(); \
	GNativeLookupFuncs.Set(FName("InGameAdManager"), GEngineUInGameAdManagerNatives); \
	UMicroTransactionBase::StaticClass(); \
	GNativeLookupFuncs.Set(FName("MicroTransactionBase"), GEngineUMicroTransactionBaseNatives); \
	UTwitterIntegrationBase::StaticClass(); \
	GNativeLookupFuncs.Set(FName("TwitterIntegrationBase"), GEngineUTwitterIntegrationBaseNatives); \
	UPlatformInterfaceWebResponse::StaticClass(); \
	GNativeLookupFuncs.Set(FName("PlatformInterfaceWebResponse"), GEngineUPlatformInterfaceWebResponseNatives); \

#endif // ENGINE_PLATFORMINTERFACE_NATIVE_DEFS

#ifdef NATIVES_ONLY
FNativeFunctionLookup GEngineUPlatformInterfaceBaseNatives[] = 
{ 
	MAP_NATIVE(UPlatformInterfaceBase, execGetInAppMessageInterface)
	MAP_NATIVE(UPlatformInterfaceBase, execGetAppNotificationsInterface)
	MAP_NATIVE(UPlatformInterfaceBase, execGetTwitterIntegration)
	MAP_NATIVE(UPlatformInterfaceBase, execGetAnalyticEventsInterface)
	MAP_NATIVE(UPlatformInterfaceBase, execGetMicroTransactionInterface)
	MAP_NATIVE(UPlatformInterfaceBase, execGetInGameAdManager)
	MAP_NATIVE(UPlatformInterfaceBase, execGetFacebookIntegration)
	MAP_NATIVE(UPlatformInterfaceBase, execGetLocalStorageInterface)
	MAP_NATIVE(UPlatformInterfaceBase, execGetCloudStorageInterface)
	MAP_NATIVE(UPlatformInterfaceBase, execCallDelegates)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUAnalyticEventsBaseNatives[] = 
{ 
	MAP_NATIVE(UAnalyticEventsBase, execSendCachedEvents)
	MAP_NATIVE(UAnalyticEventsBase, execLogCurrencyGivenEvent)
	MAP_NATIVE(UAnalyticEventsBase, execLogCurrencyPurchaseEvent)
	MAP_NATIVE(UAnalyticEventsBase, execLogItemPurchaseEvent)
	MAP_NATIVE(UAnalyticEventsBase, execLogUserAttributeUpdateArray)
	MAP_NATIVE(UAnalyticEventsBase, execLogUserAttributeUpdate)
	MAP_NATIVE(UAnalyticEventsBase, execLogErrorMessage)
	MAP_NATIVE(UAnalyticEventsBase, execEndStringEventParamArray)
	MAP_NATIVE(UAnalyticEventsBase, execLogStringEventParamArray)
	MAP_NATIVE(UAnalyticEventsBase, execEndStringEventParam)
	MAP_NATIVE(UAnalyticEventsBase, execLogStringEventParam)
	MAP_NATIVE(UAnalyticEventsBase, execEndStringEvent)
	MAP_NATIVE(UAnalyticEventsBase, execLogStringEvent)
	MAP_NATIVE(UAnalyticEventsBase, execEndSession)
	MAP_NATIVE(UAnalyticEventsBase, execStartSession)
	MAP_NATIVE(UAnalyticEventsBase, execSetUserId)
	MAP_NATIVE(UAnalyticEventsBase, execInit)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUMultiProviderAnalyticsNatives[] = 
{ 
	MAP_NATIVE(UMultiProviderAnalytics, execSendCachedEvents)
	MAP_NATIVE(UMultiProviderAnalytics, execLogCurrencyGivenEvent)
	MAP_NATIVE(UMultiProviderAnalytics, execLogCurrencyPurchaseEvent)
	MAP_NATIVE(UMultiProviderAnalytics, execLogItemPurchaseEvent)
	MAP_NATIVE(UMultiProviderAnalytics, execLogUserAttributeUpdateArray)
	MAP_NATIVE(UMultiProviderAnalytics, execLogUserAttributeUpdate)
	MAP_NATIVE(UMultiProviderAnalytics, execLogErrorMessage)
	MAP_NATIVE(UMultiProviderAnalytics, execEndStringEventParamArray)
	MAP_NATIVE(UMultiProviderAnalytics, execLogStringEventParamArray)
	MAP_NATIVE(UMultiProviderAnalytics, execEndStringEventParam)
	MAP_NATIVE(UMultiProviderAnalytics, execLogStringEventParam)
	MAP_NATIVE(UMultiProviderAnalytics, execEndStringEvent)
	MAP_NATIVE(UMultiProviderAnalytics, execLogStringEvent)
	MAP_NATIVE(UMultiProviderAnalytics, execEndSession)
	MAP_NATIVE(UMultiProviderAnalytics, execStartSession)
	MAP_NATIVE(UMultiProviderAnalytics, execSetUserId)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUAppNotificationsBaseNatives[] = 
{ 
	MAP_NATIVE(UAppNotificationsBase, execCancelAllScheduledLocalNotifications)
	MAP_NATIVE(UAppNotificationsBase, execScheduleLocalNotification)
	MAP_NATIVE(UAppNotificationsBase, execInit)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUCloudStorageBaseNatives[] = 
{ 
	MAP_NATIVE(UCloudStorageBase, execUpgradeLocalStorageToCloud)
	MAP_NATIVE(UCloudStorageBase, execResolveConflictWithVersionIndex)
	MAP_NATIVE(UCloudStorageBase, execResolveConflictWithNewestDocument)
	MAP_NATIVE(UCloudStorageBase, execWaitForWritesToFinish)
	MAP_NATIVE(UCloudStorageBase, execIsStillWritingFiles)
	MAP_NATIVE(UCloudStorageBase, execSaveDocumentWithObject)
	MAP_NATIVE(UCloudStorageBase, execSaveDocumentWithBytes)
	MAP_NATIVE(UCloudStorageBase, execSaveDocumentWithString)
	MAP_NATIVE(UCloudStorageBase, execWriteCloudDocument)
	MAP_NATIVE(UCloudStorageBase, execParseDocumentAsObject)
	MAP_NATIVE(UCloudStorageBase, execParseDocumentAsBytes)
	MAP_NATIVE(UCloudStorageBase, execParseDocumentAsString)
	MAP_NATIVE(UCloudStorageBase, execReadCloudDocument)
	MAP_NATIVE(UCloudStorageBase, execDeleteAllCloudDocuments)
	MAP_NATIVE(UCloudStorageBase, execCreateCloudDocument)
	MAP_NATIVE(UCloudStorageBase, execGetCloudDocumentName)
	MAP_NATIVE(UCloudStorageBase, execGetNumCloudDocuments)
	MAP_NATIVE(UCloudStorageBase, execQueryForCloudDocuments)
	MAP_NATIVE(UCloudStorageBase, execWriteKeyValue)
	MAP_NATIVE(UCloudStorageBase, execReadKeyValueFromLocalStore)
	MAP_NATIVE(UCloudStorageBase, execReadKeyValue)
	MAP_NATIVE(UCloudStorageBase, execIsUsingLocalStorage)
	MAP_NATIVE(UCloudStorageBase, execInit)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUFacebookIntegrationNatives[] = 
{ 
	MAP_NATIVE(UFacebookIntegration, execDisconnect)
	MAP_NATIVE(UFacebookIntegration, execFacebookDialog)
	MAP_NATIVE(UFacebookIntegration, execFacebookRequest)
	MAP_NATIVE(UFacebookIntegration, execIsAuthorized)
	MAP_NATIVE(UFacebookIntegration, execAuthorize)
	MAP_NATIVE(UFacebookIntegration, execInit)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUInAppMessageBaseNatives[] = 
{ 
	MAP_NATIVE(UInAppMessageBase, execShowInAppEmailUI)
	MAP_NATIVE(UInAppMessageBase, execShowInAppSMSUI)
	MAP_NATIVE(UInAppMessageBase, execInit)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUInGameAdManagerNatives[] = 
{ 
	MAP_NATIVE(UInGameAdManager, execForceCloseAd)
	MAP_NATIVE(UInGameAdManager, execHideBanner)
	MAP_NATIVE(UInGameAdManager, execShowBanner)
	MAP_NATIVE(UInGameAdManager, execInit)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUMicroTransactionBaseNatives[] = 
{ 
	MAP_NATIVE(UMicroTransactionBase, execGetProductIndex)
	MAP_NATIVE(UMicroTransactionBase, execBeginPurchase)
	MAP_NATIVE(UMicroTransactionBase, execIsAllowedToMakePurchases)
	MAP_NATIVE(UMicroTransactionBase, execQueryForAvailablePurchases)
	MAP_NATIVE(UMicroTransactionBase, execInit)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUTwitterIntegrationBaseNatives[] = 
{ 
	MAP_NATIVE(UTwitterIntegrationBase, execTwitterRequest)
	MAP_NATIVE(UTwitterIntegrationBase, execGetAccountId)
	MAP_NATIVE(UTwitterIntegrationBase, execGetAccountName)
	MAP_NATIVE(UTwitterIntegrationBase, execGetNumAccounts)
	MAP_NATIVE(UTwitterIntegrationBase, execAuthorizeAccounts)
	MAP_NATIVE(UTwitterIntegrationBase, execShowTweetUI)
	MAP_NATIVE(UTwitterIntegrationBase, execCanShowTweetUI)
	MAP_NATIVE(UTwitterIntegrationBase, execInit)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUPlatformInterfaceWebResponseNatives[] = 
{ 
	MAP_NATIVE(UPlatformInterfaceWebResponse, execGetHeaderValue)
	MAP_NATIVE(UPlatformInterfaceWebResponse, execGetHeader)
	MAP_NATIVE(UPlatformInterfaceWebResponse, execGetNumHeaders)
	{NULL, NULL}
};

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE_NODIE(UCloudStorageUpgradeHelper)
VERIFY_CLASS_OFFSET_NODIE(UPlatformInterfaceBase,PlatformInterfaceBase,AllDelegates)
VERIFY_CLASS_OFFSET_NODIE(UPlatformInterfaceBase,PlatformInterfaceBase,__PlatformInterfaceDelegate__Delegate)
VERIFY_CLASS_SIZE_NODIE(UPlatformInterfaceBase)
VERIFY_CLASS_OFFSET_NODIE(UAnalyticEventsBase,AnalyticEventsBase,SessionPauseThresholdSec)
VERIFY_CLASS_OFFSET_NODIE(UAnalyticEventsBase,AnalyticEventsBase,UserId)
VERIFY_CLASS_SIZE_NODIE(UAnalyticEventsBase)
VERIFY_CLASS_OFFSET_NODIE(UMultiProviderAnalytics,MultiProviderAnalytics,AnalyticsProviderClassNames)
VERIFY_CLASS_OFFSET_NODIE(UMultiProviderAnalytics,MultiProviderAnalytics,AnalyticsProviders)
VERIFY_CLASS_SIZE_NODIE(UMultiProviderAnalytics)
VERIFY_CLASS_OFFSET_NODIE(UAppNotificationsBase,AppNotificationsBase,AppLaunchNotification)
VERIFY_CLASS_OFFSET_NODIE(UAppNotificationsBase,AppNotificationsBase,__OnReceivedRemoteNotification__Delegate)
VERIFY_CLASS_SIZE_NODIE(UAppNotificationsBase)
VERIFY_CLASS_OFFSET_NODIE(UCloudStorageBase,CloudStorageBase,LocalCloudFiles)
VERIFY_CLASS_SIZE_NODIE(UCloudStorageBase)
VERIFY_CLASS_OFFSET_NODIE(UFacebookIntegration,FacebookIntegration,AppID)
VERIFY_CLASS_OFFSET_NODIE(UFacebookIntegration,FacebookIntegration,FriendsList)
VERIFY_CLASS_SIZE_NODIE(UFacebookIntegration)
VERIFY_CLASS_SIZE_NODIE(UInAppMessageBase)
VERIFY_CLASS_SIZE_NODIE(UInGameAdManager)
VERIFY_CLASS_OFFSET_NODIE(UMicroTransactionBase,MicroTransactionBase,AvailableProducts)
VERIFY_CLASS_OFFSET_NODIE(UMicroTransactionBase,MicroTransactionBase,LastErrorSolution)
VERIFY_CLASS_SIZE_NODIE(UMicroTransactionBase)
VERIFY_CLASS_SIZE_NODIE(UTwitterIntegrationBase)
VERIFY_CLASS_OFFSET_NODIE(UPlatformInterfaceWebResponse,PlatformInterfaceWebResponse,OriginalURL)
VERIFY_CLASS_OFFSET_NODIE(UPlatformInterfaceWebResponse,PlatformInterfaceWebResponse,BinaryResponse)
VERIFY_CLASS_SIZE_NODIE(UPlatformInterfaceWebResponse)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
