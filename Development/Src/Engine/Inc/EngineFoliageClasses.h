/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#include "EngineNames.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_ENGINE_FOLIAGE_ENUMS
#define INCLUDED_ENGINE_FOLIAGE_ENUMS 1

enum FoliageCullOption
{
    FOLIAGECULL_Cull        =0,
    FOLIAGECULL_ScaleZ      =1,
    FOLIAGECULL_ScaleXYZ    =2,
    FOLIAGECULL_TranslateZ  =3,
    FOLIAGECULL_MAX         =4,
};
#define FOREACH_ENUM_FOLIAGECULLOPTION(op) \
    op(FOLIAGECULL_Cull) \
    op(FOLIAGECULL_ScaleZ) \
    op(FOLIAGECULL_ScaleXYZ) \
    op(FOLIAGECULL_TranslateZ) 

#endif // !INCLUDED_ENGINE_FOLIAGE_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_ENGINE_FOLIAGE_CLASSES
#define INCLUDED_ENGINE_FOLIAGE_CLASSES 1
#define ENABLE_DECLARECLASS_MACRO 1
#include "UnObjBas.h"
#undef ENABLE_DECLARECLASS_MACRO

class AInstancedFoliageActor : public AActor
{
public:
    //## BEGIN PROPS InstancedFoliageActor
    TMap<class UStaticMesh*, struct FFoliageMeshInfo> FoliageMeshes;
    class UStaticMesh* SelectedMesh;
    TArrayNoInit<class UInstancedStaticMeshComponent*> InstancedStaticMeshComponents;
    //## END PROPS InstancedFoliageActor

    DECLARE_CLASS(AInstancedFoliageActor,AActor,0,Engine)
	// UObject interface
	virtual void Serialize(FArchive& Ar);
	virtual void PostLoad();

	// AActor interface
	virtual void UpdateComponentsInternal(UBOOL bCollisionUpdate = FALSE);
	virtual void ClearComponents();

	// AInstancedFoliageActor interface
#if WITH_EDITOR
	// Called from editor code to manage instances for components
	void SnapInstancesForLandscape( class ULandscapeHeightfieldCollisionComponent* InComponent, const FBox& InInstanceBox );
	void MoveInstancesForComponentToCurrentLevel( class UActorComponent* InComponent );
	void MoveInstancesForMovedComponent( class UActorComponent* InComponent );
	TMap<class UStaticMesh*,TArray<const struct FFoliageInstancePlacementInfo*> > GetInstancesForComponent( class UActorComponent* InComponent );
	void DeleteInstancesForComponent( class UActorComponent* InComponent );

	// Addition, removal and selection
	struct FFoliageMeshInfo* AddMesh( class UStaticMesh* InMesh );
	void RemoveMesh( class UStaticMesh* InMesh );
	void SelectInstance( class UInstancedStaticMeshComponent* InComponent, INT InComponentInstanceIndex, UBOOL bToggle );
	void ApplySelectionToComponents( UBOOL bApply );
	void CheckSelection();
	FVector GetSelectionLocation();

	// Get the instanced foliage actor for the current streaming level.
	static AInstancedFoliageActor* GetInstancedFoliageActor(UBOOL bCreateIfNone=TRUE);
	// Get the instanced foliage actor for the specified streaming level. Never creates a new IFA.
	static AInstancedFoliageActor* GetInstancedFoliageActorForLevel(ULevel* Level);
#endif
};

class AInteractiveFoliageActor : public AStaticMeshActor
{
public:
    //## BEGIN PROPS InteractiveFoliageActor
private:
    class UCylinderComponent* CylinderComponent;
    FVector TouchingActorEntryPosition;
    FVector FoliageVelocity;
    FVector FoliageForce;
    FVector FoliagePosition;
public:
    FLOAT FoliageDamageImpulseScale;
    FLOAT FoliageTouchImpulseScale;
    FLOAT FoliageStiffness;
    FLOAT FoliageStiffnessQuadratic;
    FLOAT FoliageDamping;
    FLOAT MaxDamageImpulse;
    FLOAT MaxTouchImpulse;
    FLOAT MaxForce;
    FLOAT Mass;
    //## END PROPS InteractiveFoliageActor

    virtual void TakeDamage(INT Damage,class AController* EventInstigator,FVector HitLocation,FVector Momentum,class UClass* DamageType,struct FTraceHitInfo HitInfo=FTraceHitInfo(EC_EventParm),class AActor* DamageCauser=NULL);
    virtual void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector HitLocation,FVector HitNormal);
    DECLARE_FUNCTION(execTakeDamage)
    {
        P_GET_INT(Damage);
        P_GET_OBJECT(AController,EventInstigator);
        P_GET_STRUCT(FVector,HitLocation);
        P_GET_STRUCT(FVector,Momentum);
        P_GET_OBJECT(UClass,DamageType);
        P_GET_STRUCT_OPTX(struct FTraceHitInfo,HitInfo,FTraceHitInfo(EC_EventParm));
        P_GET_OBJECT_OPTX(AActor,DamageCauser,NULL);
        P_FINISH;
        this->TakeDamage(Damage,EventInstigator,HitLocation,Momentum,DamageType,HitInfo,DamageCauser);
    }
    DECLARE_FUNCTION(execTouch)
    {
        P_GET_OBJECT(AActor,Other);
        P_GET_OBJECT(UPrimitiveComponent,OtherComp);
        P_GET_STRUCT(FVector,HitLocation);
        P_GET_STRUCT(FVector,HitNormal);
        P_FINISH;
        this->Touch(Other,OtherComp,HitLocation,HitNormal);
    }
    DECLARE_CLASS(AInteractiveFoliageActor,AStaticMeshActor,0,Engine)
protected:
	void SetupCollisionCylinder();
public:
	virtual void TickSpecial(FLOAT DeltaSeconds);
	virtual void Spawned();
	virtual void PostLoad();
};

class UInteractiveFoliageComponent : public UStaticMeshComponent
{
public:
    //## BEGIN PROPS InteractiveFoliageComponent
protected:
    class FInteractiveFoliageSceneProxy* FoliageSceneProxy;
public:
    //## END PROPS InteractiveFoliageComponent

    DECLARE_CLASS(UInteractiveFoliageComponent,UStaticMeshComponent,0,Engine)
	virtual FPrimitiveSceneProxy* CreateSceneProxy();
	/**
	* Detach the component from the scene and remove its render proxy
	* @param bWillReattach TRUE if the detachment will be followed by an attachment
	*/
	virtual void Detach( UBOOL bWillReattach = FALSE );

	friend class AInteractiveFoliageActor;
};

class UActorFactoryInteractiveFoliage : public UActorFactoryStaticMesh
{
public:
    //## BEGIN PROPS ActorFactoryInteractiveFoliage
    //## END PROPS ActorFactoryInteractiveFoliage

    DECLARE_CLASS(UActorFactoryInteractiveFoliage,UActorFactoryStaticMesh,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UActorFactoryInteractiveFoliage)
};

class UInstancedFoliageSettings : public UObject
{
public:
    //## BEGIN PROPS InstancedFoliageSettings
    FLOAT Density;
    FLOAT Radius;
    FLOAT ScaleMinX;
    FLOAT ScaleMinY;
    FLOAT ScaleMinZ;
    FLOAT ScaleMaxX;
    FLOAT ScaleMaxY;
    FLOAT ScaleMaxZ;
    BITFIELD LockScaleX:1;
    BITFIELD LockScaleY:1;
    BITFIELD LockScaleZ:1;
    BITFIELD AlignToNormal:1;
    BITFIELD RandomYaw:1;
    BITFIELD UniformScale:1;
    BITFIELD ReapplyDensity:1;
    BITFIELD ReapplyRadius:1;
    BITFIELD ReapplyAlignToNormal:1;
    BITFIELD ReapplyRandomYaw:1;
    BITFIELD ReapplyScaleX:1;
    BITFIELD ReapplyScaleY:1;
    BITFIELD ReapplyScaleZ:1;
    BITFIELD ReapplyRandomPitchAngle:1;
    BITFIELD ReapplyGroundSlope:1;
    BITFIELD ReapplyHeight:1;
    BITFIELD ReapplyLandscapeLayer:1;
    BITFIELD ReapplyZOffset:1;
    BITFIELD CastShadow:1;
    BITFIELD bCastDynamicShadow:1;
    BITFIELD bCastStaticShadow:1;
    BITFIELD bSelfShadowOnly:1;
    BITFIELD bNoModSelfShadow:1;
    BITFIELD bAcceptsDynamicDominantLightShadows:1;
    BITFIELD bCastHiddenShadow:1;
    BITFIELD bCastShadowAsTwoSided:1;
    BITFIELD bAcceptsLights:1;
    BITFIELD bAcceptsDynamicLights:1;
    BITFIELD bUseOnePassLightingOnTranslucency:1;
    BITFIELD bUsePrecomputedShadows:1;
    BITFIELD bCollideActors:1;
    BITFIELD bBlockActors:1;
    BITFIELD bBlockNonZeroExtent:1;
    BITFIELD bBlockZeroExtent:1;
    BITFIELD IsSelected:1;
    BITFIELD ShowNothing:1;
    BITFIELD ShowPaintSettings:1;
    BITFIELD ShowInstanceSettings:1;
    FLOAT AlignMaxAngle;
    FLOAT RandomPitchAngle;
    FLOAT GroundSlope;
    FLOAT HeightMin;
    FLOAT HeightMax;
    FName LandscapeLayer;
    FLOAT ZOffsetMin;
    FLOAT ZOffsetMax;
    INT MaxInstancesPerCluster;
    FLOAT MaxClusterRadius;
    FLOAT ReapplyDensityAmount;
    INT StartCullDistance;
    INT EndCullDistance;
    BYTE CullOption;
    BYTE DetailMode;
    INT DisplayOrder;
    //## END PROPS InstancedFoliageSettings

    DECLARE_CLASS(UInstancedFoliageSettings,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UInstancedFoliageSettings)
};

#undef DECLARE_CLASS
#undef DECLARE_CASTED_CLASS
#undef DECLARE_ABSTRACT_CLASS
#undef DECLARE_ABSTRACT_CASTED_CLASS
#endif // !INCLUDED_ENGINE_FOLIAGE_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(AInteractiveFoliageActor,-1,execTouch);
AUTOGENERATE_FUNCTION(AInteractiveFoliageActor,-1,execTakeDamage);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef ENGINE_FOLIAGE_NATIVE_DEFS
#define ENGINE_FOLIAGE_NATIVE_DEFS

#define AUTO_INITIALIZE_REGISTRANTS_ENGINE_FOLIAGE \
	AInstancedFoliageActor::StaticClass(); \
	AInteractiveFoliageActor::StaticClass(); \
	GNativeLookupFuncs.Set(FName("InteractiveFoliageActor"), GEngineAInteractiveFoliageActorNatives); \
	UInteractiveFoliageComponent::StaticClass(); \
	UActorFactoryInteractiveFoliage::StaticClass(); \
	UInstancedFoliageSettings::StaticClass(); \

#endif // ENGINE_FOLIAGE_NATIVE_DEFS

#ifdef NATIVES_ONLY
FNativeFunctionLookup GEngineAInteractiveFoliageActorNatives[] = 
{ 
	MAP_NATIVE(AInteractiveFoliageActor, execTouch)
	MAP_NATIVE(AInteractiveFoliageActor, execTakeDamage)
	{NULL, NULL}
};

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(AInstancedFoliageActor,InstancedFoliageActor,FoliageMeshes)
VERIFY_CLASS_OFFSET_NODIE(AInstancedFoliageActor,InstancedFoliageActor,InstancedStaticMeshComponents)
VERIFY_CLASS_SIZE_NODIE(AInstancedFoliageActor)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveFoliageActor,InteractiveFoliageActor,CylinderComponent)
VERIFY_CLASS_OFFSET_NODIE(AInteractiveFoliageActor,InteractiveFoliageActor,Mass)
VERIFY_CLASS_SIZE_NODIE(AInteractiveFoliageActor)
VERIFY_CLASS_OFFSET_NODIE(UInteractiveFoliageComponent,InteractiveFoliageComponent,FoliageSceneProxy)
VERIFY_CLASS_SIZE_NODIE(UInteractiveFoliageComponent)
VERIFY_CLASS_SIZE_NODIE(UActorFactoryInteractiveFoliage)
VERIFY_CLASS_OFFSET_NODIE(UInstancedFoliageSettings,InstancedFoliageSettings,Density)
VERIFY_CLASS_OFFSET_NODIE(UInstancedFoliageSettings,InstancedFoliageSettings,DisplayOrder)
VERIFY_CLASS_SIZE_NODIE(UInstancedFoliageSettings)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
