/*=============================================================================
	MeshMaterialShader.h: Mesh material shader definitions.
	Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

/**
 * A shader meta type for material-linked shaders which use a vertex factory.
 */
class FMeshMaterialShaderType : public FShaderType
{
public:

	/**
	* Finds a FMeshMaterialShaderType by name.
	*/
	static FMeshMaterialShaderType* GetTypeByName(const FString& TypeName);

	struct CompiledShaderInitializerType : FMaterialShaderType::CompiledShaderInitializerType
	{
		FVertexFactoryType* VertexFactoryType;
		CompiledShaderInitializerType(
			FShaderType* InType,
			const FShaderCompilerOutput& CompilerOutput,
			FVertexFactoryType* InVertexFactoryType
			):
			FMaterialShaderType::CompiledShaderInitializerType(InType,CompilerOutput),
			VertexFactoryType(InVertexFactoryType)
		{}
	};
	typedef FShader* (*ConstructCompiledType)(const CompiledShaderInitializerType&);
	typedef UBOOL (*ShouldCacheType)(EShaderPlatform,const FMaterial*,const FVertexFactoryType* VertexFactoryType);

	FMeshMaterialShaderType(
		const TCHAR* InName,
		const TCHAR* InSourceFilename,
		const TCHAR* InFunctionName,
		DWORD InFrequency,
		INT InMinPackageVersion,
		INT InMinLicenseePackageVersion,
		ConstructSerializedType InConstructSerializedRef,
		ConstructCompiledType InConstructCompiledRef,
		ModifyCompilationEnvironmentType InModifyCompilationEnvironmentRef,
		ShouldCacheType InShouldCacheRef
		):
		FShaderType(InName,InSourceFilename,InFunctionName,InFrequency,InMinPackageVersion,InMinLicenseePackageVersion,InConstructSerializedRef,InModifyCompilationEnvironmentRef),
		ConstructCompiledRef(InConstructCompiledRef),
		ShouldCacheRef(InShouldCacheRef)
	{}

	/**
	 * Enqueues a compilation for a new shader of this type.
	 * @param Platform - The platform to compile for.
	 * @param Material - The material to link the shader with.
	 * @param MaterialShaderCode - The shader code for the material.
	 * @param VertexFactoryType - The vertex factory to compile with.
	 */
	void BeginCompileShader(
		UINT ShaderMapId,
		EShaderPlatform Platform,
		const FMaterial* Material,
		const ANSICHAR* MaterialShaderCode,
		FVertexFactoryType* VertexFactoryType
		);

	/**
	 * Either creates a new instance of this type or returns an equivalent existing shader.
	 * @param Material - The material to link the shader with.
	 * @param CurrentJob - Compile job that was enqueued by BeginCompileShader.
	 */
	FShader* FinishCompileShader(
		const FUniformExpressionSet& UniformExpressionSet,
		const FShaderCompileJob& CurrentJob
		);

	/**
	 * Checks if the shader type should be cached for a particular platform, material, and vertex factory type.
	 * @param Platform - The platform to check.
	 * @param Material - The material to check.
	 * @param VertexFactoryType - The vertex factory type to check.
	 * @return True if this shader type should be cached.
	 */
	UBOOL ShouldCache(EShaderPlatform Platform,const FMaterial* Material,const FVertexFactoryType* VertexFactoryType) const
	{
		return (*ShouldCacheRef)(Platform,Material,VertexFactoryType);
	}

	// Dynamic casting.
	virtual FMeshMaterialShaderType* GetMeshMaterialShaderType() { return this; }

private:
	ConstructCompiledType ConstructCompiledRef;
	ShouldCacheType ShouldCacheRef;
};

/** 
 * Base class of all material vertex shaders that need vertex factory parameters.
 * Serves mainly to allow outside access to FVertexFactoryParameterRef.
 */
class FMeshMaterialVertexShader : public FShader
{
public:
	FMeshMaterialVertexShader() {}

	FMeshMaterialVertexShader(const FMeshMaterialShaderType::CompiledShaderInitializerType& Initializer):
		FShader(Initializer),
		VertexFactoryParameters(Initializer.VertexFactoryType,Initializer.ParameterMap)
	{}

	virtual const FVertexFactoryParameterRef* GetVertexFactoryParameterRef() const { return &VertexFactoryParameters; }

protected:
	FVertexFactoryVSParameterRef VertexFactoryParameters;
};

/** 
 * Base class of all material pixel shaders that need vertex factory parameters.
 * Serves mainly to allow outside access to FVertexFactoryParameterRef.
 */
class FMeshMaterialPixelShader : public FShader
{
public:
	FMeshMaterialPixelShader() {}

	FMeshMaterialPixelShader(const FMeshMaterialShaderType::CompiledShaderInitializerType& Initializer):
		FShader(Initializer),
		VertexFactoryParameters(Initializer.VertexFactoryType,Initializer.ParameterMap)
	{}

	virtual const FVertexFactoryParameterRef* GetVertexFactoryParameterRef() const { return &VertexFactoryParameters; }

protected:
	FVertexFactoryPSParameterRef VertexFactoryParameters;
};


/**
 * The shaders which the render the material on a mesh generated by a particular vertex factory type.
 */
class FMeshMaterialShaderMap : public TShaderMap<FMeshMaterialShaderType>
{
public:

	/**
	 * Enqueues compilation for all shaders for a material and vertex factory type.
	 * @param Material - The material to compile shaders for.
	 * @param MaterialShaderCode - The shader code for Material.
	 * @param VertexFactoryType - The vertex factory type to compile shaders for.
	 * @param Platform - The platform to compile for.
	 */
	UINT BeginCompile(
		UINT ShaderMapId,
		const FMaterial* Material,
		const ANSICHAR* MaterialShaderCode,
		FVertexFactoryType* InVertexFactoryType,
		EShaderPlatform Platform
		);

	/**
	 * Creates shaders for all of the compile jobs and caches them in this shader map.
	 * @param Material - The material to compile shaders for.
	 * @param CompilationResults - The compile results that were enqueued by BeginCompile.
	 */
	void FinishCompile(UINT ShaderMapId, const FUniformExpressionSet& UniformExpressionSet, const TArray<TRefCountPtr<FShaderCompileJob> >& CompilationResults);

	/**
	 * Checks whether a material shader map is missing any shader types necessary for the given material.
	 * May be called with a NULL FMeshMaterialShaderMap, which is equivalent to a FMeshMaterialShaderMap with no shaders cached.
	 * @param MeshShaderMap - The FMeshMaterialShaderMap to check for the necessary shaders.
	 * @param Material - The material which is checked.
	 * @return True if the shader map has all of the shader types necessary.
	 */
	static UBOOL IsComplete(
		const FMeshMaterialShaderMap* MeshShaderMap,
		EShaderPlatform Platform,
		const FMaterial* Material,
		FVertexFactoryType* InVertexFactoryType,
		UBOOL bSilent
		);

	/**
	 * Removes all entries in the cache with exceptions based on a shader type
	 * @param ShaderType - The shader type to flush
	 */
	void FlushShadersByShaderType(FShaderType* ShaderType);

	// Accessors.
	FVertexFactoryType* GetVertexFactoryType() const { return VertexFactoryType; }

	// Serializer.
	friend FArchive& operator<<(FArchive& Ar,FMeshMaterialShaderMap& S);

private:
	/** The vertex factory type these shaders are for. */
	FVertexFactoryType* VertexFactoryType;
};
