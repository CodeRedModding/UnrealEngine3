/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY


class UMaterialExpressionAdd : public UMaterialExpression
{
public:
    FExpressionInput A;
    FExpressionInput B;
    DECLARE_CLASS(UMaterialExpressionAdd,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
    FExpressionInput A;
    FExpressionInput B;
    DECLARE_CLASS(UMaterialExpressionAppendVector,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
    FExpressionInput Coordinate;
    FExpressionInput Height;
    FLOAT HeightRatio;
    FLOAT ReferencePlane;
    DECLARE_CLASS(UMaterialExpressionBumpOffset,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionCameraVector : public UMaterialExpression
{
public:
    DECLARE_CLASS(UMaterialExpressionCameraVector,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionCeil : public UMaterialExpression
{
public:
    FExpressionInput Input;
    DECLARE_CLASS(UMaterialExpressionCeil,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionClamp : public UMaterialExpression
{
public:
    FExpressionInput Input;
    FExpressionInput Min;
    FExpressionInput Max;
    DECLARE_CLASS(UMaterialExpressionClamp,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
    FExpressionInput Input;
    BITFIELD R:1 GCC_PACK(PROPERTY_ALIGNMENT);
    BITFIELD G:1;
    BITFIELD B:1;
    BITFIELD A:1;
    DECLARE_CLASS(UMaterialExpressionComponentMask,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionConstant : public UMaterialExpression
{
public:
    FLOAT R;
    DECLARE_CLASS(UMaterialExpressionConstant,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
    FLOAT R;
    FLOAT G;
    DECLARE_CLASS(UMaterialExpressionConstant2Vector,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
    FLOAT R;
    FLOAT G;
    FLOAT B;
    DECLARE_CLASS(UMaterialExpressionConstant3Vector,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
    FLOAT R;
    FLOAT G;
    FLOAT B;
    FLOAT A;
    DECLARE_CLASS(UMaterialExpressionConstant4Vector,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionCosine : public UMaterialExpression
{
public:
    FExpressionInput Input;
    FLOAT Period;
    DECLARE_CLASS(UMaterialExpressionCosine,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
    FExpressionInput A;
    FExpressionInput B;
    DECLARE_CLASS(UMaterialExpressionCrossProduct,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
    FExpressionInput Input;
    FExpressionInput Percent;
    FLinearColor LuminanceFactors;
    DECLARE_CLASS(UMaterialExpressionDesaturation,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const
	{
		return TEXT("Desaturation");
	}
};


class UMaterialExpressionDivide : public UMaterialExpression
{
public:
    FExpressionInput A;
    FExpressionInput B;
    DECLARE_CLASS(UMaterialExpressionDivide,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
    FExpressionInput A;
    FExpressionInput B;
    DECLARE_CLASS(UMaterialExpressionDotProduct,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionFloor : public UMaterialExpression
{
public:
    FExpressionInput Input;
    DECLARE_CLASS(UMaterialExpressionFloor,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionFrac : public UMaterialExpression
{
public:
    FExpressionInput Input;
    DECLARE_CLASS(UMaterialExpressionFrac,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
    FExpressionInput A;
    FExpressionInput B;
    FExpressionInput Alpha;
    DECLARE_CLASS(UMaterialExpressionLinearInterpolate,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
    FExpressionInput A;
    FExpressionInput B;
    DECLARE_CLASS(UMaterialExpressionMultiply,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
    FExpressionInput Vector;
    DECLARE_CLASS(UMaterialExpressionNormalize,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const { return TEXT("Normalize"); }
};


class UMaterialExpressionPanner : public UMaterialExpression
{
public:
    FExpressionInput Coordinate;
    FExpressionInput Time;
    FLOAT SpeedX;
    FLOAT SpeedY;
    DECLARE_CLASS(UMaterialExpressionPanner,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionParticleSubUV : public UMaterialExpression
{
public:
    class UTexture* Texture;
    DECLARE_CLASS(UMaterialExpressionParticleSubUV,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual void GetOutputs(TArray<FExpressionOutput>& Outputs) const;
	virtual INT GetWidth() const;
	virtual FString GetCaption() const;
	virtual INT GetLabelPadding() { return 8; }
};


class UMaterialExpressionReflectionVector : public UMaterialExpression
{
public:
    DECLARE_CLASS(UMaterialExpressionReflectionVector,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionRotator : public UMaterialExpression
{
public:
    FExpressionInput Coordinate;
    FExpressionInput Time;
    FLOAT CenterX;
    FLOAT CenterY;
    FLOAT Speed;
    DECLARE_CLASS(UMaterialExpressionRotator,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionScalarParameter : public UMaterialExpression
{
public:
    FName ParameterName;
    FLOAT DefaultValue;
    DECLARE_CLASS(UMaterialExpressionScalarParameter,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const { return TEXT("Scalar parameter"); }
};


class UMaterialExpressionSine : public UMaterialExpression
{
public:
    FExpressionInput Input;
    FLOAT Period;
    DECLARE_CLASS(UMaterialExpressionSine,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
    FExpressionInput A;
    FExpressionInput B;
    DECLARE_CLASS(UMaterialExpressionSubtract,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
    INT CoordinateIndex;
    FLOAT Tiling;
    DECLARE_CLASS(UMaterialExpressionTextureCoordinate,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionTextureSample : public UMaterialExpression
{
public:
    class UTexture* Texture;
    FExpressionInput Coordinates;
    DECLARE_CLASS(UMaterialExpressionTextureSample,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual void GetOutputs(TArray<FExpressionOutput>& Outputs) const;
	virtual INT GetWidth() const;
	virtual FString GetCaption() const;
	virtual INT GetLabelPadding() { return 8; }
};


class UMaterialExpressionTime : public UMaterialExpression
{
public:
    BITFIELD Absolute:1 GCC_PACK(PROPERTY_ALIGNMENT);
    DECLARE_CLASS(UMaterialExpressionTime,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
};


class UMaterialExpressionVectorParameter : public UMaterialExpression
{
public:
    FName ParameterName;
    FLinearColor DefaultValue;
    DECLARE_CLASS(UMaterialExpressionVectorParameter,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual void GetOutputs(TArray<FExpressionOutput>& Outputs) const;
	virtual FString GetCaption() const { return TEXT("Vector parameter"); }
};


class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:
    DECLARE_CLASS(UMaterialExpressionVertexColor,UMaterialExpression,0,Engine)
	virtual INT Compile(FMaterialCompiler* Compiler);
	virtual FString GetCaption() const;
	virtual void GetOutputs(TArray<FExpressionOutput>& Outputs) const;
};

struct FVectorParameterValue
{
    FName ParameterName;
    FLinearColor ParameterValue;
};

struct FScalarParameterValue
{
    FName ParameterName;
    FLOAT ParameterValue;
};


class UMaterialInstanceConstant : public UMaterialInstance
{
public:
    class UMaterialInstance* Parent;
    TArrayNoInit<FVectorParameterValue> VectorParameterValues;
    TArrayNoInit<FScalarParameterValue> ScalarParameterValues;
    FMaterialInstancePointer MaterialInstance;
    BITFIELD ReentrantFlag:1 GCC_PACK(PROPERTY_ALIGNMENT);
    DECLARE_FUNCTION(execSetScalarParameterValue);
    DECLARE_FUNCTION(execSetVectorParameterValue);
    DECLARE_FUNCTION(execSetParent);
    DECLARE_CLASS(UMaterialInstanceConstant,UMaterialInstance,0,Engine)
	// Constructor.

	UMaterialInstanceConstant();

	// UMaterialInstance interface.

	virtual UMaterial* GetMaterial();
	virtual DWORD GetLayerMask();
	virtual FMaterial* GetMaterialInterface(UBOOL Selected);
	virtual FMaterialInstance* GetInstanceInterface() { return MaterialInstance; }
	virtual bool SetVectorParameterValue(const FString& ParameterName,FColor Value);
	virtual bool SetScalarParameterValue(const FString& ParameterName,float Value);
	void SetParent(UMaterialInstance* NewParent);

	// UObject interface.

	virtual void PostLoad();
	virtual void PostEditChange(UProperty* PropertyThatChanged);
	virtual void Destroy();
};

#endif

AUTOGENERATE_FUNCTION(UMaterialInstanceConstant,-1,execSetScalarParameterValue);
AUTOGENERATE_FUNCTION(UMaterialInstanceConstant,-1,execSetVectorParameterValue);
AUTOGENERATE_FUNCTION(UMaterialInstanceConstant,-1,execSetParent);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif

