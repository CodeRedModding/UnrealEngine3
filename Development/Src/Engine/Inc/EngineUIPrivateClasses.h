/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#include "EngineUIPrivateGlobalIncludes.h"

#include "EngineNames.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_ENGINE_UIPRIVATE_ENUMS
#define INCLUDED_ENGINE_UIPRIVATE_ENUMS 1

enum EStatsFetchType
{
    SFT_Player              =0,
    SFT_CenteredOnPlayer    =1,
    SFT_Friends             =2,
    SFT_TopRankings         =3,
    SFT_MAX                 =4,
};
#define FOREACH_ENUM_ESTATSFETCHTYPE(op) \
    op(SFT_Player) \
    op(SFT_CenteredOnPlayer) \
    op(SFT_Friends) \
    op(SFT_TopRankings) 
enum EMenuOptionType
{
    MENUOT_ComboReadOnly    =0,
    MENUOT_ComboNumeric     =1,
    MENUOT_CheckBox         =2,
    MENUOT_Slider           =3,
    MENUOT_Spinner          =4,
    MENUOT_EditBox          =5,
    MENUOT_CollectionCheckBox=6,
    MENUOT_CollapsingList   =7,
    MENUOT_MAX              =8,
};
#define FOREACH_ENUM_EMENUOPTIONTYPE(op) \
    op(MENUOT_ComboReadOnly) \
    op(MENUOT_ComboNumeric) \
    op(MENUOT_CheckBox) \
    op(MENUOT_Slider) \
    op(MENUOT_Spinner) \
    op(MENUOT_EditBox) \
    op(MENUOT_CollectionCheckBox) \
    op(MENUOT_CollapsingList) 

#endif // !INCLUDED_ENGINE_UIPRIVATE_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_ENGINE_UIPRIVATE_CLASSES
#define INCLUDED_ENGINE_UIPRIVATE_CLASSES 1
#define ENABLE_DECLARECLASS_MACRO 1
#include "UnObjBas.h"
#undef ENABLE_DECLARECLASS_MACRO

class UUIDataStoreSubscriber : public UInterface
{
public:
    DECLARE_ABSTRACT_CLASS(UUIDataStoreSubscriber,UInterface,0|CLASS_Interface,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIDataStoreSubscriber)
};

class IUIDataStoreSubscriber
{
protected:
	virtual ~IUIDataStoreSubscriber() {}
public:
	typedef UUIDataStoreSubscriber UClassType;
	virtual UObject* GetUObjectInterfaceUIDataStoreSubscriber()=0;
    virtual void SetDataStoreBinding(const FString& MarkupText,INT BindingIndex=-1)=0;
    virtual FString GetDataStoreBinding(INT BindingIndex=-1) const=0;
    virtual UBOOL RefreshSubscriberValue(INT BindingIndex=-1)=0;
    virtual void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,UBOOL bValuesInvalidated,FName PropertyTag,class UUIDataProvider* SourceProvider,INT ArrayIndex)=0;
    virtual void GetBoundDataStores(TArray<class UUIDataStore*>& out_BoundDataStores)=0;
    virtual void ClearBoundDataStores()=0;
    NO_DEFAULT_CONSTRUCTOR(IUIDataStoreSubscriber)
};

class UUIDataStorePublisher : public UUIDataStoreSubscriber
{
public:
    DECLARE_ABSTRACT_CLASS(UUIDataStorePublisher,UUIDataStoreSubscriber,0|CLASS_Interface,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIDataStorePublisher)
};

class IUIDataStorePublisher : public IUIDataStoreSubscriber
{
protected:
	virtual ~IUIDataStorePublisher() {}
public:
	typedef UUIDataStorePublisher UClassType;
	virtual UObject* GetUObjectInterfaceUIDataStorePublisher()=0;
    virtual UBOOL SaveSubscriberValue(TArray<class UUIDataStore*>& out_BoundDataStores,INT BindingIndex=-1)=0;
    NO_DEFAULT_CONSTRUCTOR(IUIDataStorePublisher)
};

class UUIDataProvider : public UUIRoot
{
public:
    //## BEGIN PROPS UIDataProvider
    //## END PROPS UIDataProvider

    DECLARE_ABSTRACT_CLASS(UUIDataProvider,UUIRoot,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIDataProvider)
};

struct UIDataProvider_OnlinePlayerDataBase_eventOnUnregister_Parms
{
    UIDataProvider_OnlinePlayerDataBase_eventOnUnregister_Parms(EEventParm)
    {
    }
};
struct UIDataProvider_OnlinePlayerDataBase_eventOnRegister_Parms
{
    class ULocalPlayer* InPlayer;
    UIDataProvider_OnlinePlayerDataBase_eventOnRegister_Parms(EEventParm)
    {
    }
};
class UUIDataProvider_OnlinePlayerDataBase : public UUIDataProvider
{
public:
    //## BEGIN PROPS UIDataProvider_OnlinePlayerDataBase
    INT PlayerControllerId;
    //## END PROPS UIDataProvider_OnlinePlayerDataBase

    void eventOnUnregister()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_OnUnregister),NULL);
    }
    void eventOnRegister(class ULocalPlayer* InPlayer)
    {
        UIDataProvider_OnlinePlayerDataBase_eventOnRegister_Parms Parms(EC_EventParm);
        Parms.InPlayer=InPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_OnRegister),&Parms);
    }
    DECLARE_ABSTRACT_CLASS(UUIDataProvider_OnlinePlayerDataBase,UUIDataProvider,0|CLASS_Transient|CLASS_Config,Engine)
	/**
	 * Provides the data provider with the player they were just bound to
	 *
	 * @param Player the local player associated with this player settings provider
	 */
	virtual void OnRegister(ULocalPlayer* InPlayer)
	{
		eventOnRegister(InPlayer);
	}

	/**
	 * Tells the provider that the player is no longer valid
	 */
	virtual void OnUnregister(void)
	{
		eventOnUnregister();
	}
};

class UUIDataProvider_OnlineFriendMessages : public UUIDataProvider_OnlinePlayerDataBase
{
public:
    //## BEGIN PROPS UIDataProvider_OnlineFriendMessages
    TArrayNoInit<struct FOnlineFriendMessage> Messages;
    FStringNoInit SendingPlayerNameCol;
    FStringNoInit bIsFriendInviteCol;
    FStringNoInit bWasAcceptedCol;
    FStringNoInit bWasDeniedCol;
    FStringNoInit MessageCol;
    FStringNoInit LastInviteFrom;
    //## END PROPS UIDataProvider_OnlineFriendMessages

    DECLARE_CLASS(UUIDataProvider_OnlineFriendMessages,UUIDataProvider_OnlinePlayerDataBase,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIDataProvider_OnlineFriendMessages)
};

struct UIDataProvider_OnlineFriends_eventRefreshFriendsList_Parms
{
    UIDataProvider_OnlineFriends_eventRefreshFriendsList_Parms(EEventParm)
    {
    }
};
class UUIDataProvider_OnlineFriends : public UUIDataProvider_OnlinePlayerDataBase
{
public:
    //## BEGIN PROPS UIDataProvider_OnlineFriends
    TArrayNoInit<struct FOnlineFriend> FriendsList;
    FStringNoInit NickNameCol;
    FStringNoInit PresenceInfoCol;
    FStringNoInit FriendStateCol;
    FStringNoInit bIsOnlineCol;
    FStringNoInit bIsPlayingCol;
    FStringNoInit bIsPlayingThisGameCol;
    FStringNoInit bIsJoinableCol;
    FStringNoInit bHasVoiceSupportCol;
    FStringNoInit bHaveInvitedCol;
    FStringNoInit bHasInvitedYouCol;
    FStringNoInit OfflineText;
    FStringNoInit OnlineText;
    FStringNoInit AwayText;
    FStringNoInit BusyText;
    //## END PROPS UIDataProvider_OnlineFriends

    void eventRefreshFriendsList()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_RefreshFriendsList),NULL);
    }
    DECLARE_CLASS(UUIDataProvider_OnlineFriends,UUIDataProvider_OnlinePlayerDataBase,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIDataProvider_OnlineFriends)
};

struct UIDataProvider_OnlinePartyChatList_eventRefreshMembersList_Parms
{
    UIDataProvider_OnlinePartyChatList_eventRefreshMembersList_Parms(EEventParm)
    {
    }
};
class UUIDataProvider_OnlinePartyChatList : public UUIDataProvider_OnlinePlayerDataBase
{
public:
    //## BEGIN PROPS UIDataProvider_OnlinePartyChatList
    TArrayNoInit<struct FOnlinePartyMember> PartyMembersList;
    TArrayNoInit<FString> NatTypes;
    FStringNoInit NickNameCol;
    FStringNoInit NatTypeCol;
    FStringNoInit IsLocalCol;
    FStringNoInit IsInPartyVoiceCol;
    FStringNoInit IsTalkingCol;
    FStringNoInit IsInGameSessionCol;
    FStringNoInit IsPlayingThisGameCol;
    //## END PROPS UIDataProvider_OnlinePartyChatList

    void eventRefreshMembersList()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_RefreshMembersList),NULL);
    }
    DECLARE_CLASS(UUIDataProvider_OnlinePartyChatList,UUIDataProvider_OnlinePlayerDataBase,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIDataProvider_OnlinePartyChatList)
};

struct FPlayerStorageArrayProvider
{
    INT PlayerStorageId;
    class UUIDataProvider_OnlinePlayerStorageArray* Provider;

    /** Constructors */
    FPlayerStorageArrayProvider() {}
    FPlayerStorageArrayProvider(EEventParm)
    {
        appMemzero(this, sizeof(FPlayerStorageArrayProvider));
    }
};

class UUIDataProvider_OnlinePlayerStorage : public UUIDataProvider_OnlinePlayerDataBase
{
public:
    //## BEGIN PROPS UIDataProvider_OnlinePlayerStorage
    class UOnlinePlayerStorage* Profile;
    FName ProviderName;
    BITFIELD bWasErrorLastRead:1;
    BITFIELD bIsExternalUIOpen:1;
    BITFIELD bNeedsDeferredRefresh:1;
    TArrayNoInit<struct FPlayerStorageArrayProvider> PlayerStorageArrayProviders;
    INT DeviceStorageSizeNeeded;
    //## END PROPS UIDataProvider_OnlinePlayerStorage

    DECLARE_CLASS(UUIDataProvider_OnlinePlayerStorage,UUIDataProvider_OnlinePlayerDataBase,0|CLASS_Transient|CLASS_Config,Engine)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

    NO_DEFAULT_CONSTRUCTOR(UUIDataProvider_OnlinePlayerStorage)
};

class UUIDataProvider_OnlineProfileSettings : public UUIDataProvider_OnlinePlayerStorage
{
public:
    //## BEGIN PROPS UIDataProvider_OnlineProfileSettings
    //## END PROPS UIDataProvider_OnlineProfileSettings

    DECLARE_CLASS(UUIDataProvider_OnlineProfileSettings,UUIDataProvider_OnlinePlayerStorage,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIDataProvider_OnlineProfileSettings)
};

class UUIDataProvider_PlayerAchievements : public UUIDataProvider_OnlinePlayerDataBase
{
public:
    //## BEGIN PROPS UIDataProvider_PlayerAchievements
    TArrayNoInit<struct FAchievementDetails> Achievements;
    //## END PROPS UIDataProvider_PlayerAchievements

    INT GetTotalGamerScore() const;
    INT GetMaxTotalGamerScore() const;
    DECLARE_FUNCTION(execGetTotalGamerScore)
    {
        P_FINISH;
        *(INT*)Result=this->GetTotalGamerScore();
    }
    DECLARE_FUNCTION(execGetMaxTotalGamerScore)
    {
        P_FINISH;
        *(INT*)Result=this->GetMaxTotalGamerScore();
    }
    DECLARE_CLASS(UUIDataProvider_PlayerAchievements,UUIDataProvider_OnlinePlayerDataBase,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIDataProvider_PlayerAchievements)
};

class UUIDataProvider_OnlinePlayerStorageArray : public UUIDataProvider
{
public:
    //## BEGIN PROPS UIDataProvider_OnlinePlayerStorageArray
    class UOnlinePlayerStorage* PlayerStorage;
    INT PlayerStorageId;
    FStringNoInit ColumnHeaderText;
    TArrayNoInit<FName> Values;
    //## END PROPS UIDataProvider_OnlinePlayerStorageArray

    DECLARE_CLASS(UUIDataProvider_OnlinePlayerStorageArray,UUIDataProvider,0|CLASS_Transient|CLASS_Config,Engine)
	/**
	 * Binds the new storage object and id to this provider.
	 *
	 * @param NewStorage the new object to bind
	 * @param NewPlayerStorageId the id of the settings array to expose
	 *
	 * @return TRUE if the call worked, FALSE otherwise
	 */
	UBOOL BindStringSetting(UOnlinePlayerStorage* NewStorage,INT NewPlayerStorageId);

	/**
	 * Binds the new storage object and id to this provider.
	 *
	 * @param NewStorage the new object to bind
	 * @param PropertyId the id of the settings array to expose
	 *
	 * @return TRUE if the call worked, FALSE otherwise
	 */
	UBOOL BindPropertySetting(UOnlinePlayerStorage* NewStorage,INT PropertyId);
};

class UUIDataProvider_SettingsArray : public UUIDataProvider
{
public:
    //## BEGIN PROPS UIDataProvider_SettingsArray
    class USettings* Settings;
    INT SettingsId;
    FName SettingsName;
    FStringNoInit ColumnHeaderText;
    TArrayNoInit<struct FIdToStringMapping> Values;
    //## END PROPS UIDataProvider_SettingsArray

    DECLARE_CLASS(UUIDataProvider_SettingsArray,UUIDataProvider,0|CLASS_Transient|CLASS_Config,Engine)
	/**
	 * Binds the new settings object and id to this provider.
	 *
	 * @param NewSettings the new object to bind
	 * @param NewSettingsId the id of the settings array to expose
	 *
	 * @return TRUE if the call worked, FALSE otherwise
	 */
	UBOOL BindStringSetting(USettings* NewSettings,INT NewSettingsId);

	/**
	 * Binds the property id as an array item. Requires that the property
	 * has a mapping type of PVMT_PredefinedValues
	 *
	 * @param NewSettings the new object to bind
	 * @param PropertyId the id of the property to expose as an array
	 *
	 * @return TRUE if the call worked, FALSE otherwise
	 */
	UBOOL BindPropertySetting(USettings* NewSettings,INT PropertyId);
};

struct UIDataStore_eventRefreshSubscribers_Parms
{
    FName PropertyTag;
    UBOOL bInvalidateValues;
    class UUIDataProvider* SourceProvider;
    INT ArrayIndex;
    UIDataStore_eventRefreshSubscribers_Parms(EEventParm)
    {
    }
};
struct UIDataStore_eventSubscriberDetached_Parms
{
    TScriptInterface<class IUIDataStoreSubscriber> Subscriber;
    UIDataStore_eventSubscriberDetached_Parms(EEventParm)
    {
    }
};
struct UIDataStore_eventSubscriberAttached_Parms
{
    TScriptInterface<class IUIDataStoreSubscriber> Subscriber;
    UIDataStore_eventSubscriberAttached_Parms(EEventParm)
    {
    }
};
struct UIDataStore_eventUnregistered_Parms
{
    class ULocalPlayer* PlayerOwner;
    UIDataStore_eventUnregistered_Parms(EEventParm)
    {
    }
};
struct UIDataStore_eventRegistered_Parms
{
    class ULocalPlayer* PlayerOwner;
    UIDataStore_eventRegistered_Parms(EEventParm)
    {
    }
};
struct UIDataStore_eventOnDataStoreValueUpdated_Parms
{
    class UUIDataStore* SourceDataStore;
    UBOOL bValuesInvalidated;
    FName PropertyTag;
    class UUIDataProvider* SourceProvider;
    INT ArrayIndex;
    UIDataStore_eventOnDataStoreValueUpdated_Parms(EEventParm)
    {
    }
};
class UUIDataStore : public UUIDataProvider
{
public:
    //## BEGIN PROPS UIDataStore
    FName Tag;
    TArrayNoInit<FScriptDelegate> RefreshSubscriberNotifies;
    FScriptDelegate __OnDataStoreValueUpdated__Delegate;
    //## END PROPS UIDataStore

    void eventRefreshSubscribers(FName PropertyTag=NAME_None,UBOOL bInvalidateValues=TRUE,class UUIDataProvider* SourceProvider=NULL,INT ArrayIndex=-1)
    {
        UIDataStore_eventRefreshSubscribers_Parms Parms(EC_EventParm);
        Parms.PropertyTag=PropertyTag;
        Parms.bInvalidateValues=bInvalidateValues ? FIRST_BITFIELD : FALSE;
        Parms.SourceProvider=SourceProvider;
        Parms.ArrayIndex=ArrayIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_RefreshSubscribers),&Parms);
    }
    void eventSubscriberDetached(const TScriptInterface<class IUIDataStoreSubscriber>& Subscriber)
    {
        UIDataStore_eventSubscriberDetached_Parms Parms(EC_EventParm);
        Parms.Subscriber=Subscriber;
        ProcessEvent(FindFunctionChecked(ENGINE_SubscriberDetached),&Parms);
    }
    void eventSubscriberAttached(const TScriptInterface<class IUIDataStoreSubscriber>& Subscriber)
    {
        UIDataStore_eventSubscriberAttached_Parms Parms(EC_EventParm);
        Parms.Subscriber=Subscriber;
        ProcessEvent(FindFunctionChecked(ENGINE_SubscriberAttached),&Parms);
    }
    void eventUnregistered(class ULocalPlayer* PlayerOwner)
    {
        UIDataStore_eventUnregistered_Parms Parms(EC_EventParm);
        Parms.PlayerOwner=PlayerOwner;
        ProcessEvent(FindFunctionChecked(ENGINE_Unregistered),&Parms);
    }
    void eventRegistered(class ULocalPlayer* PlayerOwner)
    {
        UIDataStore_eventRegistered_Parms Parms(EC_EventParm);
        Parms.PlayerOwner=PlayerOwner;
        ProcessEvent(FindFunctionChecked(ENGINE_Registered),&Parms);
    }
    void delegateOnDataStoreValueUpdated(class UUIDataStore* SourceDataStore,UBOOL bValuesInvalidated,FName PropertyTag,class UUIDataProvider* SourceProvider,INT ArrayIndex)
    {
        UIDataStore_eventOnDataStoreValueUpdated_Parms Parms(EC_EventParm);
        Parms.SourceDataStore=SourceDataStore;
        Parms.bValuesInvalidated=bValuesInvalidated ? FIRST_BITFIELD : FALSE;
        Parms.PropertyTag=PropertyTag;
        Parms.SourceProvider=SourceProvider;
        Parms.ArrayIndex=ArrayIndex;
        ProcessDelegate(ENGINE_OnDataStoreValueUpdated,&__OnDataStoreValueUpdated__Delegate,&Parms);
    }
    DECLARE_ABSTRACT_CLASS(UUIDataStore,UUIDataProvider,0|CLASS_Transient|CLASS_Config,Engine)
	/**
	 * Allows each data store the chance to load any dependent classes
	 */
	virtual void LoadDependentClasses(void)
	{
	}

	/**
	 * Hook for performing any initialization required for this data store
	 */
	virtual void InitializeDataStore();

	/**
	 * Called when this data store is added to the data store manager's list of active data stores.
	 *
	 * @param	PlayerOwner		the player that will be associated with this DataStore.  Only relevant if this data store is
	 *							associated with a particular player; NULL if this is a global data store.
	 */
	virtual void OnRegister( class ULocalPlayer* PlayerOwner );

	/**
	 * Called when this data store is removed from the data store manager's list of active data stores.
	 *
	 * @param	PlayerOwner		the player that will be associated with this DataStore.  Only relevant if this data store is
	 *							associated with a particular player; NULL if this is a global data store.
	 */
	virtual void OnUnregister( class ULocalPlayer* PlayerOwner );

	/**
	 * Retrieves the tag used for referencing this data store.  Normally corresponds to Tag, but may be different for some special
	 * data stores.
	 */
	virtual FName GetDataStoreID() const { return Tag; }
};

struct FDynamicResourceProviderDefinition
{
    FName ProviderTag;
    FStringNoInit ProviderClassName;
    class UClass* ProviderClass;

    /** Constructors */
    FDynamicResourceProviderDefinition() {}
    FDynamicResourceProviderDefinition(EEventParm)
    {
        appMemzero(this, sizeof(FDynamicResourceProviderDefinition));
    }
};

class UUIDataStore_DynamicResource : public UUIDataStore
{
public:
    //## BEGIN PROPS UIDataStore_DynamicResource
    class UUIDataProvider_OnlineProfileSettings* ProfileProvider;
    class UUIDataStore_GameResource* GameResourceDataStore;
    TArrayNoInit<struct FDynamicResourceProviderDefinition> ResourceProviderDefinitions;
    TMultiMap<FName,class UUIResourceCombinationProvider*> ResourceProviders;
    //## END PROPS UIDataStore_DynamicResource

    INT FindProviderTypeIndex(FName ProviderTag) const;
    UBOOL GetResourceProviders(FName ProviderTag,TArray<class UUIResourceCombinationProvider*>& out_Providers) const;
    void OnLoginChange(BYTE LocalUserNum);
    DECLARE_FUNCTION(execFindProviderTypeIndex)
    {
        P_GET_NAME(ProviderTag);
        P_FINISH;
        *(INT*)Result=this->FindProviderTypeIndex(ProviderTag);
    }
    DECLARE_FUNCTION(execGetResourceProviders)
    {
        P_GET_NAME(ProviderTag);
        P_GET_TARRAY_REF(class UUIResourceCombinationProvider*,out_Providers);
        P_FINISH;
        *(UBOOL*)Result=this->GetResourceProviders(ProviderTag,out_Providers);
    }
    DECLARE_FUNCTION(execOnLoginChange)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        this->OnLoginChange(LocalUserNum);
    }
    DECLARE_CLASS(UUIDataStore_DynamicResource,UUIDataStore,0|CLASS_Transient|CLASS_Config,Engine)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

	/* === UUIDataStore_GameResource interface === */
	/**
	 * Finds or creates the UIResourceDataProvider instances referenced by ElementProviderTypes, and stores the result
	 * into the ListElementProvider map.
	 */
	virtual void InitializeListElementProviders();

	/* === UIDataStore interface === */
	/**
	 * Loads the classes referenced by the ElementProviderTypes array.
	 */
	virtual void LoadDependentClasses();

	/**
	 * Called when this data store is added to the data store manager's list of active data stores.
	 *
	 * @param	PlayerOwner		the player that will be associated with this DataStore.  Only relevant if this data store is
	 *							associated with a particular player; NULL if this is a global data store.
	 */
	virtual void OnRegister( ULocalPlayer* PlayerOwner );

	/* === UObject interface === */
	/** Required since maps are not yet supported by script serialization */
	virtual void AddReferencedObjects( TArray<UObject*>& ObjectArray );
	virtual void Serialize( FArchive& Ar );

	/**
	 * Called from ReloadConfig after the object has reloaded its configuration data.  Reinitializes the collection of list element providers.
	 */
	virtual void PostReloadConfig( UProperty* PropertyThatWasLoaded );

	/**
	 * Callback for retrieving a textual representation of natively serialized properties.  Child classes should implement this method if they wish
	 * to have natively serialized property values included in things like diffcommandlet output.
	 *
	 * @param	out_PropertyValues	receives the property names and values which should be reported for this object.  The map's key should be the name of
	 *								the property and the map's value should be the textual representation of the property's value.  The property value should
	 *								be formatted the same way that UProperty::ExportText formats property values (i.e. for arrays, wrap in quotes and use a comma
	 *								as the delimiter between elements, etc.)
	 * @param	ExportFlags			bitmask of EPropertyPortFlags used for modifying the format of the property values
	 *
	 * @return	return TRUE if property values were added to the map.
	 */
	virtual UBOOL GetNativePropertyValues( TMap<FString,FString>& out_PropertyValues, DWORD ExportFlags=0 ) const;
};

class UUIDataStore_Fonts : public UUIDataStore
{
public:
    //## BEGIN PROPS UIDataStore_Fonts
    //## END PROPS UIDataStore_Fonts

    DECLARE_CLASS(UUIDataStore_Fonts,UUIDataStore,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIDataStore_Fonts)
};

struct FGameResourceDataProvider
{
    FName ProviderTag;
    FStringNoInit ProviderClassName;
    BITFIELD bExpandProviders:1;
    class UClass* ProviderClass;

    /** Constructors */
    FGameResourceDataProvider() {}
    FGameResourceDataProvider(EEventParm)
    {
        appMemzero(this, sizeof(FGameResourceDataProvider));
    }
};

class UUIDataStore_GameResource : public UUIDataStore
{
public:
    //## BEGIN PROPS UIDataStore_GameResource
    TArrayNoInit<struct FGameResourceDataProvider> ElementProviderTypes;
    TMultiMap<FName,class UUIResourceDataProvider*> ListElementProviders;
    //## END PROPS UIDataStore_GameResource

    INT FindProviderTypeIndex(FName ProviderTag) const;
    UBOOL GetResourceProviders(FName ProviderTag,TArray<class UUIResourceDataProvider*>& out_Providers) const;
    DECLARE_FUNCTION(execFindProviderTypeIndex)
    {
        P_GET_NAME(ProviderTag);
        P_FINISH;
        *(INT*)Result=this->FindProviderTypeIndex(ProviderTag);
    }
    DECLARE_FUNCTION(execGetResourceProviders)
    {
        P_GET_NAME(ProviderTag);
        P_GET_TARRAY_REF(class UUIResourceDataProvider*,out_Providers);
        P_FINISH;
        *(UBOOL*)Result=this->GetResourceProviders(ProviderTag,out_Providers);
    }
    DECLARE_CLASS(UUIDataStore_GameResource,UUIDataStore,0|CLASS_Transient|CLASS_Config,Engine)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

	/* === UUIDataStore_GameResource interface === */
	/**
	 * Finds or creates the UIResourceDataProvider instances referenced by ElementProviderTypes, and stores the result
	 * into the ListElementProvider map.
	 */
	virtual void InitializeListElementProviders();

	/* === UIDataStore interface === */
	/**
	 * Loads the classes referenced by the ElementProviderTypes array.
	 */
	virtual void LoadDependentClasses();

	/**
	 * Called when this data store is added to the data store manager's list of active data stores.
	 *
	 * @param	PlayerOwner		the player that will be associated with this DataStore.  Only relevant if this data store is
	 *							associated with a particular player; NULL if this is a global data store.
	 */
	virtual void OnRegister( ULocalPlayer* PlayerOwner );

	/* === UObject interface === */
	/** Required since maps are not yet supported by script serialization */
	virtual void AddReferencedObjects( TArray<UObject*>& ObjectArray );
	virtual void Serialize( FArchive& Ar );

	/**
	 * Called from ReloadConfig after the object has reloaded its configuration data.  Reinitializes the collection of list element providers.
	 */
	virtual void PostReloadConfig( UProperty* PropertyThatWasLoaded );

	/**
	 * Callback for retrieving a textual representation of natively serialized properties.  Child classes should implement this method if they wish
	 * to have natively serialized property values included in things like diffcommandlet output.
	 *
	 * @param	out_PropertyValues	receives the property names and values which should be reported for this object.  The map's key should be the name of
	 *								the property and the map's value should be the textual representation of the property's value.  The property value should
	 *								be formatted the same way that UProperty::ExportText formats property values (i.e. for arrays, wrap in quotes and use a comma
	 *								as the delimiter between elements, etc.)
	 * @param	ExportFlags			bitmask of EPropertyPortFlags used for modifying the format of the property values
	 *
	 * @return	return TRUE if property values were added to the map.
	 */
	virtual UBOOL GetNativePropertyValues( TMap<FString,FString>& out_PropertyValues, DWORD ExportFlags=0 ) const;
};

class UUIDataStore_MenuItems : public UUIDataStore_GameResource
{
public:
    //## BEGIN PROPS UIDataStore_MenuItems
    FName CurrentGameSettingsTag;
    TMultiMap<FName, class UUIDataProvider_MenuItem*> OptionProviders;
    TArrayNoInit<class UUIDataProvider_MenuItem*> DynamicProviders;
    //## END PROPS UIDataStore_MenuItems

    DECLARE_CLASS(UUIDataStore_MenuItems,UUIDataStore_GameResource,0|CLASS_Transient|CLASS_Config,Engine)
    static const TCHAR* StaticConfigName() {return TEXT("UI");}

	/**
	 * Called when this data store is added to the data store manager's list of active data stores.
	 *
	 * @param	PlayerOwner		the player that will be associated with this DataStore.  Only relevant if this data store is
	 *							associated with a particular player; NULL if this is a global data store.
	 */
	virtual void OnRegister( ULocalPlayer* PlayerOwner );
};

struct UIDataStore_GameState_eventOnRefreshDataFieldValue_Parms
{
    UIDataStore_GameState_eventOnRefreshDataFieldValue_Parms(EEventParm)
    {
    }
};
class UUIDataStore_GameState : public UUIDataStore
{
public:
    //## BEGIN PROPS UIDataStore_GameState
    FScriptDelegate __OnRefreshDataFieldValue__Delegate;
    //## END PROPS UIDataStore_GameState

    void delegateOnRefreshDataFieldValue()
    {
        ProcessDelegate(ENGINE_OnRefreshDataFieldValue,&__OnRefreshDataFieldValue__Delegate,NULL);
    }
    DECLARE_ABSTRACT_CLASS(UUIDataStore_GameState,UUIDataStore,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIDataStore_GameState)
};

struct FRegistryKeyValuePair
{
    FStringNoInit Key;
    FStringNoInit Value;

    /** Constructors */
    FRegistryKeyValuePair() {}
    FRegistryKeyValuePair(EEventParm)
    {
        appMemzero(this, sizeof(FRegistryKeyValuePair));
    }
};

struct UIDataStore_Registry_eventSetData_Parms
{
    FString Key;
    FString Value;
    UIDataStore_Registry_eventSetData_Parms(EEventParm)
    {
    }
};
struct UIDataStore_Registry_eventGetData_Parms
{
    FString Key;
    FString out_Data;
    UBOOL ReturnValue;
    UIDataStore_Registry_eventGetData_Parms(EEventParm)
    {
    }
};
class UUIDataStore_Registry : public UUIDataStore
{
public:
    //## BEGIN PROPS UIDataStore_Registry
    TArrayNoInit<struct FRegistryKeyValuePair> RegistryData;
    //## END PROPS UIDataStore_Registry

    void eventSetData(const FString& Key,const FString& Value)
    {
        UIDataStore_Registry_eventSetData_Parms Parms(EC_EventParm);
        Parms.Key=Key;
        Parms.Value=Value;
        ProcessEvent(FindFunctionChecked(ENGINE_SetData),&Parms);
    }
    UBOOL eventGetData(const FString& Key,FString& out_Data)
    {
        UIDataStore_Registry_eventGetData_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.Key=Key;
        Parms.out_Data=out_Data;
        ProcessEvent(FindFunctionChecked(ENGINE_GetData),&Parms);
        out_Data=Parms.out_Data;
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UUIDataStore_Registry,UUIDataStore,0|CLASS_Transient|CLASS_Config,Engine)
	/* === UIDataStore interface === */
	/**
	 * Creates the data provider for this registry data store.
	 */
	virtual void InitializeDataStore();
};

class UUIDataStore_Remote : public UUIDataStore
{
public:
    //## BEGIN PROPS UIDataStore_Remote
    //## END PROPS UIDataStore_Remote

    DECLARE_ABSTRACT_CLASS(UUIDataStore_Remote,UUIDataStore,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIDataStore_Remote)
};

struct FGameSearchCfg
{
    class UClass* GameSearchClass;
    class UClass* DefaultGameSettingsClass;
    class UClass* SearchResultsProviderClass;
    class UUIDataProvider_Settings* DesiredSettingsProvider;
    class UOnlineGameSearch* Search;
    FName SearchName;

    /** Constructors */
    FGameSearchCfg() {}
    FGameSearchCfg(EEventParm)
    {
        appMemzero(this, sizeof(FGameSearchCfg));
    }
};

struct UIDataStore_OnlineGameSearch_eventMoveToPrevious_Parms
{
    UBOOL bInvalidateExistingSearchResults;
    UIDataStore_OnlineGameSearch_eventMoveToPrevious_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineGameSearch_eventMoveToNext_Parms
{
    UBOOL bInvalidateExistingSearchResults;
    UIDataStore_OnlineGameSearch_eventMoveToNext_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineGameSearch_eventSetCurrentByName_Parms
{
    FName SearchName;
    UBOOL bInvalidateExistingSearchResults;
    UIDataStore_OnlineGameSearch_eventSetCurrentByName_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineGameSearch_eventSetCurrentByIndex_Parms
{
    INT NewIndex;
    UBOOL bInvalidateExistingSearchResults;
    UIDataStore_OnlineGameSearch_eventSetCurrentByIndex_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineGameSearch_eventGetActiveGameSearch_Parms
{
    class UOnlineGameSearch* ReturnValue;
    UIDataStore_OnlineGameSearch_eventGetActiveGameSearch_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineGameSearch_eventGetCurrentGameSearch_Parms
{
    class UOnlineGameSearch* ReturnValue;
    UIDataStore_OnlineGameSearch_eventGetCurrentGameSearch_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineGameSearch_eventShowHostGamercard_Parms
{
    BYTE ControllerIndex;
    INT ListIndex;
    UBOOL ReturnValue;
    UIDataStore_OnlineGameSearch_eventShowHostGamercard_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineGameSearch_eventGetSearchResultFromIndex_Parms
{
    INT ListIndex;
    struct FOnlineGameSearchResult Result;
    UBOOL ReturnValue;
    UIDataStore_OnlineGameSearch_eventGetSearchResultFromIndex_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineGameSearch_eventSubmitGameSearch_Parms
{
    BYTE ControllerIndex;
    UBOOL bInvalidateExistingSearchResults;
    UBOOL ReturnValue;
    UIDataStore_OnlineGameSearch_eventSubmitGameSearch_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineGameSearch_eventInit_Parms
{
    UIDataStore_OnlineGameSearch_eventInit_Parms(EEventParm)
    {
    }
};
class UUIDataStore_OnlineGameSearch : public UUIDataStore_Remote
{
public:
    //## BEGIN PROPS UIDataStore_OnlineGameSearch
    FName SearchResultsName;
    class UOnlineSubsystem* OnlineSub;
    TScriptInterface<class IInterface> GameInterface;
    TArrayNoInit<struct FGameSearchCfg> GameSearchCfgList;
    INT SelectedIndex;
    INT ActiveSearchIndex;
    //## END PROPS UIDataStore_OnlineGameSearch

    void eventMoveToPrevious(UBOOL bInvalidateExistingSearchResults=TRUE)
    {
        UIDataStore_OnlineGameSearch_eventMoveToPrevious_Parms Parms(EC_EventParm);
        Parms.bInvalidateExistingSearchResults=bInvalidateExistingSearchResults ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_MoveToPrevious),&Parms);
    }
    void eventMoveToNext(UBOOL bInvalidateExistingSearchResults=TRUE)
    {
        UIDataStore_OnlineGameSearch_eventMoveToNext_Parms Parms(EC_EventParm);
        Parms.bInvalidateExistingSearchResults=bInvalidateExistingSearchResults ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_MoveToNext),&Parms);
    }
    void eventSetCurrentByName(FName SearchName,UBOOL bInvalidateExistingSearchResults=TRUE)
    {
        UIDataStore_OnlineGameSearch_eventSetCurrentByName_Parms Parms(EC_EventParm);
        Parms.SearchName=SearchName;
        Parms.bInvalidateExistingSearchResults=bInvalidateExistingSearchResults ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_SetCurrentByName),&Parms);
    }
    void eventSetCurrentByIndex(INT NewIndex,UBOOL bInvalidateExistingSearchResults=TRUE)
    {
        UIDataStore_OnlineGameSearch_eventSetCurrentByIndex_Parms Parms(EC_EventParm);
        Parms.NewIndex=NewIndex;
        Parms.bInvalidateExistingSearchResults=bInvalidateExistingSearchResults ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_SetCurrentByIndex),&Parms);
    }
    class UOnlineGameSearch* eventGetActiveGameSearch()
    {
        UIDataStore_OnlineGameSearch_eventGetActiveGameSearch_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        ProcessEvent(FindFunctionChecked(ENGINE_GetActiveGameSearch),&Parms);
        return Parms.ReturnValue;
    }
    class UOnlineGameSearch* eventGetCurrentGameSearch()
    {
        UIDataStore_OnlineGameSearch_eventGetCurrentGameSearch_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        ProcessEvent(FindFunctionChecked(ENGINE_GetCurrentGameSearch),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventShowHostGamercard(BYTE ControllerIndex,INT ListIndex)
    {
        UIDataStore_OnlineGameSearch_eventShowHostGamercard_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.ControllerIndex=ControllerIndex;
        Parms.ListIndex=ListIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_ShowHostGamercard),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventGetSearchResultFromIndex(INT ListIndex,struct FOnlineGameSearchResult& Result)
    {
        UIDataStore_OnlineGameSearch_eventGetSearchResultFromIndex_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.ListIndex=ListIndex;
        Parms.Result=Result;
        ProcessEvent(FindFunctionChecked(ENGINE_GetSearchResultFromIndex),&Parms);
        Result=Parms.Result;
        return Parms.ReturnValue;
    }
    UBOOL eventSubmitGameSearch(BYTE ControllerIndex,UBOOL bInvalidateExistingSearchResults=TRUE)
    {
        UIDataStore_OnlineGameSearch_eventSubmitGameSearch_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.ControllerIndex=ControllerIndex;
        Parms.bInvalidateExistingSearchResults=bInvalidateExistingSearchResults ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_SubmitGameSearch),&Parms);
        return Parms.ReturnValue;
    }
    void eventInit()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Init),NULL);
    }
    DECLARE_ABSTRACT_CLASS(UUIDataStore_OnlineGameSearch,UUIDataStore_Remote,0|CLASS_Transient|CLASS_Config,Engine)
protected:
// UIDataStore interface

	/**
	 * Loads and creates an instance of the registered provider objects for each
	 * registered OnlineGameSettings class
	 */
	virtual void InitializeDataStore(void);
};

struct UIDataStore_OnlinePlayerData_eventGetCachedPlayerStorage_Parms
{
    INT ControllerId;
    class UOnlinePlayerStorage* ReturnValue;
    UIDataStore_OnlinePlayerData_eventGetCachedPlayerStorage_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlinePlayerData_eventGetCachedPlayerProfile_Parms
{
    INT ControllerId;
    class UOnlineProfileSettings* ReturnValue;
    UIDataStore_OnlinePlayerData_eventGetCachedPlayerProfile_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlinePlayerData_eventOnUnregister_Parms
{
    UIDataStore_OnlinePlayerData_eventOnUnregister_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlinePlayerData_eventOnRegister_Parms
{
    class ULocalPlayer* InPlayer;
    UIDataStore_OnlinePlayerData_eventOnRegister_Parms(EEventParm)
    {
    }
};
class UUIDataStore_OnlinePlayerData : public UUIDataStore_Remote
{
public:
    //## BEGIN PROPS UIDataStore_OnlinePlayerData
    class UUIDataProvider_OnlineFriends* FriendsProvider;
    INT PlayerControllerId;
    FStringNoInit PlayerNick;
    FStringNoInit ProfileSettingsClassName;
    class UClass* ProfileSettingsClass;
    class UUIDataProvider_OnlineProfileSettings* ProfileProvider;
    FStringNoInit ProfileProviderClassName;
    class UClass* ProfileProviderClass;
    FStringNoInit PlayerStorageClassName;
    class UClass* PlayerStorageClass;
    class UUIDataProvider_OnlinePlayerStorage* StorageProvider;
    FStringNoInit StorageProviderClassName;
    class UClass* StorageProviderClass;
    class UUIDataProvider_OnlineFriendMessages* FriendMessagesProvider;
    class UUIDataProvider_PlayerAchievements* AchievementsProvider;
    FStringNoInit FriendsProviderClassName;
    class UClass* FriendsProviderClass;
    FStringNoInit FriendMessagesProviderClassName;
    class UClass* FriendMessagesProviderClass;
    FStringNoInit AchievementsProviderClassName;
    class UClass* AchievementsProviderClass;
    FStringNoInit PartyChatProviderClassName;
    class UClass* PartyChatProviderClass;
    class UUIDataProvider_OnlinePartyChatList* PartyChatProvider;
    //## END PROPS UIDataStore_OnlinePlayerData

    class UOnlinePlayerStorage* eventGetCachedPlayerStorage(INT ControllerId)
    {
        UIDataStore_OnlinePlayerData_eventGetCachedPlayerStorage_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        Parms.ControllerId=ControllerId;
        ProcessEvent(FindFunctionChecked(ENGINE_GetCachedPlayerStorage),&Parms);
        return Parms.ReturnValue;
    }
    class UOnlineProfileSettings* eventGetCachedPlayerProfile(INT ControllerId)
    {
        UIDataStore_OnlinePlayerData_eventGetCachedPlayerProfile_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        Parms.ControllerId=ControllerId;
        ProcessEvent(FindFunctionChecked(ENGINE_GetCachedPlayerProfile),&Parms);
        return Parms.ReturnValue;
    }
    void eventOnUnregister()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_OnUnregister),NULL);
    }
    void eventOnRegister(class ULocalPlayer* InPlayer)
    {
        UIDataStore_OnlinePlayerData_eventOnRegister_Parms Parms(EC_EventParm);
        Parms.InPlayer=InPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_OnRegister),&Parms);
    }
    DECLARE_CLASS(UUIDataStore_OnlinePlayerData,UUIDataStore_Remote,0|CLASS_Transient|CLASS_Config,Engine)
/* === UIDataStore interface === */

	/**
	 * Loads the game specific OnlineProfileSettings class
	 */
	virtual void LoadDependentClasses(void);

	/**
	 * Creates the data providers exposed by this data store
	 */
	virtual void InitializeDataStore(void);

	/**
	 * Forwards the calls to the data providers so they can do their start up
	 *
	 * @param Player the player that will be associated with this DataStore
	 */
	virtual void OnRegister(ULocalPlayer* Player);

	/**
	 * Tells all of the child providers to clear their player data
	 *
	 * @param Player ignored
	 */
	virtual void OnUnregister(ULocalPlayer*);

};

struct FPlayerNickMetaData
{
    FName PlayerNickName;
    FStringNoInit PlayerNickColumnName;

    /** Constructors */
    FPlayerNickMetaData() {}
    FPlayerNickMetaData(EEventParm)
    {
        appMemzero(this, sizeof(FPlayerNickMetaData));
    }
};

struct FRankMetaData
{
    FName RankName;
    FStringNoInit RankColumnName;

    /** Constructors */
    FRankMetaData() {}
    FRankMetaData(EEventParm)
    {
        appMemzero(this, sizeof(FRankMetaData));
    }
};

struct UIDataStore_OnlineStats_eventShowGamercard_Parms
{
    BYTE ConrollerIndex;
    INT ListIndex;
    UBOOL ReturnValue;
    UIDataStore_OnlineStats_eventShowGamercard_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineStats_eventRefreshStats_Parms
{
    BYTE ControllerIndex;
    UBOOL ReturnValue;
    UIDataStore_OnlineStats_eventRefreshStats_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineStats_eventInit_Parms
{
    UIDataStore_OnlineStats_eventInit_Parms(EEventParm)
    {
    }
};
class UUIDataStore_OnlineStats : public UUIDataStore_Remote
{
public:
    //## BEGIN PROPS UIDataStore_OnlineStats
    TArrayNoInit<class UClass*> StatsReadClasses;
    FName StatsReadName;
    struct FPlayerNickMetaData PlayerNickData;
    struct FRankMetaData RankNameMetaData;
    FName TotalRowsName;
    TArrayNoInit<class UOnlineStatsRead*> StatsReadObjects;
    class UOnlineStatsRead* StatsRead;
    BYTE CurrentReadType;
    TScriptInterface<class IInterface> StatsInterface;
    TScriptInterface<class IInterface> PlayerInterface;
    //## END PROPS UIDataStore_OnlineStats

    void SortResultsByRank(class UOnlineStatsRead* StatsToSort);
    DECLARE_FUNCTION(execSortResultsByRank)
    {
        P_GET_OBJECT(UOnlineStatsRead,StatsToSort);
        P_FINISH;
        this->SortResultsByRank(StatsToSort);
    }
    UBOOL eventShowGamercard(BYTE ConrollerIndex,INT ListIndex)
    {
        UIDataStore_OnlineStats_eventShowGamercard_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.ConrollerIndex=ConrollerIndex;
        Parms.ListIndex=ListIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_ShowGamercard),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventRefreshStats(BYTE ControllerIndex)
    {
        UIDataStore_OnlineStats_eventRefreshStats_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.ControllerIndex=ControllerIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_RefreshStats),&Parms);
        return Parms.ReturnValue;
    }
    void eventInit()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Init),NULL);
    }
    DECLARE_ABSTRACT_CLASS(UUIDataStore_OnlineStats,UUIDataStore_Remote,0|CLASS_Transient|CLASS_Config,Engine)
protected:
// UIDataStore interface

	/**
	 * Loads and creates an instance of the registered stats read object
	 */
	virtual void InitializeDataStore(void);
};

class UUIDataStore_Settings : public UUIDataStore
{
public:
    //## BEGIN PROPS UIDataStore_Settings
    //## END PROPS UIDataStore_Settings

    DECLARE_ABSTRACT_CLASS(UUIDataStore_Settings,UUIDataStore,0|CLASS_Transient|CLASS_Config,Engine)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

    NO_DEFAULT_CONSTRUCTOR(UUIDataStore_Settings)
};

struct FGameSettingsCfg
{
    class UClass* GameSettingsClass;
    class UUIDataProvider_Settings* Provider;
    class UOnlineGameSettings* GameSettings;
    FName SettingsName;

    /** Constructors */
    FGameSettingsCfg() {}
    FGameSettingsCfg(EEventParm)
    {
        appMemzero(this, sizeof(FGameSettingsCfg));
    }
};

struct UIDataStore_OnlineGameSettings_eventMoveToPrevious_Parms
{
    UIDataStore_OnlineGameSettings_eventMoveToPrevious_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineGameSettings_eventMoveToNext_Parms
{
    UIDataStore_OnlineGameSettings_eventMoveToNext_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineGameSettings_eventSetCurrentByName_Parms
{
    FName SettingsName;
    UIDataStore_OnlineGameSettings_eventSetCurrentByName_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineGameSettings_eventSetCurrentByIndex_Parms
{
    INT NewIndex;
    UIDataStore_OnlineGameSettings_eventSetCurrentByIndex_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineGameSettings_eventGetCurrentProvider_Parms
{
    class UUIDataProvider_Settings* ReturnValue;
    UIDataStore_OnlineGameSettings_eventGetCurrentProvider_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineGameSettings_eventGetCurrentGameSettings_Parms
{
    class UOnlineGameSettings* ReturnValue;
    UIDataStore_OnlineGameSettings_eventGetCurrentGameSettings_Parms(EEventParm)
    {
    }
};
struct UIDataStore_OnlineGameSettings_eventCreateGame_Parms
{
    BYTE ControllerIndex;
    UBOOL ReturnValue;
    UIDataStore_OnlineGameSettings_eventCreateGame_Parms(EEventParm)
    {
    }
};
class UUIDataStore_OnlineGameSettings : public UUIDataStore_Settings
{
public:
    //## BEGIN PROPS UIDataStore_OnlineGameSettings
    TArrayNoInit<struct FGameSettingsCfg> GameSettingsCfgList;
    class UClass* SettingsProviderClass;
    INT SelectedIndex;
    //## END PROPS UIDataStore_OnlineGameSettings

    void eventMoveToPrevious()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_MoveToPrevious),NULL);
    }
    void eventMoveToNext()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_MoveToNext),NULL);
    }
    void eventSetCurrentByName(FName SettingsName)
    {
        UIDataStore_OnlineGameSettings_eventSetCurrentByName_Parms Parms(EC_EventParm);
        Parms.SettingsName=SettingsName;
        ProcessEvent(FindFunctionChecked(ENGINE_SetCurrentByName),&Parms);
    }
    void eventSetCurrentByIndex(INT NewIndex)
    {
        UIDataStore_OnlineGameSettings_eventSetCurrentByIndex_Parms Parms(EC_EventParm);
        Parms.NewIndex=NewIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_SetCurrentByIndex),&Parms);
    }
    class UUIDataProvider_Settings* eventGetCurrentProvider()
    {
        UIDataStore_OnlineGameSettings_eventGetCurrentProvider_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        ProcessEvent(FindFunctionChecked(ENGINE_GetCurrentProvider),&Parms);
        return Parms.ReturnValue;
    }
    class UOnlineGameSettings* eventGetCurrentGameSettings()
    {
        UIDataStore_OnlineGameSettings_eventGetCurrentGameSettings_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        ProcessEvent(FindFunctionChecked(ENGINE_GetCurrentGameSettings),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventCreateGame(BYTE ControllerIndex)
    {
        UIDataStore_OnlineGameSettings_eventCreateGame_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.ControllerIndex=ControllerIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_CreateGame),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_ABSTRACT_CLASS(UUIDataStore_OnlineGameSettings,UUIDataStore_Settings,0|CLASS_Transient|CLASS_Config,Engine)
private:
	/**
	 * Loads and creates an instance of the registered provider objects for each
	 * registered OnlineGameSettings class
	 */
	virtual void InitializeDataStore(void);

};

class UUIDataStore_StringBase : public UUIDataStore
{
public:
    //## BEGIN PROPS UIDataStore_StringBase
    //## END PROPS UIDataStore_StringBase

    DECLARE_ABSTRACT_CLASS(UUIDataStore_StringBase,UUIDataStore,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIDataStore_StringBase)
};

struct FUIInputKeyData
{
    struct FRawInputKeyEventData InputKeyData;
    FStringNoInit ButtonFontMarkupString;

    /** Constructors */
    FUIInputKeyData() {}
    FUIInputKeyData(EEventParm)
    {
        appMemzero(this, sizeof(FUIInputKeyData));
    }
};

struct FUIDataStoreInputAlias
{
    FName AliasName;
    struct FUIInputKeyData PlatformInputKeys[3];

    /** Constructors */
    FUIDataStoreInputAlias() {}
    FUIDataStoreInputAlias(EEventParm)
    {
        appMemzero(this, sizeof(FUIDataStoreInputAlias));
    }
};

class UUIDataStore_InputAlias : public UUIDataStore_StringBase
{
public:
    //## BEGIN PROPS UIDataStore_InputAlias
protected:
    TArrayNoInit<struct FUIDataStoreInputAlias> InputAliases;
    TMap< FName,INT > InputAliasLookupMap;
public:
    //## END PROPS UIDataStore_InputAlias

    FString GetAliasFontMarkup(FName DesiredAlias,BYTE OverridePlatform=3) const;
    FString GetAliasFontMarkupByIndex(INT AliasIndex,BYTE OverridePlatform=3) const;
    FName GetAliasInputKeyName(FName DesiredAlias,BYTE OverridePlatform=3) const;
    FName GetAliasInputKeyNameByIndex(INT AliasIndex,BYTE OverridePlatform=3) const;
    UBOOL GetAliasInputKeyData(struct FRawInputKeyEventData& out_InputKeyData,FName DesiredAlias,BYTE OverridePlatform=3) const;
    UBOOL GetAliasInputKeyDataByIndex(struct FRawInputKeyEventData& out_InputKeyData,INT AliasIndex,BYTE OverridePlatform=3) const;
    INT FindInputAliasIndex(FName DesiredAlias) const;
    UBOOL HasAliasMappingForPlatform(FName DesiredAlias,BYTE DesiredPlatform) const;
    DECLARE_FUNCTION(execGetAliasFontMarkup)
    {
        P_GET_NAME(DesiredAlias);
        P_GET_BYTE_OPTX(OverridePlatform,3);
        P_FINISH;
        *(FString*)Result=this->GetAliasFontMarkup(DesiredAlias,OverridePlatform);
    }
    DECLARE_FUNCTION(execGetAliasFontMarkupByIndex)
    {
        P_GET_INT(AliasIndex);
        P_GET_BYTE_OPTX(OverridePlatform,3);
        P_FINISH;
        *(FString*)Result=this->GetAliasFontMarkupByIndex(AliasIndex,OverridePlatform);
    }
    DECLARE_FUNCTION(execGetAliasInputKeyName)
    {
        P_GET_NAME(DesiredAlias);
        P_GET_BYTE_OPTX(OverridePlatform,3);
        P_FINISH;
        *(FName*)Result=this->GetAliasInputKeyName(DesiredAlias,OverridePlatform);
    }
    DECLARE_FUNCTION(execGetAliasInputKeyNameByIndex)
    {
        P_GET_INT(AliasIndex);
        P_GET_BYTE_OPTX(OverridePlatform,3);
        P_FINISH;
        *(FName*)Result=this->GetAliasInputKeyNameByIndex(AliasIndex,OverridePlatform);
    }
    DECLARE_FUNCTION(execGetAliasInputKeyData)
    {
        P_GET_STRUCT_REF(struct FRawInputKeyEventData,out_InputKeyData);
        P_GET_NAME(DesiredAlias);
        P_GET_BYTE_OPTX(OverridePlatform,3);
        P_FINISH;
        *(UBOOL*)Result=this->GetAliasInputKeyData(out_InputKeyData,DesiredAlias,OverridePlatform);
    }
    DECLARE_FUNCTION(execGetAliasInputKeyDataByIndex)
    {
        P_GET_STRUCT_REF(struct FRawInputKeyEventData,out_InputKeyData);
        P_GET_INT(AliasIndex);
        P_GET_BYTE_OPTX(OverridePlatform,3);
        P_FINISH;
        *(UBOOL*)Result=this->GetAliasInputKeyDataByIndex(out_InputKeyData,AliasIndex,OverridePlatform);
    }
    DECLARE_FUNCTION(execFindInputAliasIndex)
    {
        P_GET_NAME(DesiredAlias);
        P_FINISH;
        *(INT*)Result=this->FindInputAliasIndex(DesiredAlias);
    }
    DECLARE_FUNCTION(execHasAliasMappingForPlatform)
    {
        P_GET_NAME(DesiredAlias);
        P_GET_BYTE(DesiredPlatform);
        P_FINISH;
        *(UBOOL*)Result=this->HasAliasMappingForPlatform(DesiredAlias,DesiredPlatform);
    }
    DECLARE_CLASS(UUIDataStore_InputAlias,UUIDataStore_StringBase,0|CLASS_Transient|CLASS_Config,Engine)
    static const TCHAR* StaticConfigName() {return TEXT("Input");}

	/* === UUIDataStore_InputAlias interface === */
	/**
	 * Populates the InputAliasLookupMap based on the elements of the InputAliases array.
	 */
	void InitializeLookupMap();

	/**
	 * @return	the platform that should be used (by default) when retrieving data associated with input aliases
	 */
	EInputPlatformType GetDefaultPlatform() const;

	/* === UUIDataStore interface === */
	/**
	 * Hook for performing any initialization required for this data store.
	 *
	 * This version builds the InputAliasLookupMap based on the elements in the InputAliases array.
	 */
	virtual void InitializeDataStore();


protected:

};

struct FUIMenuInputMap
{
    FName FieldName;
    FName Set;
    FStringNoInit MappedText;

    /** Constructors */
    FUIMenuInputMap() {}
    FUIMenuInputMap(EEventParm)
    {
        appMemzero(this, sizeof(FUIMenuInputMap));
    }
};

class UUIDataStore_StringAliasMap : public UUIDataStore_StringBase
{
public:
    //## BEGIN PROPS UIDataStore_StringAliasMap
    TArrayNoInit<struct FUIMenuInputMap> MenuInputMapArray;
    TMap<FName, TMap<FName, INT> > MenuInputSets;
    INT PlayerIndex;
    //## END PROPS UIDataStore_StringAliasMap

    class ULocalPlayer* GetPlayerOwner() const;
    INT FindMappingWithFieldName(const FString& FieldName=TEXT(""),const FString& SetName=TEXT(""));
    virtual INT GetStringWithFieldName(const FString& FieldName,FString& MappedString);
    DECLARE_FUNCTION(execGetPlayerOwner)
    {
        P_FINISH;
        *(class ULocalPlayer**)Result=this->GetPlayerOwner();
    }
    DECLARE_FUNCTION(execFindMappingWithFieldName)
    {
        P_GET_STR_OPTX(FieldName,TEXT(""));
        P_GET_STR_OPTX(SetName,TEXT(""));
        P_FINISH;
        *(INT*)Result=this->FindMappingWithFieldName(FieldName,SetName);
    }
    DECLARE_FUNCTION(execGetStringWithFieldName)
    {
        P_GET_STR(FieldName);
        P_GET_STR_REF(MappedString);
        P_FINISH;
        *(INT*)Result=this->GetStringWithFieldName(FieldName,MappedString);
    }
    DECLARE_CLASS(UUIDataStore_StringAliasMap,UUIDataStore_StringBase,0|CLASS_Transient|CLASS_Config,Engine)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

	/* === UIDataProvider interface === */
protected:


	/**
	* Called when this data store is added to the data store manager's list of active data stores.
	*
	* @param	PlayerOwner		the player that will be associated with this DataStore.  Only relevant if this data store is
	*							associated with a particular player; NULL if this is a global data store.
	*/
	virtual void OnRegister( class ULocalPlayer* PlayerOwner );
};

struct UIPropertyDataProvider_eventCanSupportComplexPropertyType_Parms
{
    class UProperty* UnsupportedProperty;
    UBOOL ReturnValue;
    UIPropertyDataProvider_eventCanSupportComplexPropertyType_Parms(EEventParm)
    {
    }
};
class UUIPropertyDataProvider : public UUIDataProvider
{
public:
    //## BEGIN PROPS UIPropertyDataProvider
    TArrayNoInit<class UClass*> ComplexPropertyTypes;
    FScriptDelegate __CanSupportComplexPropertyType__Delegate;
    //## END PROPS UIPropertyDataProvider

    UBOOL delegateCanSupportComplexPropertyType(class UProperty* UnsupportedProperty)
    {
        UIPropertyDataProvider_eventCanSupportComplexPropertyType_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.UnsupportedProperty=UnsupportedProperty;
        ProcessDelegate(ENGINE_CanSupportComplexPropertyType,&__CanSupportComplexPropertyType__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_ABSTRACT_CLASS(UUIPropertyDataProvider,UUIDataProvider,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIPropertyDataProvider)
};

class UUIDataProvider_Settings : public UUIPropertyDataProvider
{
public:
    //## BEGIN PROPS UIDataProvider_Settings
    class USettings* Settings;
    BITFIELD bIsAListRow:1;
    SCRIPT_ALIGN;
    //## END PROPS UIDataProvider_Settings

    DECLARE_CLASS(UUIDataProvider_Settings,UUIPropertyDataProvider,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UUIDataProvider_Settings)
};

struct UIResourceDataProvider_eventInitializeProvider_Parms
{
    UBOOL bIsEditor;
    UIResourceDataProvider_eventInitializeProvider_Parms(EEventParm)
    {
    }
};
class UUIResourceDataProvider : public UUIPropertyDataProvider
{
public:
    //## BEGIN PROPS UIResourceDataProvider
    BITFIELD bSkipDuringEnumeration:1;
    SCRIPT_ALIGN;
    //## END PROPS UIResourceDataProvider

    void eventInitializeProvider(UBOOL bIsEditor)
    {
        UIResourceDataProvider_eventInitializeProvider_Parms Parms(EC_EventParm);
        Parms.bIsEditor=bIsEditor ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(ENGINE_InitializeProvider),&Parms);
    }
    DECLARE_ABSTRACT_CLASS(UUIResourceDataProvider,UUIPropertyDataProvider,0|CLASS_Transient|CLASS_Config,Engine)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

    NO_DEFAULT_CONSTRUCTOR(UUIResourceDataProvider)
};

class UUIDataProvider_MenuItem : public UUIResourceDataProvider
{
public:
    //## BEGIN PROPS UIDataProvider_MenuItem
    BYTE OptionType;
    TArrayNoInit<FName> OptionSet;
    FStringNoInit DataStoreMarkup;
    FStringNoInit DescriptionMarkup;
    FName RequiredGameMode;
    FStringNoInit FriendlyName;
    FStringNoInit CustomFriendlyName;
    FStringNoInit Description;
    BITFIELD bEditableCombo:1;
    BITFIELD bNumericCombo:1;
    BITFIELD bKeyboardOrMouseOption:1;
    BITFIELD bOnlineOnly:1;
    BITFIELD bOfflineOnly:1;
    BITFIELD bSearchAllInis:1;
    BITFIELD bRemoveOn360:1;
    BITFIELD bRemoveOnPC:1;
    BITFIELD bRemoveOnPS3:1;
    INT EditBoxMaxLength;
    struct FUIRangeData RangeData;
    TArrayNoInit<FName> SchemaCellFields;
    FStringNoInit IniName;
    //## END PROPS UIDataProvider_MenuItem

    DECLARE_CLASS(UUIDataProvider_MenuItem,UUIResourceDataProvider,0|CLASS_Transient|CLASS_Config,Engine)
    static const TCHAR* StaticConfigName() {return TEXT("UI");}

    NO_DEFAULT_CONSTRUCTOR(UUIDataProvider_MenuItem)
};

struct UIResourceCombinationProvider_eventInitializeProvider_Parms
{
    UBOOL bIsEditor;
    class UUIResourceDataProvider* InStaticResourceProvider;
    class UUIDataProvider_OnlineProfileSettings* InProfileProvider;
    UIResourceCombinationProvider_eventInitializeProvider_Parms(EEventParm)
    {
    }
};
class UUIResourceCombinationProvider : public UUIDataProvider
{
public:
    //## BEGIN PROPS UIResourceCombinationProvider
    class UUIResourceDataProvider* StaticDataProvider;
    class UUIDataProvider_OnlineProfileSettings* ProfileProvider;
    //## END PROPS UIResourceCombinationProvider

    void eventInitializeProvider(UBOOL bIsEditor,class UUIResourceDataProvider* InStaticResourceProvider,class UUIDataProvider_OnlineProfileSettings* InProfileProvider)
    {
        UIResourceCombinationProvider_eventInitializeProvider_Parms Parms(EC_EventParm);
        Parms.bIsEditor=bIsEditor ? FIRST_BITFIELD : FALSE;
        Parms.InStaticResourceProvider=InStaticResourceProvider;
        Parms.InProfileProvider=InProfileProvider;
        ProcessEvent(FindFunctionChecked(ENGINE_InitializeProvider),&Parms);
    }
    DECLARE_ABSTRACT_CLASS(UUIResourceCombinationProvider,UUIDataProvider,0|CLASS_Transient|CLASS_Config,Engine)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

    NO_DEFAULT_CONSTRUCTOR(UUIResourceCombinationProvider)
};

struct GameUISceneClient_eventPauseGame_Parms
{
    UBOOL bDesiredPauseState;
    INT PlayerIndex;
    GameUISceneClient_eventPauseGame_Parms(EEventParm)
    {
    }
};
class UGameUISceneClient : public UUISceneClient
{
public:
    //## BEGIN PROPS GameUISceneClient
    FLOAT LatestDeltaTime;
    DOUBLE DoubleClickStartTime;
    FIntPoint DoubleClickStartPosition;
    TMap<INT,TArray<FName> > InitialPressedKeys;
    BITFIELD bUpdateInputProcessingStatus:1;
    BITFIELD bUpdateSceneViewportSizes:1;
    BITFIELD bEnableDebugInput:1;
    BITFIELD bRenderDebugInfo:1;
    BITFIELD bCaptureUnprocessedInput:1;
    TArrayNoInit<FName> NavAliases;
    TArrayNoInit<FName> AxisInputKeys;
    //## END PROPS GameUISceneClient

    BYTE GetCurrentNetMode();
    void RequestInputProcessingUpdate();
    UBOOL CanUnpauseInternalUI();
    DECLARE_FUNCTION(execGetCurrentNetMode)
    {
        P_FINISH;
        *(BYTE*)Result=this->GetCurrentNetMode();
    }
    DECLARE_FUNCTION(execRequestInputProcessingUpdate)
    {
        P_FINISH;
        this->RequestInputProcessingUpdate();
    }
    DECLARE_FUNCTION(execCanUnpauseInternalUI)
    {
        P_FINISH;
        *(UBOOL*)Result=this->CanUnpauseInternalUI();
    }
    void eventPauseGame(UBOOL bDesiredPauseState,INT PlayerIndex=0)
    {
        GameUISceneClient_eventPauseGame_Parms Parms(EC_EventParm);
        Parms.bDesiredPauseState=bDesiredPauseState ? FIRST_BITFIELD : FALSE;
        Parms.PlayerIndex=PlayerIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_PauseGame),&Parms);
    }
    DECLARE_CLASS(UGameUISceneClient,UUISceneClient,0|CLASS_Transient|CLASS_Config,Engine)
    DECLARE_WITHIN(UUIInteraction)
    static const TCHAR* StaticConfigName() {return TEXT("UI");}

	/* =======================================
		FExec interface
	======================================= */
	virtual UBOOL Exec(const TCHAR* Cmd,FOutputDevice& Ar);

	/* =======================================
		UUISceneClient interface
	======================================= */
	/**
	 * Called when the UI controller receives a CALLBACK_ViewportResized notification.
	 *
	 * @param	SceneViewport	the viewport that was resized
	 */
	virtual void NotifyViewportResized( FViewport* SceneViewport );

	/**
	 * Process an input event which interacts with the in-game scene debugging overlays
	 *
	 * @param	Key		the key that was pressed
	 * @param	Event	the type of event received
	 *
	 * @return	TRUE if the input event was processed; FALSE otherwise.
	 */
	UBOOL DebugInputKey( FName Key, EInputEvent Event );

	/**
	 * Check a key event received by the viewport.
	 *
	 * @param	Viewport - The viewport which the key event is from.
	 * @param	ControllerId - The controller which the key event is from.
	 * @param	Key - The name of the key which an event occured for.
	 * @param	Event - The type of event which occured.
	 * @param	AmountDepressed - For analog keys, the depression percent.
	 * @param	bGamepad - input came from gamepad (ie xbox controller)
	 *
	 * @return	True to consume the key event, false to pass it on.
	 */
	virtual UBOOL InputKey(INT ControllerId,FName Key,EInputEvent Event,FLOAT AmountDepressed=1.f,UBOOL bGamepad=FALSE);

	/**
	 * Check an axis movement received by the viewport.
	 *
	 * @param	Viewport - The viewport which the axis movement is from.
	 * @param	ControllerId - The controller which the axis movement is from.
	 * @param	Key - The name of the axis which moved.
	 * @param	Delta - The axis movement delta.
	 * @param	DeltaTime - The time since the last axis update.
	 *
	 * @return	True to consume the axis movement, false to pass it on.
	 */
	virtual UBOOL InputAxis(INT ControllerId,FName Key,FLOAT Delta,FLOAT DeltaTime, UBOOL bGamepad=FALSE);

	/**
	 * Check a character input received by the viewport.
	 *
	 * @param	Viewport - The viewport which the axis movement is from.
	 * @param	ControllerId - The controller which the axis movement is from.
	 * @param	Character - The character.
	 *
	 * @return	True to consume the character, false to pass it on.
	 */
	virtual UBOOL InputChar(INT ControllerId,TCHAR Character);

	/* =======================================
		UGameUISceneClient interface
	======================================= */

	/**
	 * Resets the time and mouse position values used for simulating double-click events to the current value or invalid values.
	 */
	void ResetDoubleClickTracking( UBOOL bClearValues );

	/**
	 * Checks the current time and mouse position to determine whether a double-click event should be simulated.
	 */
	UBOOL ShouldSimulateDoubleClick() const;

	/**
	 * Determines whether the any active scenes process axis input.
	 *
	 * @param	bProcessAxisInput	receives the flags for whether axis input is needed for each player.
	 */
	virtual void CheckAxisInputSupport( UBOOL* bProcessAxisInput[UCONST_MAX_SUPPORTED_GAMEPADS] ) const;

	/**
	 * Called once a frame to update the UI's state.
	 *
	 * @param	DeltaTime - The time since the last frame.
	 */
	virtual void Tick(FLOAT DeltaTime);

private:

	#if WITH_GFx
	/**
	 * @return	TRUE if the scene meets the conditions defined by the bitmask specified.
	 */
	UBOOL GFxMovieMatchesFilter( DWORD FilterFlagMask, class FGFxMovie* TestMovie ) const;
	#endif //WITH_GFx
public:
	/**
	 * Returns true if there is an unhidden fullscreen UI active
	 *
	 * @param	Flags	modifies the logic which determines whether the UI is active
	 *
	 * @return TRUE if the UI is currently active
	 */
	virtual UBOOL IsUIActive( DWORD Flags=SCENEFILTER_Any ) const;

protected:

	/**
	 * Updates the value of UIInteraction.bProcessingInput to reflect whether any scenes are capable of processing input.
	 */
	void UpdateInputProcessingStatus();

	/**
	 * Clears the arrays of pressed keys for all local players in the game; used when the UI begins processing input.  Also
	 * updates the InitialPressedKeys maps for all players.
	 */
	void FlushPlayerInput();

public:
	/**
	 * Ensures that the game's paused state is appropriate considering the state of the UI.  If any scenes are active which require
	 * the game to be paused, pauses the game...otherwise, unpauses the game.
	 *
	 * @param	PlayerIndex		the index of the player that owns the scene that was just added or removed, or 0 if the scene didn't have
	 *							a player owner.
	 */
	virtual void UpdatePausedState( INT PlayerIndex );
};

#undef DECLARE_CLASS
#undef DECLARE_CASTED_CLASS
#undef DECLARE_ABSTRACT_CLASS
#undef DECLARE_ABSTRACT_CASTED_CLASS
#endif // !INCLUDED_ENGINE_UIPRIVATE_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UUIDataProvider_PlayerAchievements,-1,execGetMaxTotalGamerScore);
AUTOGENERATE_FUNCTION(UUIDataProvider_PlayerAchievements,-1,execGetTotalGamerScore);
AUTOGENERATE_FUNCTION(UUIDataStore_DynamicResource,-1,execOnLoginChange);
AUTOGENERATE_FUNCTION(UUIDataStore_DynamicResource,-1,execGetResourceProviders);
AUTOGENERATE_FUNCTION(UUIDataStore_DynamicResource,-1,execFindProviderTypeIndex);
AUTOGENERATE_FUNCTION(UUIDataStore_GameResource,-1,execGetResourceProviders);
AUTOGENERATE_FUNCTION(UUIDataStore_GameResource,-1,execFindProviderTypeIndex);
AUTOGENERATE_FUNCTION(UUIDataStore_OnlineStats,-1,execSortResultsByRank);
AUTOGENERATE_FUNCTION(UUIDataStore_InputAlias,-1,execHasAliasMappingForPlatform);
AUTOGENERATE_FUNCTION(UUIDataStore_InputAlias,-1,execFindInputAliasIndex);
AUTOGENERATE_FUNCTION(UUIDataStore_InputAlias,-1,execGetAliasInputKeyDataByIndex);
AUTOGENERATE_FUNCTION(UUIDataStore_InputAlias,-1,execGetAliasInputKeyData);
AUTOGENERATE_FUNCTION(UUIDataStore_InputAlias,-1,execGetAliasInputKeyNameByIndex);
AUTOGENERATE_FUNCTION(UUIDataStore_InputAlias,-1,execGetAliasInputKeyName);
AUTOGENERATE_FUNCTION(UUIDataStore_InputAlias,-1,execGetAliasFontMarkupByIndex);
AUTOGENERATE_FUNCTION(UUIDataStore_InputAlias,-1,execGetAliasFontMarkup);
AUTOGENERATE_FUNCTION(UUIDataStore_StringAliasMap,-1,execGetStringWithFieldName);
AUTOGENERATE_FUNCTION(UUIDataStore_StringAliasMap,-1,execFindMappingWithFieldName);
AUTOGENERATE_FUNCTION(UUIDataStore_StringAliasMap,-1,execGetPlayerOwner);
AUTOGENERATE_FUNCTION(UGameUISceneClient,-1,execCanUnpauseInternalUI);
AUTOGENERATE_FUNCTION(UGameUISceneClient,-1,execRequestInputProcessingUpdate);
AUTOGENERATE_FUNCTION(UGameUISceneClient,-1,execGetCurrentNetMode);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef ENGINE_UIPRIVATE_NATIVE_DEFS
#define ENGINE_UIPRIVATE_NATIVE_DEFS

#define AUTO_INITIALIZE_REGISTRANTS_ENGINE_UIPRIVATE \
	UUIDataStoreSubscriber::StaticClass(); \
	UUIDataStorePublisher::StaticClass(); \
	UUIDataProvider::StaticClass(); \
	UUIDataProvider_OnlinePlayerDataBase::StaticClass(); \
	UUIDataProvider_OnlineFriendMessages::StaticClass(); \
	UUIDataProvider_OnlineFriends::StaticClass(); \
	UUIDataProvider_OnlinePartyChatList::StaticClass(); \
	UUIDataProvider_OnlinePlayerStorage::StaticClass(); \
	UUIDataProvider_OnlineProfileSettings::StaticClass(); \
	UUIDataProvider_PlayerAchievements::StaticClass(); \
	GNativeLookupFuncs.Set(FName("UIDataProvider_PlayerAchievements"), GEngineUUIDataProvider_PlayerAchievementsNatives); \
	UUIDataProvider_OnlinePlayerStorageArray::StaticClass(); \
	UUIDataProvider_SettingsArray::StaticClass(); \
	UUIDataStore::StaticClass(); \
	UUIDataStore_DynamicResource::StaticClass(); \
	GNativeLookupFuncs.Set(FName("UIDataStore_DynamicResource"), GEngineUUIDataStore_DynamicResourceNatives); \
	UUIDataStore_Fonts::StaticClass(); \
	UUIDataStore_GameResource::StaticClass(); \
	GNativeLookupFuncs.Set(FName("UIDataStore_GameResource"), GEngineUUIDataStore_GameResourceNatives); \
	UUIDataStore_MenuItems::StaticClass(); \
	UUIDataStore_GameState::StaticClass(); \
	UUIDataStore_Registry::StaticClass(); \
	UUIDataStore_Remote::StaticClass(); \
	UUIDataStore_OnlineGameSearch::StaticClass(); \
	UUIDataStore_OnlinePlayerData::StaticClass(); \
	UUIDataStore_OnlineStats::StaticClass(); \
	GNativeLookupFuncs.Set(FName("UIDataStore_OnlineStats"), GEngineUUIDataStore_OnlineStatsNatives); \
	UUIDataStore_Settings::StaticClass(); \
	UUIDataStore_OnlineGameSettings::StaticClass(); \
	UUIDataStore_StringBase::StaticClass(); \
	UUIDataStore_InputAlias::StaticClass(); \
	GNativeLookupFuncs.Set(FName("UIDataStore_InputAlias"), GEngineUUIDataStore_InputAliasNatives); \
	UUIDataStore_StringAliasMap::StaticClass(); \
	GNativeLookupFuncs.Set(FName("UIDataStore_StringAliasMap"), GEngineUUIDataStore_StringAliasMapNatives); \
	UUIPropertyDataProvider::StaticClass(); \
	UUIDataProvider_Settings::StaticClass(); \
	UUIResourceDataProvider::StaticClass(); \
	UUIDataProvider_MenuItem::StaticClass(); \
	UUIResourceCombinationProvider::StaticClass(); \
	UGameUISceneClient::StaticClass(); \
	GNativeLookupFuncs.Set(FName("GameUISceneClient"), GEngineUGameUISceneClientNatives); \

#endif // ENGINE_UIPRIVATE_NATIVE_DEFS

#ifdef NATIVES_ONLY
FNativeFunctionLookup GEngineUUIDataProvider_PlayerAchievementsNatives[] = 
{ 
	MAP_NATIVE(UUIDataProvider_PlayerAchievements, execGetMaxTotalGamerScore)
	MAP_NATIVE(UUIDataProvider_PlayerAchievements, execGetTotalGamerScore)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUUIDataStore_DynamicResourceNatives[] = 
{ 
	MAP_NATIVE(UUIDataStore_DynamicResource, execOnLoginChange)
	MAP_NATIVE(UUIDataStore_DynamicResource, execGetResourceProviders)
	MAP_NATIVE(UUIDataStore_DynamicResource, execFindProviderTypeIndex)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUUIDataStore_GameResourceNatives[] = 
{ 
	MAP_NATIVE(UUIDataStore_GameResource, execGetResourceProviders)
	MAP_NATIVE(UUIDataStore_GameResource, execFindProviderTypeIndex)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUUIDataStore_OnlineStatsNatives[] = 
{ 
	MAP_NATIVE(UUIDataStore_OnlineStats, execSortResultsByRank)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUUIDataStore_InputAliasNatives[] = 
{ 
	MAP_NATIVE(UUIDataStore_InputAlias, execHasAliasMappingForPlatform)
	MAP_NATIVE(UUIDataStore_InputAlias, execFindInputAliasIndex)
	MAP_NATIVE(UUIDataStore_InputAlias, execGetAliasInputKeyDataByIndex)
	MAP_NATIVE(UUIDataStore_InputAlias, execGetAliasInputKeyData)
	MAP_NATIVE(UUIDataStore_InputAlias, execGetAliasInputKeyNameByIndex)
	MAP_NATIVE(UUIDataStore_InputAlias, execGetAliasInputKeyName)
	MAP_NATIVE(UUIDataStore_InputAlias, execGetAliasFontMarkupByIndex)
	MAP_NATIVE(UUIDataStore_InputAlias, execGetAliasFontMarkup)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUUIDataStore_StringAliasMapNatives[] = 
{ 
	MAP_NATIVE(UUIDataStore_StringAliasMap, execGetStringWithFieldName)
	MAP_NATIVE(UUIDataStore_StringAliasMap, execFindMappingWithFieldName)
	MAP_NATIVE(UUIDataStore_StringAliasMap, execGetPlayerOwner)
	{NULL, NULL}
};

FNativeFunctionLookup GEngineUGameUISceneClientNatives[] = 
{ 
	MAP_NATIVE(UGameUISceneClient, execCanUnpauseInternalUI)
	MAP_NATIVE(UGameUISceneClient, execRequestInputProcessingUpdate)
	MAP_NATIVE(UGameUISceneClient, execGetCurrentNetMode)
	{NULL, NULL}
};

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE_NODIE(UUIDataStoreSubscriber)
VERIFY_CLASS_SIZE_NODIE(UUIDataStorePublisher)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_OnlinePlayerDataBase,UIDataProvider_OnlinePlayerDataBase,PlayerControllerId)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_OnlinePlayerDataBase)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_OnlineFriendMessages,UIDataProvider_OnlineFriendMessages,Messages)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_OnlineFriendMessages,UIDataProvider_OnlineFriendMessages,LastInviteFrom)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_OnlineFriendMessages)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_OnlineFriends,UIDataProvider_OnlineFriends,FriendsList)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_OnlineFriends,UIDataProvider_OnlineFriends,BusyText)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_OnlineFriends)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_OnlinePartyChatList,UIDataProvider_OnlinePartyChatList,PartyMembersList)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_OnlinePartyChatList,UIDataProvider_OnlinePartyChatList,IsPlayingThisGameCol)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_OnlinePartyChatList)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_OnlinePlayerStorage,UIDataProvider_OnlinePlayerStorage,Profile)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_OnlinePlayerStorage,UIDataProvider_OnlinePlayerStorage,DeviceStorageSizeNeeded)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_OnlinePlayerStorage)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_OnlineProfileSettings)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_PlayerAchievements,UIDataProvider_PlayerAchievements,Achievements)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_PlayerAchievements)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_OnlinePlayerStorageArray,UIDataProvider_OnlinePlayerStorageArray,PlayerStorage)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_OnlinePlayerStorageArray,UIDataProvider_OnlinePlayerStorageArray,Values)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_OnlinePlayerStorageArray)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_SettingsArray,UIDataProvider_SettingsArray,Settings)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_SettingsArray,UIDataProvider_SettingsArray,Values)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_SettingsArray)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore,UIDataStore,Tag)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore,UIDataStore,__OnDataStoreValueUpdated__Delegate)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_DynamicResource,UIDataStore_DynamicResource,ProfileProvider)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_DynamicResource,UIDataStore_DynamicResource,ResourceProviders)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore_DynamicResource)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore_Fonts)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_GameResource,UIDataStore_GameResource,ElementProviderTypes)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_GameResource,UIDataStore_GameResource,ListElementProviders)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore_GameResource)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_MenuItems,UIDataStore_MenuItems,CurrentGameSettingsTag)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_MenuItems,UIDataStore_MenuItems,DynamicProviders)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore_MenuItems)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_GameState,UIDataStore_GameState,__OnRefreshDataFieldValue__Delegate)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore_GameState)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_Registry,UIDataStore_Registry,RegistryData)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore_Registry)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore_Remote)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_OnlineGameSearch,UIDataStore_OnlineGameSearch,SearchResultsName)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_OnlineGameSearch,UIDataStore_OnlineGameSearch,ActiveSearchIndex)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore_OnlineGameSearch)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_OnlinePlayerData,UIDataStore_OnlinePlayerData,FriendsProvider)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_OnlinePlayerData,UIDataStore_OnlinePlayerData,PartyChatProvider)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore_OnlinePlayerData)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_OnlineStats,UIDataStore_OnlineStats,StatsReadClasses)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_OnlineStats,UIDataStore_OnlineStats,PlayerInterface)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore_OnlineStats)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore_Settings)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_OnlineGameSettings,UIDataStore_OnlineGameSettings,GameSettingsCfgList)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_OnlineGameSettings,UIDataStore_OnlineGameSettings,SelectedIndex)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore_OnlineGameSettings)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore_StringBase)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_InputAlias,UIDataStore_InputAlias,InputAliases)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_InputAlias,UIDataStore_InputAlias,InputAliasLookupMap)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore_InputAlias)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_StringAliasMap,UIDataStore_StringAliasMap,MenuInputMapArray)
VERIFY_CLASS_OFFSET_NODIE(UUIDataStore_StringAliasMap,UIDataStore_StringAliasMap,PlayerIndex)
VERIFY_CLASS_SIZE_NODIE(UUIDataStore_StringAliasMap)
VERIFY_CLASS_OFFSET_NODIE(UUIPropertyDataProvider,UIPropertyDataProvider,ComplexPropertyTypes)
VERIFY_CLASS_OFFSET_NODIE(UUIPropertyDataProvider,UIPropertyDataProvider,__CanSupportComplexPropertyType__Delegate)
VERIFY_CLASS_SIZE_NODIE(UUIPropertyDataProvider)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_Settings,UIDataProvider_Settings,Settings)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_Settings)
VERIFY_CLASS_SIZE_NODIE(UUIResourceDataProvider)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_MenuItem,UIDataProvider_MenuItem,OptionType)
VERIFY_CLASS_OFFSET_NODIE(UUIDataProvider_MenuItem,UIDataProvider_MenuItem,IniName)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_MenuItem)
VERIFY_CLASS_OFFSET_NODIE(UUIResourceCombinationProvider,UIResourceCombinationProvider,StaticDataProvider)
VERIFY_CLASS_OFFSET_NODIE(UUIResourceCombinationProvider,UIResourceCombinationProvider,ProfileProvider)
VERIFY_CLASS_SIZE_NODIE(UUIResourceCombinationProvider)
VERIFY_CLASS_OFFSET_NODIE(UGameUISceneClient,GameUISceneClient,LatestDeltaTime)
VERIFY_CLASS_OFFSET_NODIE(UGameUISceneClient,GameUISceneClient,AxisInputKeys)
VERIFY_CLASS_SIZE_NODIE(UGameUISceneClient)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
