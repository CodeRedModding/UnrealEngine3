/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#include "WinDrvNames.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_WINDRV_ENUMS
#define INCLUDED_WINDRV_ENUMS 1


#endif // !INCLUDED_WINDRV_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_WINDRV_CLASSES
#define INCLUDED_WINDRV_CLASSES 1
#define ENABLE_DECLARECLASS_MACRO 1
#include "UnObjBas.h"
#undef ENABLE_DECLARECLASS_MACRO

struct FacebookWindows_eventRequestFacebookFriends_Parms
{
    FacebookWindows_eventRequestFacebookFriends_Parms(EEventParm)
    {
    }
};
struct FacebookWindows_eventRequestFacebookMeInfo_Parms
{
    FacebookWindows_eventRequestFacebookMeInfo_Parms(EEventParm)
    {
    }
};
class UFacebookWindows : public UFacebookIntegration, public FTickableObject
{
public:
    //## BEGIN PROPS FacebookWindows
private:
    void* ChildProcHandle;
public:
    //## END PROPS FacebookWindows

    virtual UBOOL Init();
    virtual UBOOL Authorize();
    virtual UBOOL IsAuthorized();
    virtual void Disconnect();
    virtual void ProcessFacebookRequest(const FString& Payload,INT ResponseCode);
    DECLARE_FUNCTION(execProcessFacebookRequest)
    {
        P_GET_STR(Payload);
        P_GET_INT(ResponseCode);
        P_FINISH;
        this->ProcessFacebookRequest(Payload,ResponseCode);
    }
    void eventRequestFacebookFriends()
    {
        ProcessEvent(FindFunctionChecked(WINDRV_RequestFacebookFriends),NULL);
    }
    void eventRequestFacebookMeInfo()
    {
        ProcessEvent(FindFunctionChecked(WINDRV_RequestFacebookMeInfo),NULL);
    }
    DECLARE_CLASS(UFacebookWindows,UFacebookIntegration,0|CLASS_Transient|CLASS_Config,WinDrv)
    #include "UFacebookWindows.h"
};

class UHttpRequestWindows : public UHttpRequestInterface
{
public:
    //## BEGIN PROPS HttpRequestWindows
private:
    class FHttpRequestWinInet* Request;
    FStringNoInit RequestVerb;
    class FURLWinInet* RequestURL;
    TArrayNoInit<BYTE> Payload;
public:
    //## END PROPS HttpRequestWindows

    virtual FString GetHeader(const FString& HeaderName);
    virtual TArray<FString> GetHeaders();
    virtual FString GetURLParameter(const FString& ParameterName);
    virtual FString GetContentType();
    virtual INT GetContentLength();
    virtual FString GetURL();
    virtual void GetContent(TArray<BYTE>& Content);
    virtual FString GetVerb();
    virtual class UHttpRequestInterface* SetVerb(const FString& Verb);
    virtual class UHttpRequestInterface* SetURL(const FString& URL);
    virtual class UHttpRequestInterface* SetContent(const TArray<BYTE>& ContentPayload);
    virtual class UHttpRequestInterface* SetContentAsString(const FString& ContentString);
    virtual class UHttpRequestInterface* SetHeader(const FString& HeaderName,const FString& HeaderValue);
    virtual UBOOL ProcessRequest();
    DECLARE_CLASS(UHttpRequestWindows,UHttpRequestInterface,0,WinDrv)
    #include "UHttpRequestWindows.h"
};

class UHttpResponseWindows : public UHttpResponseInterface
{
public:
    //## BEGIN PROPS HttpResponseWindows
private:
    class FHttpResponseWinInet* Response;
    TArrayNoInit<BYTE> Payload;
public:
    //## END PROPS HttpResponseWindows

    virtual FString GetHeader(const FString& HeaderName);
    virtual TArray<FString> GetHeaders();
    virtual FString GetURLParameter(const FString& ParameterName);
    virtual FString GetContentType();
    virtual INT GetContentLength();
    virtual FString GetURL();
    virtual void GetContent(TArray<BYTE>& Content);
    virtual FString GetContentAsString();
    virtual INT GetResponseCode();
    DECLARE_CLASS(UHttpResponseWindows,UHttpResponseInterface,0,WinDrv)
    #include "UHttpResponseWindows.h"
};

#undef DECLARE_CLASS
#undef DECLARE_CASTED_CLASS
#undef DECLARE_ABSTRACT_CLASS
#undef DECLARE_ABSTRACT_CASTED_CLASS
#endif // !INCLUDED_WINDRV_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UFacebookWindows,-1,execProcessFacebookRequest);
AUTOGENERATE_FUNCTION(UFacebookWindows,-1,execDisconnect);
AUTOGENERATE_FUNCTION(UFacebookWindows,-1,execIsAuthorized);
AUTOGENERATE_FUNCTION(UFacebookWindows,-1,execAuthorize);
AUTOGENERATE_FUNCTION(UFacebookWindows,-1,execInit);
AUTOGENERATE_FUNCTION(UHttpRequestWindows,-1,execProcessRequest);
AUTOGENERATE_FUNCTION(UHttpRequestWindows,-1,execSetHeader);
AUTOGENERATE_FUNCTION(UHttpRequestWindows,-1,execSetContentAsString);
AUTOGENERATE_FUNCTION(UHttpRequestWindows,-1,execSetContent);
AUTOGENERATE_FUNCTION(UHttpRequestWindows,-1,execSetURL);
AUTOGENERATE_FUNCTION(UHttpRequestWindows,-1,execSetVerb);
AUTOGENERATE_FUNCTION(UHttpRequestWindows,-1,execGetVerb);
AUTOGENERATE_FUNCTION(UHttpRequestWindows,-1,execGetContent);
AUTOGENERATE_FUNCTION(UHttpRequestWindows,-1,execGetURL);
AUTOGENERATE_FUNCTION(UHttpRequestWindows,-1,execGetContentLength);
AUTOGENERATE_FUNCTION(UHttpRequestWindows,-1,execGetContentType);
AUTOGENERATE_FUNCTION(UHttpRequestWindows,-1,execGetURLParameter);
AUTOGENERATE_FUNCTION(UHttpRequestWindows,-1,execGetHeaders);
AUTOGENERATE_FUNCTION(UHttpRequestWindows,-1,execGetHeader);
AUTOGENERATE_FUNCTION(UHttpResponseWindows,-1,execGetResponseCode);
AUTOGENERATE_FUNCTION(UHttpResponseWindows,-1,execGetContentAsString);
AUTOGENERATE_FUNCTION(UHttpResponseWindows,-1,execGetContent);
AUTOGENERATE_FUNCTION(UHttpResponseWindows,-1,execGetURL);
AUTOGENERATE_FUNCTION(UHttpResponseWindows,-1,execGetContentLength);
AUTOGENERATE_FUNCTION(UHttpResponseWindows,-1,execGetContentType);
AUTOGENERATE_FUNCTION(UHttpResponseWindows,-1,execGetURLParameter);
AUTOGENERATE_FUNCTION(UHttpResponseWindows,-1,execGetHeaders);
AUTOGENERATE_FUNCTION(UHttpResponseWindows,-1,execGetHeader);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef WINDRV_NATIVE_DEFS
#define WINDRV_NATIVE_DEFS

#define AUTO_INITIALIZE_REGISTRANTS_WINDRV \
	UFacebookWindows::StaticClass(); \
	GNativeLookupFuncs.Set(FName("FacebookWindows"), GWinDrvUFacebookWindowsNatives); \
	UHttpRequestWindows::StaticClass(); \
	GNativeLookupFuncs.Set(FName("HttpRequestWindows"), GWinDrvUHttpRequestWindowsNatives); \
	UHttpResponseWindows::StaticClass(); \
	GNativeLookupFuncs.Set(FName("HttpResponseWindows"), GWinDrvUHttpResponseWindowsNatives); \
	USwrveAnalyticsWindows::StaticClass(); \
	UWindowsClient::StaticClass(); \
	UXnaForceFeedbackManager::StaticClass(); \

#endif // WINDRV_NATIVE_DEFS

#ifdef NATIVES_ONLY
FNativeFunctionLookup GWinDrvUFacebookWindowsNatives[] = 
{ 
	MAP_NATIVE(UFacebookWindows, execProcessFacebookRequest)
	MAP_NATIVE(UFacebookWindows, execDisconnect)
	MAP_NATIVE(UFacebookWindows, execIsAuthorized)
	MAP_NATIVE(UFacebookWindows, execAuthorize)
	MAP_NATIVE(UFacebookWindows, execInit)
	{NULL, NULL}
};

FNativeFunctionLookup GWinDrvUHttpRequestWindowsNatives[] = 
{ 
	MAP_NATIVE(UHttpRequestWindows, execProcessRequest)
	MAP_NATIVE(UHttpRequestWindows, execSetHeader)
	MAP_NATIVE(UHttpRequestWindows, execSetContentAsString)
	MAP_NATIVE(UHttpRequestWindows, execSetContent)
	MAP_NATIVE(UHttpRequestWindows, execSetURL)
	MAP_NATIVE(UHttpRequestWindows, execSetVerb)
	MAP_NATIVE(UHttpRequestWindows, execGetVerb)
	MAP_NATIVE(UHttpRequestWindows, execGetContent)
	MAP_NATIVE(UHttpRequestWindows, execGetURL)
	MAP_NATIVE(UHttpRequestWindows, execGetContentLength)
	MAP_NATIVE(UHttpRequestWindows, execGetContentType)
	MAP_NATIVE(UHttpRequestWindows, execGetURLParameter)
	MAP_NATIVE(UHttpRequestWindows, execGetHeaders)
	MAP_NATIVE(UHttpRequestWindows, execGetHeader)
	{NULL, NULL}
};

FNativeFunctionLookup GWinDrvUHttpResponseWindowsNatives[] = 
{ 
	MAP_NATIVE(UHttpResponseWindows, execGetResponseCode)
	MAP_NATIVE(UHttpResponseWindows, execGetContentAsString)
	MAP_NATIVE(UHttpResponseWindows, execGetContent)
	MAP_NATIVE(UHttpResponseWindows, execGetURL)
	MAP_NATIVE(UHttpResponseWindows, execGetContentLength)
	MAP_NATIVE(UHttpResponseWindows, execGetContentType)
	MAP_NATIVE(UHttpResponseWindows, execGetURLParameter)
	MAP_NATIVE(UHttpResponseWindows, execGetHeaders)
	MAP_NATIVE(UHttpResponseWindows, execGetHeader)
	{NULL, NULL}
};

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(UFacebookWindows,FacebookWindows,ChildProcHandle)
VERIFY_CLASS_SIZE_NODIE(UFacebookWindows)
VERIFY_CLASS_OFFSET_NODIE(UHttpRequestWindows,HttpRequestWindows,Request)
VERIFY_CLASS_OFFSET_NODIE(UHttpRequestWindows,HttpRequestWindows,Payload)
VERIFY_CLASS_SIZE_NODIE(UHttpRequestWindows)
VERIFY_CLASS_OFFSET_NODIE(UHttpResponseWindows,HttpResponseWindows,Response)
VERIFY_CLASS_OFFSET_NODIE(UHttpResponseWindows,HttpResponseWindows,Payload)
VERIFY_CLASS_SIZE_NODIE(UHttpResponseWindows)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
