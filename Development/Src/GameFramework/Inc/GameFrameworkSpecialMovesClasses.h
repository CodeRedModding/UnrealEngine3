/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#include "GameFrameworkNames.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_GAMEFRAMEWORK_SPECIALMOVES_ENUMS
#define INCLUDED_GAMEFRAMEWORK_SPECIALMOVES_ENUMS 1


#endif // !INCLUDED_GAMEFRAMEWORK_SPECIALMOVES_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_GAMEFRAMEWORK_SPECIALMOVES_CLASSES
#define INCLUDED_GAMEFRAMEWORK_SPECIALMOVES_CLASSES 1
#define ENABLE_DECLARECLASS_MACRO 1
#include "UnObjBas.h"
#undef ENABLE_DECLARECLASS_MACRO

struct GameSpecialMove_eventReachedPrecisePosition_Parms
{
    GameSpecialMove_eventReachedPrecisePosition_Parms(EEventParm)
    {
    }
};
class UGameSpecialMove : public UObject
{
public:
    //## BEGIN PROPS GameSpecialMove
    class AGamePawn* PawnOwner;
    FName Handle;
    FLOAT LastCanDoSpecialMoveTime;
    BITFIELD bLastCanDoSpecialMove:1;
    BITFIELD bReachPreciseDestination:1;
    BITFIELD bReachedPreciseDestination:1;
    BITFIELD bReachPreciseRotation:1;
    BITFIELD bReachedPreciseRotation:1;
    BITFIELD bForcePrecisePosition:1;
    SCRIPT_ALIGN;
    FVector PreciseDestination;
    class AActor* PreciseDestBase;
    FVector PreciseDestRelOffset;
    FLOAT PreciseRotationInterpolationTime;
    FRotator PreciseRotation;
    //## END PROPS GameSpecialMove

    void SetReachPreciseDestination(FVector DestinationToReach,UBOOL bCancel=FALSE);
    void SetFacePreciseRotation(FRotator RotationToFace,FLOAT InterpolationTime);
    void ResetFacePreciseRotation();
    void ForcePawnRotation(class APawn* P,FRotator NewRotation);
    FVector WorldToRelativeOffset(FRotator InRotation,FVector WorldSpaceOffset) const;
    FVector RelativeToWorldOffset(FRotator InRotation,FVector RelativeSpaceOffset) const;
    DECLARE_FUNCTION(execSetReachPreciseDestination)
    {
        P_GET_STRUCT(FVector,DestinationToReach);
        P_GET_UBOOL_OPTX(bCancel,FALSE);
        P_FINISH;
        this->SetReachPreciseDestination(DestinationToReach,bCancel);
    }
    DECLARE_FUNCTION(execSetFacePreciseRotation)
    {
        P_GET_STRUCT(FRotator,RotationToFace);
        P_GET_FLOAT(InterpolationTime);
        P_FINISH;
        this->SetFacePreciseRotation(RotationToFace,InterpolationTime);
    }
    DECLARE_FUNCTION(execResetFacePreciseRotation)
    {
        P_FINISH;
        this->ResetFacePreciseRotation();
    }
    DECLARE_FUNCTION(execForcePawnRotation)
    {
        P_GET_OBJECT(APawn,P);
        P_GET_STRUCT(FRotator,NewRotation);
        P_FINISH;
        this->ForcePawnRotation(P,NewRotation);
    }
    DECLARE_FUNCTION(execWorldToRelativeOffset)
    {
        P_GET_STRUCT(FRotator,InRotation);
        P_GET_STRUCT(FVector,WorldSpaceOffset);
        P_FINISH;
        *(FVector*)Result=this->WorldToRelativeOffset(InRotation,WorldSpaceOffset);
    }
    DECLARE_FUNCTION(execRelativeToWorldOffset)
    {
        P_GET_STRUCT(FRotator,InRotation);
        P_GET_STRUCT(FVector,RelativeSpaceOffset);
        P_FINISH;
        *(FVector*)Result=this->RelativeToWorldOffset(InRotation,RelativeSpaceOffset);
    }
    void eventReachedPrecisePosition()
    {
        ProcessEvent(FindFunctionChecked(GAMEFRAMEWORK_ReachedPrecisePosition),NULL);
    }
    DECLARE_ABSTRACT_CLASS(UGameSpecialMove,UObject,0,GameFramework)
    static const TCHAR* StaticConfigName() {return TEXT("Pawn");}

	virtual void PrePerformPhysics(FLOAT DeltaTime);
	virtual void PostProcessPhysics(FLOAT DeltaTime);
	virtual void TickSpecialMove(FLOAT DeltaTime);
};

#undef DECLARE_CLASS
#undef DECLARE_CASTED_CLASS
#undef DECLARE_ABSTRACT_CLASS
#undef DECLARE_ABSTRACT_CASTED_CLASS
#endif // !INCLUDED_GAMEFRAMEWORK_SPECIALMOVES_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UGameSpecialMove,-1,execRelativeToWorldOffset);
AUTOGENERATE_FUNCTION(UGameSpecialMove,-1,execWorldToRelativeOffset);
AUTOGENERATE_FUNCTION(UGameSpecialMove,-1,execForcePawnRotation);
AUTOGENERATE_FUNCTION(UGameSpecialMove,-1,execResetFacePreciseRotation);
AUTOGENERATE_FUNCTION(UGameSpecialMove,-1,execSetFacePreciseRotation);
AUTOGENERATE_FUNCTION(UGameSpecialMove,-1,execSetReachPreciseDestination);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef GAMEFRAMEWORK_SPECIALMOVES_NATIVE_DEFS
#define GAMEFRAMEWORK_SPECIALMOVES_NATIVE_DEFS

#define AUTO_INITIALIZE_REGISTRANTS_GAMEFRAMEWORK_SPECIALMOVES \
	UGameSpecialMove::StaticClass(); \
	GNativeLookupFuncs.Set(FName("GameSpecialMove"), GGameFrameworkUGameSpecialMoveNatives); \

#endif // GAMEFRAMEWORK_SPECIALMOVES_NATIVE_DEFS

#ifdef NATIVES_ONLY
FNativeFunctionLookup GGameFrameworkUGameSpecialMoveNatives[] = 
{ 
	MAP_NATIVE(UGameSpecialMove, execRelativeToWorldOffset)
	MAP_NATIVE(UGameSpecialMove, execWorldToRelativeOffset)
	MAP_NATIVE(UGameSpecialMove, execForcePawnRotation)
	MAP_NATIVE(UGameSpecialMove, execResetFacePreciseRotation)
	MAP_NATIVE(UGameSpecialMove, execSetFacePreciseRotation)
	MAP_NATIVE(UGameSpecialMove, execSetReachPreciseDestination)
	{NULL, NULL}
};

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(UGameSpecialMove,GameSpecialMove,PawnOwner)
VERIFY_CLASS_OFFSET_NODIE(UGameSpecialMove,GameSpecialMove,PreciseRotation)
VERIFY_CLASS_SIZE_NODIE(UGameSpecialMove)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
