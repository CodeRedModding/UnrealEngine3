/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#include "GameFrameworkNames.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_GAMEFRAMEWORK_ANIM_ENUMS
#define INCLUDED_GAMEFRAMEWORK_ANIM_ENUMS 1

enum ERecoilStart
{
    ERS_Zero                =0,
    ERS_Random              =1,
    ERS_MAX                 =2,
};
#define FOREACH_ENUM_ERECOILSTART(op) \
    op(ERS_Zero) \
    op(ERS_Random) 

#endif // !INCLUDED_GAMEFRAMEWORK_ANIM_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_GAMEFRAMEWORK_ANIM_CLASSES
#define INCLUDED_GAMEFRAMEWORK_ANIM_CLASSES 1
#define ENABLE_DECLARECLASS_MACRO 1
#include "UnObjBas.h"
#undef ENABLE_DECLARECLASS_MACRO

struct FRecoilParams
{
    MS_ALIGN(4) BYTE X GCC_ALIGN(4); // Extra alignment flags needed because all properties are bytes
    BYTE Y;
    BYTE Z;
    BYTE Padding;
    SCRIPT_ALIGN;

    /** Constructors */
    FRecoilParams() {}
    FRecoilParams(EEventParm)
    {
        appMemzero(this, sizeof(FRecoilParams));
    }
};

struct FRecoilDef
{
    FLOAT TimeToGo;
    FLOAT TimeDuration;
    FVector RotAmplitude;
    FVector RotFrequency;
    FVector RotSinOffset;
    struct FRecoilParams RotParams;
    FRotator RotOffset;
    FVector LocAmplitude;
    FVector LocFrequency;
    FVector LocSinOffset;
    struct FRecoilParams LocParams;
    FVector LocOffset;

    /** Constructors */
    FRecoilDef() {}
    FRecoilDef(EEventParm)
    {
        appMemzero(this, sizeof(FRecoilDef));
    }
};

class UGameSkelCtrl_Recoil : public USkelControlBase
{
public:
    //## BEGIN PROPS GameSkelCtrl_Recoil
    BITFIELD bBoneSpaceRecoil:1;
    BITFIELD bPlayRecoil:1;
    BITFIELD bOldPlayRecoil:1;
    BITFIELD bApplyControl:1;
    SCRIPT_ALIGN;
    struct FRecoilDef Recoil;
    FVector2D Aim;
    //## END PROPS GameSkelCtrl_Recoil

    DECLARE_CLASS(UGameSkelCtrl_Recoil,USkelControlBase,0,GameFramework)
	/** Pull aim information from Pawn */
	virtual FVector2D GetAim(USkeletalMeshComponent* InSkelComponent);

	/** Is skeleton currently mirrored */
	virtual UBOOL IsMirrored(USkeletalMeshComponent* InSkelComponent);

	// USkelControlBase interface
	virtual void TickSkelControl(FLOAT DeltaSeconds, USkeletalMeshComponent* SkelComp);
	virtual void GetAffectedBones(INT BoneIndex, USkeletalMeshComponent* SkelComp, TArray<INT>& OutBoneIndices);
	virtual void CalculateNewBoneTransforms(INT BoneIndex, USkeletalMeshComponent* SkelComp, TArray<FBoneAtom>& OutBoneTransforms);
};

#undef DECLARE_CLASS
#undef DECLARE_CASTED_CLASS
#undef DECLARE_ABSTRACT_CLASS
#undef DECLARE_ABSTRACT_CASTED_CLASS
#endif // !INCLUDED_GAMEFRAMEWORK_ANIM_CLASSES
#endif // !NAMES_ONLY


#ifndef NAMES_ONLY
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef GAMEFRAMEWORK_ANIM_NATIVE_DEFS
#define GAMEFRAMEWORK_ANIM_NATIVE_DEFS

#define AUTO_INITIALIZE_REGISTRANTS_GAMEFRAMEWORK_ANIM \
	UGameSkelCtrl_Recoil::StaticClass(); \

#endif // GAMEFRAMEWORK_ANIM_NATIVE_DEFS

#ifdef NATIVES_ONLY
#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(UGameSkelCtrl_Recoil,GameSkelCtrl_Recoil,Recoil)
VERIFY_CLASS_OFFSET_NODIE(UGameSkelCtrl_Recoil,GameSkelCtrl_Recoil,Aim)
VERIFY_CLASS_SIZE_NODIE(UGameSkelCtrl_Recoil)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
