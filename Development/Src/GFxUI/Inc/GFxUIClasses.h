/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#include "GFxUINames.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_GFXUI_ENUMS
#define INCLUDED_GFXUI_ENUMS 1

enum GFxAlign
{
    Align_Center            =0,
    Align_TopCenter         =1,
    Align_BottomCenter      =2,
    Align_CenterLeft        =3,
    Align_CenterRight       =4,
    Align_TopLeft           =5,
    Align_TopRight          =6,
    Align_BottomLeft        =7,
    Align_BottomRight       =8,
    Align_MAX               =9,
};
#define FOREACH_ENUM_GFXALIGN(op) \
    op(Align_Center) \
    op(Align_TopCenter) \
    op(Align_BottomCenter) \
    op(Align_CenterLeft) \
    op(Align_CenterRight) \
    op(Align_TopLeft) \
    op(Align_TopRight) \
    op(Align_BottomLeft) \
    op(Align_BottomRight) 
enum GFxScaleMode
{
    SM_NoScale              =0,
    SM_ShowAll              =1,
    SM_ExactFit             =2,
    SM_NoBorder             =3,
    SM_MAX                  =4,
};
#define FOREACH_ENUM_GFXSCALEMODE(op) \
    op(SM_NoScale) \
    op(SM_ShowAll) \
    op(SM_ExactFit) \
    op(SM_NoBorder) 
enum ASType
{
    AS_Undefined            =0,
    AS_Null                 =1,
    AS_Number               =2,
    AS_Int                  =3,
    AS_String               =4,
    AS_Boolean              =5,
    AS_MAX                  =6,
};
#define FOREACH_ENUM_ASTYPE(op) \
    op(AS_Undefined) \
    op(AS_Null) \
    op(AS_Number) \
    op(AS_Int) \
    op(AS_String) \
    op(AS_Boolean) 
enum GFxRenderTextureMode
{
    RTM_Opaque              =0,
    RTM_Alpha               =1,
    RTM_AlphaComposite      =2,
    RTM_MAX                 =3,
};
#define FOREACH_ENUM_GFXRENDERTEXTUREMODE(op) \
    op(RTM_Opaque) \
    op(RTM_Alpha) \
    op(RTM_AlphaComposite) 
enum GFxTimingMode
{
    TM_Game                 =0,
    TM_Real                 =1,
    TM_MAX                  =2,
};
#define FOREACH_ENUM_GFXTIMINGMODE(op) \
    op(TM_Game) \
    op(TM_Real) 
enum FlashTextureRescale
{
    FlashTextureScale_High  =0,
    FlashTextureScale_Low   =1,
    FlashTextureScale_NextLow=2,
    FlashTextureScale_Mult4 =3,
    FlashTextureScale_None  =4,
    FlashTextureScale_MAX   =5,
};
#define FOREACH_ENUM_FLASHTEXTURERESCALE(op) \
    op(FlashTextureScale_High) \
    op(FlashTextureScale_Low) \
    op(FlashTextureScale_NextLow) \
    op(FlashTextureScale_Mult4) \
    op(FlashTextureScale_None) 

#endif // !INCLUDED_GFXUI_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_GFXUI_CLASSES
#define INCLUDED_GFXUI_CLASSES 1
#define ENABLE_DECLARECLASS_MACRO 1
#include "UnObjBas.h"
#undef ENABLE_DECLARECLASS_MACRO

struct FGCReference
{
    class UObject* m_object;
    INT m_count;
    INT m_statid;

    /** Constructors */
    FGCReference() {}
    FGCReference(EEventParm)
    {
        appMemzero(this, sizeof(FGCReference));
    }
};

class UGFxEngine : public UObject
{
public:
    //## BEGIN PROPS GFxEngine
    TArrayNoInit<struct FGCReference> GCReferences;
    INT RefCount;
    //## END PROPS GFxEngine

    DECLARE_CLASS(UGFxEngine,UObject,0,GFxUI)
    UGFxEngine();
    void FinishDestroy();
    void Release();

#if WITH_GFx
	/** Texture GC Management */
	// Returns true if object reference was added, false otherwise
	UBOOL AddGCReferenceFor( const UObject* const pObjectToBeAdded, INT statid);

	// Returns true if object reference is found (and removed), false otherwise
	UBOOL RemoveGCReferenceFor( const UObject* const pObjectToBeRemoved );

	/**
	 * Returns the size of the object/ resource for display to artists/ LDs in the Editor.
	 *
	 * @return size of resource as to be displayed to artists/ LDs in the Editor.
	 */
	virtual INT GetResourceSize();

	/**
	 * Dumps memory information about the GFX system
	 */ 
	static void DumpGFXMemoryStats(FOutputDevice& Ar);
#endif	// WITH_GFx
};

struct GFxFSCmdHandler_eventFSCommand_Parms
{
    class UGFxMoviePlayer* Movie;
    class UGFxEvent_FSCommand* Event;
    FString Cmd;
    FString Arg;
    UBOOL ReturnValue;
    GFxFSCmdHandler_eventFSCommand_Parms(EEventParm)
    {
    }
};
class UGFxFSCmdHandler : public UObject
{
public:
    //## BEGIN PROPS GFxFSCmdHandler
    //## END PROPS GFxFSCmdHandler

    UBOOL eventFSCommand(class UGFxMoviePlayer* Movie,class UGFxEvent_FSCommand* Event,const FString& Cmd,const FString& Arg)
    {
        GFxFSCmdHandler_eventFSCommand_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.Movie=Movie;
        Parms.Event=Event;
        Parms.Cmd=Cmd;
        Parms.Arg=Arg;
        ProcessEvent(FindFunctionChecked(GFXUI_FSCommand),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_ABSTRACT_CLASS(UGFxFSCmdHandler,UObject,0,GFxUI)
    NO_DEFAULT_CONSTRUCTOR(UGFxFSCmdHandler)
};

class UGFxInteraction : public UInteraction, public FCallbackEventDevice
{
public:
    //## BEGIN PROPS GFxInteraction
    BITFIELD bFakeMobileTouches:1;
    SCRIPT_ALIGN;
    //## END PROPS GFxInteraction

    virtual class UGFxMoviePlayer* GetFocusMovie(INT ControllerId);
    virtual void NotifyGameSessionEnded();
    virtual void NotifyPlayerAdded(INT PlayerIndex,class ULocalPlayer* AddedPlayer);
    virtual void NotifyPlayerRemoved(INT PlayerIndex,class ULocalPlayer* RemovedPlayer);
    virtual void NotifySplitscreenLayoutChanged();
    virtual void CloseAllMoviePlayers();
    DECLARE_FUNCTION(execGetFocusMovie)
    {
        P_GET_INT(ControllerId);
        P_FINISH;
        *(class UGFxMoviePlayer**)Result=this->GetFocusMovie(ControllerId);
    }
    DECLARE_FUNCTION(execNotifyGameSessionEnded)
    {
        P_FINISH;
        this->NotifyGameSessionEnded();
    }
    DECLARE_FUNCTION(execNotifyPlayerAdded)
    {
        P_GET_INT(PlayerIndex);
        P_GET_OBJECT(ULocalPlayer,AddedPlayer);
        P_FINISH;
        this->NotifyPlayerAdded(PlayerIndex,AddedPlayer);
    }
    DECLARE_FUNCTION(execNotifyPlayerRemoved)
    {
        P_GET_INT(PlayerIndex);
        P_GET_OBJECT(ULocalPlayer,RemovedPlayer);
        P_FINISH;
        this->NotifyPlayerRemoved(PlayerIndex,RemovedPlayer);
    }
    DECLARE_FUNCTION(execNotifySplitscreenLayoutChanged)
    {
        P_FINISH;
        this->NotifySplitscreenLayoutChanged();
    }
    DECLARE_FUNCTION(execCloseAllMoviePlayers)
    {
        P_FINISH;
        this->CloseAllMoviePlayers();
    }
    DECLARE_CLASS(UGFxInteraction,UInteraction,0|CLASS_Transient|CLASS_Config,GFxUI)
#if WITH_GFx
	/** Initializes this interaction, allocates the GFxEngine */
    virtual void Init();

    virtual void BeginDestroy();
    virtual UBOOL IsReadyForFinishDestroy();
    virtual void FinishDestroy();

	/** Set the Engine's viewport to the viewport specified */
	virtual void SetRenderViewport(class FViewport* InViewport);

	virtual UBOOL InputKey(INT ControllerId,FName Key,EInputEvent Event,FLOAT AmountDepressed,UBOOL bGamepad);
	virtual UBOOL InputAxis(INT ControllerId,FName Key,FLOAT Delta,FLOAT DeltaTime, UBOOL bGamepad);
	virtual UBOOL InputChar(INT ControllerId,TCHAR Character);
	virtual UBOOL InputTouch(INT ControllerId, UINT Handle, ETouchType Type, FVector2D TouchLocation, DOUBLE DeviceTimestamp, UINT TouchpadIndex);

	/**
	 * Called once a frame to update the interaction's state.
	 * @param	DeltaTime - The time since the last frame.
	 */
	virtual void Tick(FLOAT DeltaTime);

	/**	FExec interface */
	virtual UBOOL Exec(const TCHAR* Cmd, FOutputDevice& Ar);

    /* === FCallbackEventDevice interface === */
    /**
     * Called when the viewport has been resized.
     */
    virtual void Send( ECallbackEventType InType, class FViewport* InViewport, UINT InMessage);
    virtual void Send(ECallbackEventType InType, DWORD InFlag);

	/** Statistics Gathering */
	void CaptureRenderFrameStats();

#endif // WITH_GFx
};

struct FExternalTexture
{
    FStringNoInit Resource;
    class UTexture* Texture;

    /** Constructors */
    FExternalTexture() {}
    FExternalTexture(EEventParm)
    {
        appMemzero(this, sizeof(FExternalTexture));
    }
};

struct FSoundThemeBinding
{
    FName ThemeName;
    class UUISoundTheme* Theme;
    FStringNoInit ThemeClassName;

    /** Constructors */
    FSoundThemeBinding() {}
    FSoundThemeBinding(EEventParm)
    {
        appMemzero(this, sizeof(FSoundThemeBinding));
    }
};

struct FGFxWidgetBinding
{
    FName WidgetName;
    class UClass* WidgetClass;

    /** Constructors */
    FGFxWidgetBinding() {}
    FGFxWidgetBinding(EEventParm)
    {
        appMemzero(this, sizeof(FGFxWidgetBinding));
    }
};

struct FASValue
{
    BYTE Type;
    SCRIPT_ALIGN;
    BITFIELD B:1;
    FLOAT N;
    INT I;
    FString S;

    /** Constructors */
    FASValue() {}
    FASValue(EEventParm)
    {
        appMemzero(this, sizeof(FASValue));
    }
};

struct GFxMoviePlayer_eventApplyPriorityEffect_Parms
{
    UBOOL bRequestedBlurState;
    UBOOL bRequestedHiddenState;
    GFxMoviePlayer_eventApplyPriorityEffect_Parms(EEventParm)
    {
    }
};
struct GFxMoviePlayer_eventOnFocusLost_Parms
{
    INT LocalPlayerIndex;
    GFxMoviePlayer_eventOnFocusLost_Parms(EEventParm)
    {
    }
};
struct GFxMoviePlayer_eventOnFocusGained_Parms
{
    INT LocalPlayerIndex;
    GFxMoviePlayer_eventOnFocusGained_Parms(EEventParm)
    {
    }
};
struct GFxMoviePlayer_eventGetPC_Parms
{
    class APlayerController* ReturnValue;
    GFxMoviePlayer_eventGetPC_Parms(EEventParm)
    {
    }
};
struct GFxMoviePlayer_eventGetLP_Parms
{
    class ULocalPlayer* ReturnValue;
    GFxMoviePlayer_eventGetLP_Parms(EEventParm)
    {
    }
};
struct GFxMoviePlayer_eventPostWidgetInit_Parms
{
    GFxMoviePlayer_eventPostWidgetInit_Parms(EEventParm)
    {
    }
};
struct GFxMoviePlayer_eventWidgetUnloaded_Parms
{
    FName WidgetName;
    FName WidgetPath;
    class UGFxObject* Widget;
    UBOOL ReturnValue;
    GFxMoviePlayer_eventWidgetUnloaded_Parms(EEventParm)
    {
    }
};
struct GFxMoviePlayer_eventWidgetInitialized_Parms
{
    FName WidgetName;
    FName WidgetPath;
    class UGFxObject* Widget;
    UBOOL ReturnValue;
    GFxMoviePlayer_eventWidgetInitialized_Parms(EEventParm)
    {
    }
};
struct GFxMoviePlayer_eventFilterButtonInput_Parms
{
    INT ControllerId;
    FName ButtonName;
    BYTE InputEvent;
    UBOOL ReturnValue;
    GFxMoviePlayer_eventFilterButtonInput_Parms(EEventParm)
    {
    }
};
struct GFxMoviePlayer_eventConditionalClearPause_Parms
{
    GFxMoviePlayer_eventConditionalClearPause_Parms(EEventParm)
    {
    }
};
struct GFxMoviePlayer_eventOnCleanup_Parms
{
    GFxMoviePlayer_eventOnCleanup_Parms(EEventParm)
    {
    }
};
struct GFxMoviePlayer_eventOnClose_Parms
{
    GFxMoviePlayer_eventOnClose_Parms(EEventParm)
    {
    }
};
struct GFxMoviePlayer_eventOnPostAdvance_Parms
{
    FLOAT DeltaTime;
    GFxMoviePlayer_eventOnPostAdvance_Parms(EEventParm)
    {
    }
};
struct GFxMoviePlayer_eventStart_Parms
{
    UBOOL StartPaused;
    UBOOL ReturnValue;
    GFxMoviePlayer_eventStart_Parms(EEventParm)
    {
    }
};
class UGFxMoviePlayer : public UObject
{
public:
    //## BEGIN PROPS GFxMoviePlayer
    class FGFxMovie* pMovie;
    class TSet<NAME_INDEX>* pCaptureKeys;
    class TSet<NAME_INDEX>* pFocusIgnoreKeys;
    TMap< UClass*,void* > ASUClasses;
    TMap< int,UObject* > ASUObjects;
    INT NextASUObject;
    class USwfMovie* MovieInfo;
    BITFIELD bMovieIsOpen:1;
    BITFIELD bDisplayWithHudOff:1;
    BITFIELD bEnableGammaCorrection:1;
    BITFIELD bWidgetsInitializedThisFrame:1;
    BITFIELD bLogUnhandedWidgetInitializations:1;
    BITFIELD bAllowInput:1;
    BITFIELD bAllowFocus:1;
    BITFIELD bAutoPlay:1;
    BITFIELD bPauseGameWhileActive:1;
    BITFIELD bDisableWorldRendering:1;
    BITFIELD bCaptureWorldRendering:1;
    BITFIELD bCloseOnLevelChange:1;
    BITFIELD bOnlyOwnerFocusable:1;
    BITFIELD bForceFullViewport:1;
    BITFIELD bDiscardNonOwnerInput:1;
    BITFIELD bCaptureInput:1;
    BITFIELD bCaptureMouseInput:1;
    BITFIELD bIgnoreMouseInput:1;
    BITFIELD bIsSplitscreenLayoutModified:1;
    BITFIELD bShowHardwareMouseCursor:1;
    BITFIELD bBlurLesserMovies:1;
    BITFIELD bHideLesserMovies:1;
    BITFIELD bIsPriorityBlurred:1;
    BITFIELD bIsPriorityHidden:1;
    BITFIELD bIgnoreVisibilityEffect:1;
    BITFIELD bIgnoreBlurEffect:1;
    class UTextureRenderTarget2D* RenderTexture;
    INT LocalPlayerOwnerIndex;
    class UObject* ExternalInterface;
    TArrayNoInit<FName> CaptureKeys;
    TArrayNoInit<FName> FocusIgnoreKeys;
    TArrayNoInit<struct FExternalTexture> ExternalTextures;
    TArrayNoInit<struct FSoundThemeBinding> SoundThemes;
    BYTE TimingMode;
    BYTE RenderTextureMode;
    BYTE Priority;
    TArrayNoInit<struct FGFxWidgetBinding> WidgetBindings;
    TMap< FName,UGFxObject* > WidgetPathBindings;
    class UGFxObject* SplitscreenLayoutObject;
    INT SplitscreenLayoutYAdjust;
    FScriptDelegate __OnPostAdvance__Delegate;
    //## END PROPS GFxMoviePlayer

    virtual UBOOL Start(UBOOL StartPaused=FALSE);
    void Advance(FLOAT Time);
    virtual void PostAdvance(FLOAT DeltaTime);
    virtual void SetPause(UBOOL bPausePlayback=TRUE);
    void Close(UBOOL Unload=TRUE);
    virtual void SetTimingMode(BYTE Mode);
    virtual UBOOL SetExternalTexture(const FString& Resource,class UTexture* Texture);
    virtual void SetPriority(BYTE NewPriority);
    class UGameViewportClient* GetGameViewportClient();
    void SetViewport(INT X,INT Y,INT Width,INT Height);
    void SetViewScaleMode(BYTE SM);
    void SetAlignment(BYTE A);
    void GetVisibleFrameRect(FLOAT& x0,FLOAT& y0,FLOAT& X1,FLOAT& Y1);
    void SetView3D(const FMatrix& matView);
    void SetPerspective3D(const FMatrix& matPersp);
    void SetMovieCanReceiveFocus(UBOOL bCanReceiveFocus);
    void SetMovieCanReceiveInput(UBOOL bCanReceiveInput);
    void AddCaptureKey(FName Key);
    void ClearCaptureKeys();
    void AddFocusIgnoreKey(FName Key);
    void ClearFocusIgnoreKeys();
    void FlushPlayerInput(UBOOL capturekeysonly);
    virtual INT GetAVMVersion();
    virtual struct FASValue GetVariable(const FString& Path);
    virtual UBOOL GetVariableBool(const FString& Path);
    virtual FLOAT GetVariableNumber(const FString& Path);
    virtual INT GetVariableInt(const FString& Path);
    virtual FString GetVariableString(const FString& Path);
    virtual class UGFxObject* GetVariableObject(const FString& Path,class UClass* Type=NULL);
    virtual void SetVariable(const FString& Path,struct FASValue Arg);
    virtual void SetVariableBool(const FString& Path,UBOOL B);
    virtual void SetVariableNumber(const FString& Path,FLOAT F);
    virtual void SetVariableInt(const FString& Path,INT I);
    virtual void SetVariableString(const FString& Path,const FString& S);
    virtual void SetVariableObject(const FString& Path,class UGFxObject* Object);
    virtual UBOOL GetVariableArray(const FString& Path,INT Index,TArray<struct FASValue>& Arg);
    virtual UBOOL GetVariableIntArray(const FString& Path,INT Index,TArray<INT>& Arg);
    virtual UBOOL GetVariableFloatArray(const FString& Path,INT Index,TArray<FLOAT>& Arg);
    virtual UBOOL GetVariableStringArray(const FString& Path,INT Index,TArray<FString>& Arg);
    virtual UBOOL SetVariableArray(const FString& Path,INT Index,const TArray<struct FASValue>& Arg);
    virtual UBOOL SetVariableIntArray(const FString& Path,INT Index,const TArray<INT>& Arg);
    virtual UBOOL SetVariableFloatArray(const FString& Path,INT Index,const TArray<FLOAT>& Arg);
    virtual UBOOL SetVariableStringArray(const FString& Path,INT Index,const TArray<FString>& Arg);
    virtual class UGFxObject* CreateObject(const FString& ASClass,class UClass* Type=NULL,const TArray<struct FASValue>& args=TArray<FASValue>(EC_EventParm));
    virtual class UGFxObject* CreateArray();
    virtual struct FASValue Invoke(const FString& method,const TArray<struct FASValue>& args);
    void SetWidgetPathBinding(class UGFxObject* WidgetToBind,FName Path);
    virtual void UpdateSplitscreenLayout();
    DECLARE_FUNCTION(execStart)
    {
        P_GET_UBOOL_OPTX(StartPaused,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->Start(StartPaused);
    }
    DECLARE_FUNCTION(execAdvance)
    {
        P_GET_FLOAT(Time);
        P_FINISH;
        this->Advance(Time);
    }
    DECLARE_FUNCTION(execPostAdvance)
    {
        P_GET_FLOAT(DeltaTime);
        P_FINISH;
        this->PostAdvance(DeltaTime);
    }
    DECLARE_FUNCTION(execSetPause)
    {
        P_GET_UBOOL_OPTX(bPausePlayback,TRUE);
        P_FINISH;
        this->SetPause(bPausePlayback);
    }
    DECLARE_FUNCTION(execClose)
    {
        P_GET_UBOOL_OPTX(Unload,TRUE);
        P_FINISH;
        this->Close(Unload);
    }
    DECLARE_FUNCTION(execSetTimingMode)
    {
        P_GET_BYTE(Mode);
        P_FINISH;
        this->SetTimingMode(Mode);
    }
    DECLARE_FUNCTION(execSetExternalTexture)
    {
        P_GET_STR(Resource);
        P_GET_OBJECT(UTexture,Texture);
        P_FINISH;
        *(UBOOL*)Result=this->SetExternalTexture(Resource,Texture);
    }
    DECLARE_FUNCTION(execSetPriority)
    {
        P_GET_BYTE(NewPriority);
        P_FINISH;
        this->SetPriority(NewPriority);
    }
    DECLARE_FUNCTION(execGetGameViewportClient)
    {
        P_FINISH;
        *(class UGameViewportClient**)Result=this->GetGameViewportClient();
    }
    DECLARE_FUNCTION(execSetViewport)
    {
        P_GET_INT(X);
        P_GET_INT(Y);
        P_GET_INT(Width);
        P_GET_INT(Height);
        P_FINISH;
        this->SetViewport(X,Y,Width,Height);
    }
    DECLARE_FUNCTION(execSetViewScaleMode)
    {
        P_GET_BYTE(SM);
        P_FINISH;
        this->SetViewScaleMode(SM);
    }
    DECLARE_FUNCTION(execSetAlignment)
    {
        P_GET_BYTE(A);
        P_FINISH;
        this->SetAlignment(A);
    }
    DECLARE_FUNCTION(execGetVisibleFrameRect)
    {
        P_GET_FLOAT_REF(x0);
        P_GET_FLOAT_REF(y0);
        P_GET_FLOAT_REF(X1);
        P_GET_FLOAT_REF(Y1);
        P_FINISH;
        this->GetVisibleFrameRect(x0,y0,X1,Y1);
    }
    DECLARE_FUNCTION(execSetView3D)
    {
        P_GET_STRUCT_REF(FMatrix,matView);
        P_FINISH;
        this->SetView3D(matView);
    }
    DECLARE_FUNCTION(execSetPerspective3D)
    {
        P_GET_STRUCT_REF(FMatrix,matPersp);
        P_FINISH;
        this->SetPerspective3D(matPersp);
    }
    DECLARE_FUNCTION(execSetMovieCanReceiveFocus)
    {
        P_GET_UBOOL(bCanReceiveFocus);
        P_FINISH;
        this->SetMovieCanReceiveFocus(bCanReceiveFocus);
    }
    DECLARE_FUNCTION(execSetMovieCanReceiveInput)
    {
        P_GET_UBOOL(bCanReceiveInput);
        P_FINISH;
        this->SetMovieCanReceiveInput(bCanReceiveInput);
    }
    DECLARE_FUNCTION(execAddCaptureKey)
    {
        P_GET_NAME(Key);
        P_FINISH;
        this->AddCaptureKey(Key);
    }
    DECLARE_FUNCTION(execClearCaptureKeys)
    {
        P_FINISH;
        this->ClearCaptureKeys();
    }
    DECLARE_FUNCTION(execAddFocusIgnoreKey)
    {
        P_GET_NAME(Key);
        P_FINISH;
        this->AddFocusIgnoreKey(Key);
    }
    DECLARE_FUNCTION(execClearFocusIgnoreKeys)
    {
        P_FINISH;
        this->ClearFocusIgnoreKeys();
    }
    DECLARE_FUNCTION(execFlushPlayerInput)
    {
        P_GET_UBOOL(capturekeysonly);
        P_FINISH;
        this->FlushPlayerInput(capturekeysonly);
    }
    DECLARE_FUNCTION(execGetAVMVersion)
    {
        P_FINISH;
        *(INT*)Result=this->GetAVMVersion();
    }
    DECLARE_FUNCTION(execGetVariable)
    {
        P_GET_STR(Path);
        P_FINISH;
        *(struct FASValue*)Result=this->GetVariable(Path);
    }
    DECLARE_FUNCTION(execGetVariableBool)
    {
        P_GET_STR(Path);
        P_FINISH;
        *(UBOOL*)Result=this->GetVariableBool(Path);
    }
    DECLARE_FUNCTION(execGetVariableNumber)
    {
        P_GET_STR(Path);
        P_FINISH;
        *(FLOAT*)Result=this->GetVariableNumber(Path);
    }
    DECLARE_FUNCTION(execGetVariableInt)
    {
        P_GET_STR(Path);
        P_FINISH;
        *(INT*)Result=this->GetVariableInt(Path);
    }
    DECLARE_FUNCTION(execGetVariableString)
    {
        P_GET_STR(Path);
        P_FINISH;
        *(FString*)Result=this->GetVariableString(Path);
    }
    DECLARE_FUNCTION(execGetVariableObject)
    {
        P_GET_STR(Path);
        P_GET_OBJECT_OPTX(UClass,Type,NULL);
        P_FINISH;
        *(class UGFxObject**)Result=this->GetVariableObject(Path,Type);
    }
    DECLARE_FUNCTION(execSetVariable)
    {
        P_GET_STR(Path);
        P_GET_STRUCT_INIT(struct FASValue,Arg);
        P_FINISH;
        this->SetVariable(Path,Arg);
    }
    DECLARE_FUNCTION(execSetVariableBool)
    {
        P_GET_STR(Path);
        P_GET_UBOOL(B);
        P_FINISH;
        this->SetVariableBool(Path,B);
    }
    DECLARE_FUNCTION(execSetVariableNumber)
    {
        P_GET_STR(Path);
        P_GET_FLOAT(F);
        P_FINISH;
        this->SetVariableNumber(Path,F);
    }
    DECLARE_FUNCTION(execSetVariableInt)
    {
        P_GET_STR(Path);
        P_GET_INT(I);
        P_FINISH;
        this->SetVariableInt(Path,I);
    }
    DECLARE_FUNCTION(execSetVariableString)
    {
        P_GET_STR(Path);
        P_GET_STR(S);
        P_FINISH;
        this->SetVariableString(Path,S);
    }
    DECLARE_FUNCTION(execSetVariableObject)
    {
        P_GET_STR(Path);
        P_GET_OBJECT(UGFxObject,Object);
        P_FINISH;
        this->SetVariableObject(Path,Object);
    }
    DECLARE_FUNCTION(execGetVariableArray)
    {
        P_GET_STR(Path);
        P_GET_INT(Index);
        P_GET_TARRAY_REF(struct FASValue,Arg);
        P_FINISH;
        *(UBOOL*)Result=this->GetVariableArray(Path,Index,Arg);
    }
    DECLARE_FUNCTION(execGetVariableIntArray)
    {
        P_GET_STR(Path);
        P_GET_INT(Index);
        P_GET_TARRAY_REF(INT,Arg);
        P_FINISH;
        *(UBOOL*)Result=this->GetVariableIntArray(Path,Index,Arg);
    }
    DECLARE_FUNCTION(execGetVariableFloatArray)
    {
        P_GET_STR(Path);
        P_GET_INT(Index);
        P_GET_TARRAY_REF(FLOAT,Arg);
        P_FINISH;
        *(UBOOL*)Result=this->GetVariableFloatArray(Path,Index,Arg);
    }
    DECLARE_FUNCTION(execGetVariableStringArray)
    {
        P_GET_STR(Path);
        P_GET_INT(Index);
        P_GET_TARRAY_REF(FString,Arg);
        P_FINISH;
        *(UBOOL*)Result=this->GetVariableStringArray(Path,Index,Arg);
    }
    DECLARE_FUNCTION(execSetVariableArray)
    {
        P_GET_STR(Path);
        P_GET_INT(Index);
        P_GET_TARRAY(struct FASValue,Arg);
        P_FINISH;
        *(UBOOL*)Result=this->SetVariableArray(Path,Index,Arg);
    }
    DECLARE_FUNCTION(execSetVariableIntArray)
    {
        P_GET_STR(Path);
        P_GET_INT(Index);
        P_GET_TARRAY(INT,Arg);
        P_FINISH;
        *(UBOOL*)Result=this->SetVariableIntArray(Path,Index,Arg);
    }
    DECLARE_FUNCTION(execSetVariableFloatArray)
    {
        P_GET_STR(Path);
        P_GET_INT(Index);
        P_GET_TARRAY(FLOAT,Arg);
        P_FINISH;
        *(UBOOL*)Result=this->SetVariableFloatArray(Path,Index,Arg);
    }
    DECLARE_FUNCTION(execSetVariableStringArray)
    {
        P_GET_STR(Path);
        P_GET_INT(Index);
        P_GET_TARRAY(FString,Arg);
        P_FINISH;
        *(UBOOL*)Result=this->SetVariableStringArray(Path,Index,Arg);
    }
    DECLARE_FUNCTION(execCreateObject)
    {
        P_GET_STR(ASClass);
        P_GET_OBJECT_OPTX(UClass,Type,NULL);
        P_GET_TARRAY_OPTX(struct FASValue,args,TArray<FASValue>(EC_EventParm));
        P_FINISH;
        *(class UGFxObject**)Result=this->CreateObject(ASClass,Type,args);
    }
    DECLARE_FUNCTION(execCreateArray)
    {
        P_FINISH;
        *(class UGFxObject**)Result=this->CreateArray();
    }
    DECLARE_FUNCTION(execActionScriptSetFunction);
    DECLARE_FUNCTION(execInvoke)
    {
        P_GET_STR(method);
        P_GET_TARRAY(struct FASValue,args);
        P_FINISH;
        *(struct FASValue*)Result=this->Invoke(method,args);
    }
    DECLARE_FUNCTION(execActionScriptVoid);
    DECLARE_FUNCTION(execActionScriptInt);
    DECLARE_FUNCTION(execActionScriptFloat);
    DECLARE_FUNCTION(execActionScriptString);
    DECLARE_FUNCTION(execActionScriptObject);
    DECLARE_FUNCTION(execActionScriptConstructor);
    DECLARE_FUNCTION(execSetWidgetPathBinding)
    {
        P_GET_OBJECT(UGFxObject,WidgetToBind);
        P_GET_NAME(Path);
        P_FINISH;
        this->SetWidgetPathBinding(WidgetToBind,Path);
    }
    DECLARE_FUNCTION(execUpdateSplitscreenLayout)
    {
        P_FINISH;
        this->UpdateSplitscreenLayout();
    }
    void eventApplyPriorityEffect(UBOOL bRequestedBlurState,UBOOL bRequestedHiddenState)
    {
        GFxMoviePlayer_eventApplyPriorityEffect_Parms Parms(EC_EventParm);
        Parms.bRequestedBlurState=bRequestedBlurState ? FIRST_BITFIELD : FALSE;
        Parms.bRequestedHiddenState=bRequestedHiddenState ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(GFXUI_ApplyPriorityEffect),&Parms);
    }
    void eventOnFocusLost(INT LocalPlayerIndex)
    {
        GFxMoviePlayer_eventOnFocusLost_Parms Parms(EC_EventParm);
        Parms.LocalPlayerIndex=LocalPlayerIndex;
        ProcessEvent(FindFunctionChecked(GFXUI_OnFocusLost),&Parms);
    }
    void eventOnFocusGained(INT LocalPlayerIndex)
    {
        GFxMoviePlayer_eventOnFocusGained_Parms Parms(EC_EventParm);
        Parms.LocalPlayerIndex=LocalPlayerIndex;
        ProcessEvent(FindFunctionChecked(GFXUI_OnFocusGained),&Parms);
    }
    class APlayerController* eventGetPC()
    {
        GFxMoviePlayer_eventGetPC_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        ProcessEvent(FindFunctionChecked(GFXUI_GetPC),&Parms);
        return Parms.ReturnValue;
    }
    class ULocalPlayer* eventGetLP()
    {
        GFxMoviePlayer_eventGetLP_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        ProcessEvent(FindFunctionChecked(GFXUI_GetLP),&Parms);
        return Parms.ReturnValue;
    }
    void eventPostWidgetInit()
    {
        ProcessEvent(FindFunctionChecked(GFXUI_PostWidgetInit),NULL);
    }
    UBOOL eventWidgetUnloaded(FName WidgetName,FName WidgetPath,class UGFxObject* Widget)
    {
        GFxMoviePlayer_eventWidgetUnloaded_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.WidgetName=WidgetName;
        Parms.WidgetPath=WidgetPath;
        Parms.Widget=Widget;
        ProcessEvent(FindFunctionChecked(GFXUI_WidgetUnloaded),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventWidgetInitialized(FName WidgetName,FName WidgetPath,class UGFxObject* Widget)
    {
        GFxMoviePlayer_eventWidgetInitialized_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.WidgetName=WidgetName;
        Parms.WidgetPath=WidgetPath;
        Parms.Widget=Widget;
        ProcessEvent(FindFunctionChecked(GFXUI_WidgetInitialized),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventFilterButtonInput(INT ControllerId,FName ButtonName,BYTE InputEvent)
    {
        GFxMoviePlayer_eventFilterButtonInput_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.ControllerId=ControllerId;
        Parms.ButtonName=ButtonName;
        Parms.InputEvent=InputEvent;
        ProcessEvent(FindFunctionChecked(GFXUI_FilterButtonInput),&Parms);
        return Parms.ReturnValue;
    }
    void eventConditionalClearPause()
    {
        ProcessEvent(FindFunctionChecked(GFXUI_ConditionalClearPause),NULL);
    }
    void eventOnCleanup()
    {
        ProcessEvent(FindFunctionChecked(GFXUI_OnCleanup),NULL);
    }
    void eventOnClose()
    {
        ProcessEvent(FindFunctionChecked(GFXUI_OnClose),NULL);
    }
    void delegateOnPostAdvance(FLOAT DeltaTime)
    {
        GFxMoviePlayer_eventOnPostAdvance_Parms Parms(EC_EventParm);
        Parms.DeltaTime=DeltaTime;
        ProcessDelegate(GFXUI_OnPostAdvance,&__OnPostAdvance__Delegate,&Parms);
    }
    UBOOL eventStart(UBOOL StartPaused=FALSE)
    {
        GFxMoviePlayer_eventStart_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.StartPaused=StartPaused ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(GFXUI_Start),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGFxMoviePlayer,UObject,0|CLASS_Config,GFxUI)
    static const TCHAR* StaticConfigName() {return TEXT("UI");}

    UGFxMoviePlayer();

	virtual void Cleanup();
	virtual void FinishDestroy();
	virtual void Serialize(FArchive& Ar);
    UBOOL Load(const FString& Filename, UBOOL InitFirstFrame = TRUE);

	class UGFxObject* CreateValue(const void* GFxObject, UClass* Type);
	class UGFxObject* CreateValueAddRef(const void* GFxObject, UClass* Type);
	UBOOL GetPrototype(UClass *Class, void* Proto);
};

struct FASDisplayInfo
{
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
    FLOAT Rotation;
    FLOAT XRotation;
    FLOAT YRotation;
    FLOAT XScale;
    FLOAT YScale;
    FLOAT ZScale;
    FLOAT Alpha;
    BITFIELD Visible:1;
    BITFIELD hasX:1;
    BITFIELD hasY:1;
    BITFIELD hasZ:1;
    BITFIELD hasRotation:1;
    BITFIELD hasXRotation:1;
    BITFIELD hasYRotation:1;
    BITFIELD hasXScale:1;
    BITFIELD hasYScale:1;
    BITFIELD hasZScale:1;
    BITFIELD hasAlpha:1;
    BITFIELD hasVisible:1;
    SCRIPT_ALIGN;

    /** Constructors */
    FASDisplayInfo() {}
    FASDisplayInfo(EEventParm)
    {
        appMemzero(this, sizeof(FASDisplayInfo));
    }
};

struct FASColorTransform
{
    FLinearColor Multiply;
    FLinearColor Add;

    /** Constructors */
    FASColorTransform() {}
    FASColorTransform(EEventParm)
    {
        appMemzero(this, sizeof(FASColorTransform));
    }
};

struct GFxObject_eventWidgetUnloaded_Parms
{
    FName WidgetName;
    FName WidgetPath;
    class UGFxObject* Widget;
    UBOOL ReturnValue;
    GFxObject_eventWidgetUnloaded_Parms(EEventParm)
    {
    }
};
struct GFxObject_eventWidgetInitialized_Parms
{
    FName WidgetName;
    FName WidgetPath;
    class UGFxObject* Widget;
    UBOOL ReturnValue;
    GFxObject_eventWidgetInitialized_Parms(EEventParm)
    {
    }
};
class UGFxObject : public UObject
{
public:
    //## BEGIN PROPS GFxObject
    INT Value[12];
    TArrayNoInit<struct FGFxWidgetBinding> SubWidgetBindings;
    //## END PROPS GFxObject

    struct FASValue Get(const FString& Member);
    UBOOL GetBool(const FString& Member);
    FLOAT GetFloat(const FString& Member);
    INT GetInt(const FString& Member);
    FString GetString(const FString& Member);
    class UGFxObject* GetObject(const FString& Member,class UClass* Type=UGFxObject::StaticClass());
    void Set(const FString& Member,struct FASValue Arg);
    void SetBool(const FString& Member,UBOOL B);
    void SetFloat(const FString& Member,FLOAT F);
    void SetInt(const FString& Member,INT I);
    void SetString(const FString& Member,const FString& S,class UTranslationContext* InContext=NULL);
    void SetObject(const FString& Member,class UGFxObject* val);
    void SetFunction(const FString& Member,class UObject* context,FName fname);
    FString TranslateString(const FString& StringToTranslate,class UTranslationContext* InContext=NULL);
    struct FASDisplayInfo GetDisplayInfo();
    UBOOL GetPosition(FLOAT& X,FLOAT& Y);
    struct FASColorTransform GetColorTransform();
    FMatrix GetDisplayMatrix();
    FMatrix GetDisplayMatrix3D();
    void SetDisplayInfo(struct FASDisplayInfo D);
    void SetPosition(FLOAT X,FLOAT Y);
    void SetColorTransform(struct FASColorTransform cxform);
    void SetVisible(UBOOL Visible);
    FString GetText();
    void SetText(const FString& Text,class UTranslationContext* InContext=NULL);
    struct FASValue GetElement(INT Index);
    class UGFxObject* GetElementObject(INT Index,class UClass* Type=UGFxObject::StaticClass());
    UBOOL GetElementBool(INT Index);
    FLOAT GetElementFloat(INT Index);
    INT GetElementInt(INT Index);
    FString GetElementString(INT Index);
    void SetElement(INT Index,struct FASValue Arg);
    void SetElementObject(INT Index,class UGFxObject* val);
    void SetElementBool(INT Index,UBOOL B);
    void SetElementFloat(INT Index,FLOAT F);
    void SetElementInt(INT Index,INT I);
    void SetElementString(INT Index,const FString& S);
    struct FASDisplayInfo GetElementDisplayInfo(INT Index);
    FMatrix GetElementDisplayMatrix(INT Index);
    void SetElementDisplayInfo(INT Index,struct FASDisplayInfo D);
    void SetElementVisible(INT Index,UBOOL Visible);
    void SetElementPosition(INT Index,FLOAT X,FLOAT Y);
    void SetElementColorTransform(INT Index,struct FASColorTransform cxform);
    struct FASValue GetElementMember(INT Index,const FString& Member);
    class UGFxObject* GetElementMemberObject(INT Index,const FString& Member,class UClass* Type=UGFxObject::StaticClass());
    UBOOL GetElementMemberBool(INT Index,const FString& Member);
    FLOAT GetElementMemberFloat(INT Index,const FString& Member);
    INT GetElementMemberInt(INT Index,const FString& Member);
    FString GetElementMemberString(INT Index,const FString& Member);
    void SetElementMember(INT Index,const FString& Member,struct FASValue Arg);
    void SetElementMemberObject(INT Index,const FString& Member,class UGFxObject* val);
    void SetElementMemberBool(INT Index,const FString& Member,UBOOL B);
    void SetElementMemberFloat(INT Index,const FString& Member,FLOAT F);
    void SetElementMemberInt(INT Index,const FString& Member,INT I);
    void SetElementMemberString(INT Index,const FString& Member,const FString& S);
    struct FASValue Invoke(const FString& Member,const TArray<struct FASValue>& args);
    void GotoAndPlay(const FString& frame);
    void GotoAndPlayI(INT frame);
    void GotoAndStop(const FString& frame);
    void GotoAndStopI(INT frame);
    class UGFxObject* CreateEmptyMovieClip(const FString& instancename,INT Depth=-1,class UClass* Type=UGFxObject::StaticClass());
    class UGFxObject* AttachMovie(const FString& symbolname,const FString& instancename,INT Depth=-1,class UClass* Type=UGFxObject::StaticClass());
    DECLARE_FUNCTION(execGet)
    {
        P_GET_STR(Member);
        P_FINISH;
        *(struct FASValue*)Result=this->Get(Member);
    }
    DECLARE_FUNCTION(execGetBool)
    {
        P_GET_STR(Member);
        P_FINISH;
        *(UBOOL*)Result=this->GetBool(Member);
    }
    DECLARE_FUNCTION(execGetFloat)
    {
        P_GET_STR(Member);
        P_FINISH;
        *(FLOAT*)Result=this->GetFloat(Member);
    }
    DECLARE_FUNCTION(execGetInt)
    {
        P_GET_STR(Member);
        P_FINISH;
        *(INT*)Result=this->GetInt(Member);
    }
    DECLARE_FUNCTION(execGetString)
    {
        P_GET_STR(Member);
        P_FINISH;
        *(FString*)Result=this->GetString(Member);
    }
    DECLARE_FUNCTION(execGetObject)
    {
        P_GET_STR(Member);
        P_GET_OBJECT_OPTX(UClass,Type,UGFxObject::StaticClass());
        P_FINISH;
        *(class UGFxObject**)Result=this->GetObject(Member,Type);
    }
    DECLARE_FUNCTION(execSet)
    {
        P_GET_STR(Member);
        P_GET_STRUCT_INIT(struct FASValue,Arg);
        P_FINISH;
        this->Set(Member,Arg);
    }
    DECLARE_FUNCTION(execSetBool)
    {
        P_GET_STR(Member);
        P_GET_UBOOL(B);
        P_FINISH;
        this->SetBool(Member,B);
    }
    DECLARE_FUNCTION(execSetFloat)
    {
        P_GET_STR(Member);
        P_GET_FLOAT(F);
        P_FINISH;
        this->SetFloat(Member,F);
    }
    DECLARE_FUNCTION(execSetInt)
    {
        P_GET_STR(Member);
        P_GET_INT(I);
        P_FINISH;
        this->SetInt(Member,I);
    }
    DECLARE_FUNCTION(execSetString)
    {
        P_GET_STR(Member);
        P_GET_STR(S);
        P_GET_OBJECT_OPTX(UTranslationContext,InContext,NULL);
        P_FINISH;
        this->SetString(Member,S,InContext);
    }
    DECLARE_FUNCTION(execSetObject)
    {
        P_GET_STR(Member);
        P_GET_OBJECT(UGFxObject,val);
        P_FINISH;
        this->SetObject(Member,val);
    }
    DECLARE_FUNCTION(execSetFunction)
    {
        P_GET_STR(Member);
        P_GET_OBJECT(UObject,context);
        P_GET_NAME(fname);
        P_FINISH;
        this->SetFunction(Member,context,fname);
    }
    DECLARE_FUNCTION(execTranslateString)
    {
        P_GET_STR(StringToTranslate);
        P_GET_OBJECT_OPTX(UTranslationContext,InContext,NULL);
        P_FINISH;
        *(FString*)Result=this->TranslateString(StringToTranslate,InContext);
    }
    DECLARE_FUNCTION(execGetDisplayInfo)
    {
        P_FINISH;
        *(struct FASDisplayInfo*)Result=this->GetDisplayInfo();
    }
    DECLARE_FUNCTION(execGetPosition)
    {
        P_GET_FLOAT_REF(X);
        P_GET_FLOAT_REF(Y);
        P_FINISH;
        *(UBOOL*)Result=this->GetPosition(X,Y);
    }
    DECLARE_FUNCTION(execGetColorTransform)
    {
        P_FINISH;
        *(struct FASColorTransform*)Result=this->GetColorTransform();
    }
    DECLARE_FUNCTION(execGetDisplayMatrix)
    {
        P_FINISH;
        *(FMatrix*)Result=this->GetDisplayMatrix();
    }
    DECLARE_FUNCTION(execGetDisplayMatrix3D)
    {
        P_FINISH;
        *(FMatrix*)Result=this->GetDisplayMatrix3D();
    }
    DECLARE_FUNCTION(execSetDisplayInfo)
    {
        P_GET_STRUCT(struct FASDisplayInfo,D);
        P_FINISH;
        this->SetDisplayInfo(D);
    }
    DECLARE_FUNCTION(execSetPosition)
    {
        P_GET_FLOAT(X);
        P_GET_FLOAT(Y);
        P_FINISH;
        this->SetPosition(X,Y);
    }
    DECLARE_FUNCTION(execSetColorTransform)
    {
        P_GET_STRUCT(struct FASColorTransform,cxform);
        P_FINISH;
        this->SetColorTransform(cxform);
    }
    DECLARE_FUNCTION(execSetDisplayMatrix);
    DECLARE_FUNCTION(execSetDisplayMatrix3D);
    DECLARE_FUNCTION(execSetVisible)
    {
        P_GET_UBOOL(Visible);
        P_FINISH;
        this->SetVisible(Visible);
    }
    DECLARE_FUNCTION(execGetText)
    {
        P_FINISH;
        *(FString*)Result=this->GetText();
    }
    DECLARE_FUNCTION(execSetText)
    {
        P_GET_STR(Text);
        P_GET_OBJECT_OPTX(UTranslationContext,InContext,NULL);
        P_FINISH;
        this->SetText(Text,InContext);
    }
    DECLARE_FUNCTION(execGetElement)
    {
        P_GET_INT(Index);
        P_FINISH;
        *(struct FASValue*)Result=this->GetElement(Index);
    }
    DECLARE_FUNCTION(execGetElementObject)
    {
        P_GET_INT(Index);
        P_GET_OBJECT_OPTX(UClass,Type,UGFxObject::StaticClass());
        P_FINISH;
        *(class UGFxObject**)Result=this->GetElementObject(Index,Type);
    }
    DECLARE_FUNCTION(execGetElementBool)
    {
        P_GET_INT(Index);
        P_FINISH;
        *(UBOOL*)Result=this->GetElementBool(Index);
    }
    DECLARE_FUNCTION(execGetElementFloat)
    {
        P_GET_INT(Index);
        P_FINISH;
        *(FLOAT*)Result=this->GetElementFloat(Index);
    }
    DECLARE_FUNCTION(execGetElementInt)
    {
        P_GET_INT(Index);
        P_FINISH;
        *(INT*)Result=this->GetElementInt(Index);
    }
    DECLARE_FUNCTION(execGetElementString)
    {
        P_GET_INT(Index);
        P_FINISH;
        *(FString*)Result=this->GetElementString(Index);
    }
    DECLARE_FUNCTION(execSetElement)
    {
        P_GET_INT(Index);
        P_GET_STRUCT_INIT(struct FASValue,Arg);
        P_FINISH;
        this->SetElement(Index,Arg);
    }
    DECLARE_FUNCTION(execSetElementObject)
    {
        P_GET_INT(Index);
        P_GET_OBJECT(UGFxObject,val);
        P_FINISH;
        this->SetElementObject(Index,val);
    }
    DECLARE_FUNCTION(execSetElementBool)
    {
        P_GET_INT(Index);
        P_GET_UBOOL(B);
        P_FINISH;
        this->SetElementBool(Index,B);
    }
    DECLARE_FUNCTION(execSetElementFloat)
    {
        P_GET_INT(Index);
        P_GET_FLOAT(F);
        P_FINISH;
        this->SetElementFloat(Index,F);
    }
    DECLARE_FUNCTION(execSetElementInt)
    {
        P_GET_INT(Index);
        P_GET_INT(I);
        P_FINISH;
        this->SetElementInt(Index,I);
    }
    DECLARE_FUNCTION(execSetElementString)
    {
        P_GET_INT(Index);
        P_GET_STR(S);
        P_FINISH;
        this->SetElementString(Index,S);
    }
    DECLARE_FUNCTION(execGetElementDisplayInfo)
    {
        P_GET_INT(Index);
        P_FINISH;
        *(struct FASDisplayInfo*)Result=this->GetElementDisplayInfo(Index);
    }
    DECLARE_FUNCTION(execGetElementDisplayMatrix)
    {
        P_GET_INT(Index);
        P_FINISH;
        *(FMatrix*)Result=this->GetElementDisplayMatrix(Index);
    }
    DECLARE_FUNCTION(execSetElementDisplayInfo)
    {
        P_GET_INT(Index);
        P_GET_STRUCT(struct FASDisplayInfo,D);
        P_FINISH;
        this->SetElementDisplayInfo(Index,D);
    }
    DECLARE_FUNCTION(execSetElementDisplayMatrix);
    DECLARE_FUNCTION(execSetElementVisible)
    {
        P_GET_INT(Index);
        P_GET_UBOOL(Visible);
        P_FINISH;
        this->SetElementVisible(Index,Visible);
    }
    DECLARE_FUNCTION(execSetElementPosition)
    {
        P_GET_INT(Index);
        P_GET_FLOAT(X);
        P_GET_FLOAT(Y);
        P_FINISH;
        this->SetElementPosition(Index,X,Y);
    }
    DECLARE_FUNCTION(execSetElementColorTransform)
    {
        P_GET_INT(Index);
        P_GET_STRUCT(struct FASColorTransform,cxform);
        P_FINISH;
        this->SetElementColorTransform(Index,cxform);
    }
    DECLARE_FUNCTION(execGetElementMember)
    {
        P_GET_INT(Index);
        P_GET_STR(Member);
        P_FINISH;
        *(struct FASValue*)Result=this->GetElementMember(Index,Member);
    }
    DECLARE_FUNCTION(execGetElementMemberObject)
    {
        P_GET_INT(Index);
        P_GET_STR(Member);
        P_GET_OBJECT_OPTX(UClass,Type,UGFxObject::StaticClass());
        P_FINISH;
        *(class UGFxObject**)Result=this->GetElementMemberObject(Index,Member,Type);
    }
    DECLARE_FUNCTION(execGetElementMemberBool)
    {
        P_GET_INT(Index);
        P_GET_STR(Member);
        P_FINISH;
        *(UBOOL*)Result=this->GetElementMemberBool(Index,Member);
    }
    DECLARE_FUNCTION(execGetElementMemberFloat)
    {
        P_GET_INT(Index);
        P_GET_STR(Member);
        P_FINISH;
        *(FLOAT*)Result=this->GetElementMemberFloat(Index,Member);
    }
    DECLARE_FUNCTION(execGetElementMemberInt)
    {
        P_GET_INT(Index);
        P_GET_STR(Member);
        P_FINISH;
        *(INT*)Result=this->GetElementMemberInt(Index,Member);
    }
    DECLARE_FUNCTION(execGetElementMemberString)
    {
        P_GET_INT(Index);
        P_GET_STR(Member);
        P_FINISH;
        *(FString*)Result=this->GetElementMemberString(Index,Member);
    }
    DECLARE_FUNCTION(execSetElementMember)
    {
        P_GET_INT(Index);
        P_GET_STR(Member);
        P_GET_STRUCT_INIT(struct FASValue,Arg);
        P_FINISH;
        this->SetElementMember(Index,Member,Arg);
    }
    DECLARE_FUNCTION(execSetElementMemberObject)
    {
        P_GET_INT(Index);
        P_GET_STR(Member);
        P_GET_OBJECT(UGFxObject,val);
        P_FINISH;
        this->SetElementMemberObject(Index,Member,val);
    }
    DECLARE_FUNCTION(execSetElementMemberBool)
    {
        P_GET_INT(Index);
        P_GET_STR(Member);
        P_GET_UBOOL(B);
        P_FINISH;
        this->SetElementMemberBool(Index,Member,B);
    }
    DECLARE_FUNCTION(execSetElementMemberFloat)
    {
        P_GET_INT(Index);
        P_GET_STR(Member);
        P_GET_FLOAT(F);
        P_FINISH;
        this->SetElementMemberFloat(Index,Member,F);
    }
    DECLARE_FUNCTION(execSetElementMemberInt)
    {
        P_GET_INT(Index);
        P_GET_STR(Member);
        P_GET_INT(I);
        P_FINISH;
        this->SetElementMemberInt(Index,Member,I);
    }
    DECLARE_FUNCTION(execSetElementMemberString)
    {
        P_GET_INT(Index);
        P_GET_STR(Member);
        P_GET_STR(S);
        P_FINISH;
        this->SetElementMemberString(Index,Member,S);
    }
    DECLARE_FUNCTION(execActionScriptSetFunction);
    DECLARE_FUNCTION(execActionScriptSetFunctionOn);
    DECLARE_FUNCTION(execInvoke)
    {
        P_GET_STR(Member);
        P_GET_TARRAY(struct FASValue,args);
        P_FINISH;
        *(struct FASValue*)Result=this->Invoke(Member,args);
    }
    DECLARE_FUNCTION(execActionScriptVoid);
    DECLARE_FUNCTION(execActionScriptInt);
    DECLARE_FUNCTION(execActionScriptFloat);
    DECLARE_FUNCTION(execActionScriptString);
    DECLARE_FUNCTION(execActionScriptObject);
    DECLARE_FUNCTION(execActionScriptArray);
    DECLARE_FUNCTION(execGotoAndPlay)
    {
        P_GET_STR(frame);
        P_FINISH;
        this->GotoAndPlay(frame);
    }
    DECLARE_FUNCTION(execGotoAndPlayI)
    {
        P_GET_INT(frame);
        P_FINISH;
        this->GotoAndPlayI(frame);
    }
    DECLARE_FUNCTION(execGotoAndStop)
    {
        P_GET_STR(frame);
        P_FINISH;
        this->GotoAndStop(frame);
    }
    DECLARE_FUNCTION(execGotoAndStopI)
    {
        P_GET_INT(frame);
        P_FINISH;
        this->GotoAndStopI(frame);
    }
    DECLARE_FUNCTION(execCreateEmptyMovieClip)
    {
        P_GET_STR(instancename);
        P_GET_INT_OPTX(Depth,-1);
        P_GET_OBJECT_OPTX(UClass,Type,UGFxObject::StaticClass());
        P_FINISH;
        *(class UGFxObject**)Result=this->CreateEmptyMovieClip(instancename,Depth,Type);
    }
    DECLARE_FUNCTION(execAttachMovie)
    {
        P_GET_STR(symbolname);
        P_GET_STR(instancename);
        P_GET_INT_OPTX(Depth,-1);
        P_GET_OBJECT_OPTX(UClass,Type,UGFxObject::StaticClass());
        P_FINISH;
        *(class UGFxObject**)Result=this->AttachMovie(symbolname,instancename,Depth,Type);
    }
    UBOOL eventWidgetUnloaded(FName WidgetName,FName WidgetPath,class UGFxObject* Widget)
    {
        GFxObject_eventWidgetUnloaded_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.WidgetName=WidgetName;
        Parms.WidgetPath=WidgetPath;
        Parms.Widget=Widget;
        ProcessEvent(FindFunctionChecked(GFXUI_WidgetUnloaded),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventWidgetInitialized(FName WidgetName,FName WidgetPath,class UGFxObject* Widget)
    {
        GFxObject_eventWidgetInitialized_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.WidgetName=WidgetName;
        Parms.WidgetPath=WidgetPath;
        Parms.Widget=Widget;
        ProcessEvent(FindFunctionChecked(GFXUI_WidgetInitialized),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGFxObject,UObject,0,GFxUI)
    DECLARE_WITHIN(UGFxMoviePlayer)
	virtual void Clear();
	virtual void BeginDestroy();

	void SetValue(void* GFxObject);
	
	void SetDisplayMatrix(const FMatrix& m);
	void SetDisplayMatrix3D(const FMatrix& m);
	void SetElementDisplayMatrix(INT Index, const FMatrix& m);
};

class UGFxRawData : public UObject
{
public:
    //## BEGIN PROPS GFxRawData
    TArrayNoInit<BYTE> RawData;
    TArrayNoInit<FString> ReferencedSwfs;
    TArrayNoInit<class UObject*> References;
    TArrayNoInit<class UObject*> UserReferences;
    //## END PROPS GFxRawData

    DECLARE_CLASS(UGFxRawData,UObject,0,GFxUI)
	// Accessors
	void SetRawData(const BYTE *data, UINT size);
};

class USwfMovie : public UGFxRawData
{
public:
    //## BEGIN PROPS SwfMovie
    BITFIELD bUsesFontlib:1;
    BITFIELD bSetSRGBOnImportedTextures:1;
    BITFIELD bPackTextures:1;
    BITFIELD bForceSquarePacking:1;
#if WITH_EDITORONLY_DATA
    FStringNoInit SourceFile;
#endif // WITH_EDITORONLY_DATA
    INT PackTextureSize;
    BYTE TextureRescale;
    FStringNoInit TextureFormat;
#if WITH_EDITORONLY_DATA
    FStringNoInit SourceFileTimestamp;
#endif // WITH_EDITORONLY_DATA
    INT RTTextures;
    INT RTVideoTextures;
#if WITH_EDITORONLY_DATA
    QWORD ImportTimeStamp;
#endif // WITH_EDITORONLY_DATA
    //## END PROPS SwfMovie

    DECLARE_CLASS(USwfMovie,UGFxRawData,0,GFxUI)
	/** Set sRGB = OFF on all referenced Texture2Ds */
	virtual void PostLoad( void );
};

class UFlashMovie : public USwfMovie
{
public:
    //## BEGIN PROPS FlashMovie
    //## END PROPS FlashMovie

    DECLARE_CLASS(UFlashMovie,USwfMovie,0,GFxUI)
    NO_DEFAULT_CONSTRUCTOR(UFlashMovie)
};

#undef DECLARE_CLASS
#undef DECLARE_CASTED_CLASS
#undef DECLARE_ABSTRACT_CLASS
#undef DECLARE_ABSTRACT_CASTED_CLASS
#endif // !INCLUDED_GFXUI_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UGFxInteraction,-1,execCloseAllMoviePlayers);
AUTOGENERATE_FUNCTION(UGFxInteraction,-1,execNotifySplitscreenLayoutChanged);
AUTOGENERATE_FUNCTION(UGFxInteraction,-1,execNotifyPlayerRemoved);
AUTOGENERATE_FUNCTION(UGFxInteraction,-1,execNotifyPlayerAdded);
AUTOGENERATE_FUNCTION(UGFxInteraction,-1,execNotifyGameSessionEnded);
AUTOGENERATE_FUNCTION(UGFxInteraction,-1,execGetFocusMovie);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execUpdateSplitscreenLayout);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetWidgetPathBinding);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execActionScriptConstructor);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execActionScriptObject);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execActionScriptString);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execActionScriptFloat);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execActionScriptInt);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execActionScriptVoid);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execInvoke);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execActionScriptSetFunction);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execCreateArray);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execCreateObject);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetVariableStringArray);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetVariableFloatArray);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetVariableIntArray);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetVariableArray);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execGetVariableStringArray);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execGetVariableFloatArray);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execGetVariableIntArray);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execGetVariableArray);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetVariableObject);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetVariableString);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetVariableInt);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetVariableNumber);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetVariableBool);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetVariable);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execGetVariableObject);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execGetVariableString);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execGetVariableInt);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execGetVariableNumber);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execGetVariableBool);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execGetVariable);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execGetAVMVersion);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execFlushPlayerInput);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execClearFocusIgnoreKeys);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execAddFocusIgnoreKey);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execClearCaptureKeys);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execAddCaptureKey);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetMovieCanReceiveInput);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetMovieCanReceiveFocus);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetPerspective3D);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetView3D);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execGetVisibleFrameRect);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetAlignment);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetViewScaleMode);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetViewport);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execGetGameViewportClient);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetPriority);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetExternalTexture);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetTimingMode);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execClose);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execSetPause);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execPostAdvance);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execAdvance);
AUTOGENERATE_FUNCTION(UGFxMoviePlayer,-1,execStart);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execAttachMovie);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execCreateEmptyMovieClip);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGotoAndStopI);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGotoAndStop);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGotoAndPlayI);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGotoAndPlay);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execActionScriptArray);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execActionScriptObject);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execActionScriptString);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execActionScriptFloat);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execActionScriptInt);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execActionScriptVoid);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execInvoke);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execActionScriptSetFunctionOn);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execActionScriptSetFunction);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementMemberString);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementMemberInt);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementMemberFloat);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementMemberBool);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementMemberObject);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementMember);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetElementMemberString);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetElementMemberInt);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetElementMemberFloat);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetElementMemberBool);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetElementMemberObject);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetElementMember);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementColorTransform);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementPosition);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementVisible);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementDisplayMatrix);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementDisplayInfo);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetElementDisplayMatrix);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetElementDisplayInfo);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementString);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementInt);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementFloat);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementBool);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElementObject);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetElement);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetElementString);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetElementInt);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetElementFloat);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetElementBool);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetElementObject);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetElement);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetText);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetText);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetVisible);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetDisplayMatrix3D);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetDisplayMatrix);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetColorTransform);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetPosition);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetDisplayInfo);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetDisplayMatrix3D);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetDisplayMatrix);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetColorTransform);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetPosition);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetDisplayInfo);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execTranslateString);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetFunction);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetObject);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetString);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetInt);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetFloat);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSetBool);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execSet);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetObject);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetString);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetInt);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetFloat);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGetBool);
AUTOGENERATE_FUNCTION(UGFxObject,-1,execGet);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef GFXUI_NATIVE_DEFS
#define GFXUI_NATIVE_DEFS

#define AUTO_INITIALIZE_REGISTRANTS_GFXUI \
	UGFxEngine::StaticClass(); \
	UGFxFSCmdHandler::StaticClass(); \
	UGFxInteraction::StaticClass(); \
	GNativeLookupFuncs.Set(FName("GFxInteraction"), GGFxUIUGFxInteractionNatives); \
	UGFxMoviePlayer::StaticClass(); \
	GNativeLookupFuncs.Set(FName("GFxMoviePlayer"), GGFxUIUGFxMoviePlayerNatives); \
	UGFxObject::StaticClass(); \
	GNativeLookupFuncs.Set(FName("GFxObject"), GGFxUIUGFxObjectNatives); \
	UGFxRawData::StaticClass(); \
	USwfMovie::StaticClass(); \
	UFlashMovie::StaticClass(); \

#endif // GFXUI_NATIVE_DEFS

#ifdef NATIVES_ONLY
FNativeFunctionLookup GGFxUIUGFxInteractionNatives[] = 
{ 
	MAP_NATIVE(UGFxInteraction, execCloseAllMoviePlayers)
	MAP_NATIVE(UGFxInteraction, execNotifySplitscreenLayoutChanged)
	MAP_NATIVE(UGFxInteraction, execNotifyPlayerRemoved)
	MAP_NATIVE(UGFxInteraction, execNotifyPlayerAdded)
	MAP_NATIVE(UGFxInteraction, execNotifyGameSessionEnded)
	MAP_NATIVE(UGFxInteraction, execGetFocusMovie)
	{NULL, NULL}
};

FNativeFunctionLookup GGFxUIUGFxMoviePlayerNatives[] = 
{ 
	MAP_NATIVE(UGFxMoviePlayer, execUpdateSplitscreenLayout)
	MAP_NATIVE(UGFxMoviePlayer, execSetWidgetPathBinding)
	MAP_NATIVE(UGFxMoviePlayer, execActionScriptConstructor)
	MAP_NATIVE(UGFxMoviePlayer, execActionScriptObject)
	MAP_NATIVE(UGFxMoviePlayer, execActionScriptString)
	MAP_NATIVE(UGFxMoviePlayer, execActionScriptFloat)
	MAP_NATIVE(UGFxMoviePlayer, execActionScriptInt)
	MAP_NATIVE(UGFxMoviePlayer, execActionScriptVoid)
	MAP_NATIVE(UGFxMoviePlayer, execInvoke)
	MAP_NATIVE(UGFxMoviePlayer, execActionScriptSetFunction)
	MAP_NATIVE(UGFxMoviePlayer, execCreateArray)
	MAP_NATIVE(UGFxMoviePlayer, execCreateObject)
	MAP_NATIVE(UGFxMoviePlayer, execSetVariableStringArray)
	MAP_NATIVE(UGFxMoviePlayer, execSetVariableFloatArray)
	MAP_NATIVE(UGFxMoviePlayer, execSetVariableIntArray)
	MAP_NATIVE(UGFxMoviePlayer, execSetVariableArray)
	MAP_NATIVE(UGFxMoviePlayer, execGetVariableStringArray)
	MAP_NATIVE(UGFxMoviePlayer, execGetVariableFloatArray)
	MAP_NATIVE(UGFxMoviePlayer, execGetVariableIntArray)
	MAP_NATIVE(UGFxMoviePlayer, execGetVariableArray)
	MAP_NATIVE(UGFxMoviePlayer, execSetVariableObject)
	MAP_NATIVE(UGFxMoviePlayer, execSetVariableString)
	MAP_NATIVE(UGFxMoviePlayer, execSetVariableInt)
	MAP_NATIVE(UGFxMoviePlayer, execSetVariableNumber)
	MAP_NATIVE(UGFxMoviePlayer, execSetVariableBool)
	MAP_NATIVE(UGFxMoviePlayer, execSetVariable)
	MAP_NATIVE(UGFxMoviePlayer, execGetVariableObject)
	MAP_NATIVE(UGFxMoviePlayer, execGetVariableString)
	MAP_NATIVE(UGFxMoviePlayer, execGetVariableInt)
	MAP_NATIVE(UGFxMoviePlayer, execGetVariableNumber)
	MAP_NATIVE(UGFxMoviePlayer, execGetVariableBool)
	MAP_NATIVE(UGFxMoviePlayer, execGetVariable)
	MAP_NATIVE(UGFxMoviePlayer, execGetAVMVersion)
	MAP_NATIVE(UGFxMoviePlayer, execFlushPlayerInput)
	MAP_NATIVE(UGFxMoviePlayer, execClearFocusIgnoreKeys)
	MAP_NATIVE(UGFxMoviePlayer, execAddFocusIgnoreKey)
	MAP_NATIVE(UGFxMoviePlayer, execClearCaptureKeys)
	MAP_NATIVE(UGFxMoviePlayer, execAddCaptureKey)
	MAP_NATIVE(UGFxMoviePlayer, execSetMovieCanReceiveInput)
	MAP_NATIVE(UGFxMoviePlayer, execSetMovieCanReceiveFocus)
	MAP_NATIVE(UGFxMoviePlayer, execSetPerspective3D)
	MAP_NATIVE(UGFxMoviePlayer, execSetView3D)
	MAP_NATIVE(UGFxMoviePlayer, execGetVisibleFrameRect)
	MAP_NATIVE(UGFxMoviePlayer, execSetAlignment)
	MAP_NATIVE(UGFxMoviePlayer, execSetViewScaleMode)
	MAP_NATIVE(UGFxMoviePlayer, execSetViewport)
	MAP_NATIVE(UGFxMoviePlayer, execGetGameViewportClient)
	MAP_NATIVE(UGFxMoviePlayer, execSetPriority)
	MAP_NATIVE(UGFxMoviePlayer, execSetExternalTexture)
	MAP_NATIVE(UGFxMoviePlayer, execSetTimingMode)
	MAP_NATIVE(UGFxMoviePlayer, execClose)
	MAP_NATIVE(UGFxMoviePlayer, execSetPause)
	MAP_NATIVE(UGFxMoviePlayer, execPostAdvance)
	MAP_NATIVE(UGFxMoviePlayer, execAdvance)
	MAP_NATIVE(UGFxMoviePlayer, execStart)
	{NULL, NULL}
};

FNativeFunctionLookup GGFxUIUGFxObjectNatives[] = 
{ 
	MAP_NATIVE(UGFxObject, execAttachMovie)
	MAP_NATIVE(UGFxObject, execCreateEmptyMovieClip)
	MAP_NATIVE(UGFxObject, execGotoAndStopI)
	MAP_NATIVE(UGFxObject, execGotoAndStop)
	MAP_NATIVE(UGFxObject, execGotoAndPlayI)
	MAP_NATIVE(UGFxObject, execGotoAndPlay)
	MAP_NATIVE(UGFxObject, execActionScriptArray)
	MAP_NATIVE(UGFxObject, execActionScriptObject)
	MAP_NATIVE(UGFxObject, execActionScriptString)
	MAP_NATIVE(UGFxObject, execActionScriptFloat)
	MAP_NATIVE(UGFxObject, execActionScriptInt)
	MAP_NATIVE(UGFxObject, execActionScriptVoid)
	MAP_NATIVE(UGFxObject, execInvoke)
	MAP_NATIVE(UGFxObject, execActionScriptSetFunctionOn)
	MAP_NATIVE(UGFxObject, execActionScriptSetFunction)
	MAP_NATIVE(UGFxObject, execSetElementMemberString)
	MAP_NATIVE(UGFxObject, execSetElementMemberInt)
	MAP_NATIVE(UGFxObject, execSetElementMemberFloat)
	MAP_NATIVE(UGFxObject, execSetElementMemberBool)
	MAP_NATIVE(UGFxObject, execSetElementMemberObject)
	MAP_NATIVE(UGFxObject, execSetElementMember)
	MAP_NATIVE(UGFxObject, execGetElementMemberString)
	MAP_NATIVE(UGFxObject, execGetElementMemberInt)
	MAP_NATIVE(UGFxObject, execGetElementMemberFloat)
	MAP_NATIVE(UGFxObject, execGetElementMemberBool)
	MAP_NATIVE(UGFxObject, execGetElementMemberObject)
	MAP_NATIVE(UGFxObject, execGetElementMember)
	MAP_NATIVE(UGFxObject, execSetElementColorTransform)
	MAP_NATIVE(UGFxObject, execSetElementPosition)
	MAP_NATIVE(UGFxObject, execSetElementVisible)
	MAP_NATIVE(UGFxObject, execSetElementDisplayMatrix)
	MAP_NATIVE(UGFxObject, execSetElementDisplayInfo)
	MAP_NATIVE(UGFxObject, execGetElementDisplayMatrix)
	MAP_NATIVE(UGFxObject, execGetElementDisplayInfo)
	MAP_NATIVE(UGFxObject, execSetElementString)
	MAP_NATIVE(UGFxObject, execSetElementInt)
	MAP_NATIVE(UGFxObject, execSetElementFloat)
	MAP_NATIVE(UGFxObject, execSetElementBool)
	MAP_NATIVE(UGFxObject, execSetElementObject)
	MAP_NATIVE(UGFxObject, execSetElement)
	MAP_NATIVE(UGFxObject, execGetElementString)
	MAP_NATIVE(UGFxObject, execGetElementInt)
	MAP_NATIVE(UGFxObject, execGetElementFloat)
	MAP_NATIVE(UGFxObject, execGetElementBool)
	MAP_NATIVE(UGFxObject, execGetElementObject)
	MAP_NATIVE(UGFxObject, execGetElement)
	MAP_NATIVE(UGFxObject, execSetText)
	MAP_NATIVE(UGFxObject, execGetText)
	MAP_NATIVE(UGFxObject, execSetVisible)
	MAP_NATIVE(UGFxObject, execSetDisplayMatrix3D)
	MAP_NATIVE(UGFxObject, execSetDisplayMatrix)
	MAP_NATIVE(UGFxObject, execSetColorTransform)
	MAP_NATIVE(UGFxObject, execSetPosition)
	MAP_NATIVE(UGFxObject, execSetDisplayInfo)
	MAP_NATIVE(UGFxObject, execGetDisplayMatrix3D)
	MAP_NATIVE(UGFxObject, execGetDisplayMatrix)
	MAP_NATIVE(UGFxObject, execGetColorTransform)
	MAP_NATIVE(UGFxObject, execGetPosition)
	MAP_NATIVE(UGFxObject, execGetDisplayInfo)
	MAP_NATIVE(UGFxObject, execTranslateString)
	MAP_NATIVE(UGFxObject, execSetFunction)
	MAP_NATIVE(UGFxObject, execSetObject)
	MAP_NATIVE(UGFxObject, execSetString)
	MAP_NATIVE(UGFxObject, execSetInt)
	MAP_NATIVE(UGFxObject, execSetFloat)
	MAP_NATIVE(UGFxObject, execSetBool)
	MAP_NATIVE(UGFxObject, execSet)
	MAP_NATIVE(UGFxObject, execGetObject)
	MAP_NATIVE(UGFxObject, execGetString)
	MAP_NATIVE(UGFxObject, execGetInt)
	MAP_NATIVE(UGFxObject, execGetFloat)
	MAP_NATIVE(UGFxObject, execGetBool)
	MAP_NATIVE(UGFxObject, execGet)
	{NULL, NULL}
};

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(UGFxEngine,GFxEngine,GCReferences)
VERIFY_CLASS_OFFSET_NODIE(UGFxEngine,GFxEngine,RefCount)
VERIFY_CLASS_SIZE_NODIE(UGFxEngine)
VERIFY_CLASS_SIZE_NODIE(UGFxFSCmdHandler)
VERIFY_CLASS_SIZE_NODIE(UGFxInteraction)
VERIFY_CLASS_OFFSET_NODIE(UGFxMoviePlayer,GFxMoviePlayer,pMovie)
VERIFY_CLASS_OFFSET_NODIE(UGFxMoviePlayer,GFxMoviePlayer,__OnPostAdvance__Delegate)
VERIFY_CLASS_SIZE_NODIE(UGFxMoviePlayer)
VERIFY_CLASS_OFFSET_NODIE(UGFxObject,GFxObject,Value)
VERIFY_CLASS_OFFSET_NODIE(UGFxObject,GFxObject,SubWidgetBindings)
VERIFY_CLASS_SIZE_NODIE(UGFxObject)
VERIFY_CLASS_OFFSET_NODIE(UGFxRawData,GFxRawData,RawData)
VERIFY_CLASS_OFFSET_NODIE(UGFxRawData,GFxRawData,UserReferences)
VERIFY_CLASS_SIZE_NODIE(UGFxRawData)
#if WITH_EDITORONLY_DATA
VERIFY_CLASS_OFFSET_NODIE(USwfMovie,SwfMovie,SourceFile)
#else
VERIFY_CLASS_OFFSET_NODIE(USwfMovie,SwfMovie,PackTextureSize)
#endif
#if WITH_EDITORONLY_DATA
VERIFY_CLASS_OFFSET_NODIE(USwfMovie,SwfMovie,ImportTimeStamp)
#else
VERIFY_CLASS_OFFSET_NODIE(USwfMovie,SwfMovie,RTVideoTextures)
#endif
VERIFY_CLASS_SIZE_NODIE(USwfMovie)
VERIFY_CLASS_SIZE_NODIE(UFlashMovie)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
