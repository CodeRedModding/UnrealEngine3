/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#include "GFxUINames.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_GFXUI_UISEQUENCE_ENUMS
#define INCLUDED_GFXUI_UISEQUENCE_ENUMS 1


#endif // !INCLUDED_GFXUI_UISEQUENCE_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_GFXUI_UISEQUENCE_CLASSES
#define INCLUDED_GFXUI_UISEQUENCE_CLASSES 1
#define ENABLE_DECLARECLASS_MACRO 1
#include "UnObjBas.h"
#undef ENABLE_DECLARECLASS_MACRO

class UGFxAction_CloseMovie : public USequenceAction
{
public:
    //## BEGIN PROPS GFxAction_CloseMovie
    class UGFxMoviePlayer* Movie;
    BITFIELD bUnload:1;
    SCRIPT_ALIGN;
    //## END PROPS GFxAction_CloseMovie

    DECLARE_CLASS(UGFxAction_CloseMovie,USequenceAction,0,GFxUI)
	virtual void Activated();
};

class UGFxAction_GetVariable : public USequenceAction
{
public:
    //## BEGIN PROPS GFxAction_GetVariable
    class UGFxMoviePlayer* Movie;
    FStringNoInit Variable;
    //## END PROPS GFxAction_GetVariable

    DECLARE_CLASS(UGFxAction_GetVariable,USequenceAction,0,GFxUI)
	virtual void Activated();
};

class UGFxAction_Invoke : public USequenceAction
{
public:
    //## BEGIN PROPS GFxAction_Invoke
    class UGFxMoviePlayer* Movie;
    FStringNoInit MethodName;
    TArrayNoInit<struct FASValue> Arguments;
    //## END PROPS GFxAction_Invoke

    DECLARE_CLASS(UGFxAction_Invoke,USequenceAction,0,GFxUI)
	virtual void Activated();
};

class UGFxAction_OpenMovie : public USequenceAction
{
public:
    //## BEGIN PROPS GFxAction_OpenMovie
    class USwfMovie* Movie;
    class UClass* MoviePlayerClass;
    class UGFxMoviePlayer* MoviePlayer;
    BITFIELD bTakeFocus:1;
    BITFIELD bCaptureInput:1;
    BITFIELD bStartPaused:1;
    BITFIELD bEnableGammaCorrection:1;
    BITFIELD bDisplayWithHudOff:1;
    SCRIPT_ALIGN;
    BYTE RenderTextureMode;
    class UTextureRenderTarget2D* RenderTexture;
    TArrayNoInit<FName> CaptureKeys;
    TArrayNoInit<FName> FocusIgnoreKeys;
    //## END PROPS GFxAction_OpenMovie

    DECLARE_CLASS(UGFxAction_OpenMovie,USequenceAction,0,GFxUI)
	virtual void Activated();
};

class UGFxAction_SetCaptureKeys : public USequenceAction
{
public:
    //## BEGIN PROPS GFxAction_SetCaptureKeys
    class UGFxMoviePlayer* Movie;
    TArrayNoInit<FName> CaptureKeys;
    //## END PROPS GFxAction_SetCaptureKeys

    DECLARE_CLASS(UGFxAction_SetCaptureKeys,USequenceAction,0,GFxUI)
	virtual void Activated();

	void SetKeys();
	void RemoveKeys();
};

class UGFxAction_SetVariable : public USequenceAction
{
public:
    //## BEGIN PROPS GFxAction_SetVariable
    class UGFxMoviePlayer* Movie;
    FStringNoInit Variable;
    //## END PROPS GFxAction_SetVariable

    DECLARE_CLASS(UGFxAction_SetVariable,USequenceAction,0,GFxUI)
	virtual void Activated();
};

class UGFxFSCmdHandler_Kismet : public UGFxFSCmdHandler
{
public:
    //## BEGIN PROPS GFxFSCmdHandler_Kismet
    //## END PROPS GFxFSCmdHandler_Kismet

    virtual UBOOL FSCommand(class UGFxMoviePlayer* Movie,class UGFxEvent_FSCommand* Event,const FString& Cmd,const FString& Arg);
    DECLARE_FUNCTION(execFSCommand)
    {
        P_GET_OBJECT(UGFxMoviePlayer,Movie);
        P_GET_OBJECT(UGFxEvent_FSCommand,Event);
        P_GET_STR(Cmd);
        P_GET_STR(Arg);
        P_FINISH;
        *(UBOOL*)Result=this->FSCommand(Movie,Event,Cmd,Arg);
    }
    DECLARE_CLASS(UGFxFSCmdHandler_Kismet,UGFxFSCmdHandler,0,GFxUI)
    NO_DEFAULT_CONSTRUCTOR(UGFxFSCmdHandler_Kismet)
};

class UGFxEvent_FSCommand : public USequenceEvent
{
public:
    //## BEGIN PROPS GFxEvent_FSCommand
    class USwfMovie* Movie;
    FStringNoInit FSCommand;
    class UGFxFSCmdHandler_Kismet* Handler;
    //## END PROPS GFxEvent_FSCommand

    DECLARE_CLASS(UGFxEvent_FSCommand,USequenceEvent,0,GFxUI)
	virtual void FinishDestroy();
	virtual UBOOL RegisterEvent();

	/**
	 * Adds an error message to the map check dialog if this SequenceEvent's EventActivator is bStatic
	 */
#if WITH_EDITOR
	virtual void CheckForErrors();
#endif
};

#undef DECLARE_CLASS
#undef DECLARE_CASTED_CLASS
#undef DECLARE_ABSTRACT_CLASS
#undef DECLARE_ABSTRACT_CASTED_CLASS
#endif // !INCLUDED_GFXUI_UISEQUENCE_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UGFxFSCmdHandler_Kismet,-1,execFSCommand);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef GFXUI_UISEQUENCE_NATIVE_DEFS
#define GFXUI_UISEQUENCE_NATIVE_DEFS

#define AUTO_INITIALIZE_REGISTRANTS_GFXUI_UISEQUENCE \
	UGFxAction_CloseMovie::StaticClass(); \
	UGFxAction_GetVariable::StaticClass(); \
	UGFxAction_Invoke::StaticClass(); \
	UGFxAction_OpenMovie::StaticClass(); \
	UGFxAction_SetCaptureKeys::StaticClass(); \
	UGFxAction_SetVariable::StaticClass(); \
	UGFxEvent_FSCommand::StaticClass(); \
	UGFxFSCmdHandler_Kismet::StaticClass(); \
	GNativeLookupFuncs.Set(FName("GFxFSCmdHandler_Kismet"), GGFxUIUGFxFSCmdHandler_KismetNatives); \

#endif // GFXUI_UISEQUENCE_NATIVE_DEFS

#ifdef NATIVES_ONLY
FNativeFunctionLookup GGFxUIUGFxFSCmdHandler_KismetNatives[] = 
{ 
	MAP_NATIVE(UGFxFSCmdHandler_Kismet, execFSCommand)
	{NULL, NULL}
};

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(UGFxAction_CloseMovie,GFxAction_CloseMovie,Movie)
VERIFY_CLASS_SIZE_NODIE(UGFxAction_CloseMovie)
VERIFY_CLASS_OFFSET_NODIE(UGFxAction_GetVariable,GFxAction_GetVariable,Movie)
VERIFY_CLASS_OFFSET_NODIE(UGFxAction_GetVariable,GFxAction_GetVariable,Variable)
VERIFY_CLASS_SIZE_NODIE(UGFxAction_GetVariable)
VERIFY_CLASS_OFFSET_NODIE(UGFxAction_Invoke,GFxAction_Invoke,Movie)
VERIFY_CLASS_OFFSET_NODIE(UGFxAction_Invoke,GFxAction_Invoke,Arguments)
VERIFY_CLASS_SIZE_NODIE(UGFxAction_Invoke)
VERIFY_CLASS_OFFSET_NODIE(UGFxAction_OpenMovie,GFxAction_OpenMovie,Movie)
VERIFY_CLASS_OFFSET_NODIE(UGFxAction_OpenMovie,GFxAction_OpenMovie,FocusIgnoreKeys)
VERIFY_CLASS_SIZE_NODIE(UGFxAction_OpenMovie)
VERIFY_CLASS_OFFSET_NODIE(UGFxAction_SetCaptureKeys,GFxAction_SetCaptureKeys,Movie)
VERIFY_CLASS_OFFSET_NODIE(UGFxAction_SetCaptureKeys,GFxAction_SetCaptureKeys,CaptureKeys)
VERIFY_CLASS_SIZE_NODIE(UGFxAction_SetCaptureKeys)
VERIFY_CLASS_OFFSET_NODIE(UGFxAction_SetVariable,GFxAction_SetVariable,Movie)
VERIFY_CLASS_OFFSET_NODIE(UGFxAction_SetVariable,GFxAction_SetVariable,Variable)
VERIFY_CLASS_SIZE_NODIE(UGFxAction_SetVariable)
VERIFY_CLASS_OFFSET_NODIE(UGFxEvent_FSCommand,GFxEvent_FSCommand,Movie)
VERIFY_CLASS_OFFSET_NODIE(UGFxEvent_FSCommand,GFxEvent_FSCommand,Handler)
VERIFY_CLASS_SIZE_NODIE(UGFxEvent_FSCommand)
VERIFY_CLASS_SIZE_NODIE(UGFxFSCmdHandler_Kismet)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
