/**
 * Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
 */

#ifndef INCLUDED_ONLINEASYNCTASKMANAGER_H
#define INCLUDED_ONLINEASYNCTASKMANAGER_H 1

// NOTE: This is the UE4 multithreaded variant of async tasks; this is used with Steam, whereas Live/GameSpy use the async task class in
//		OnlineSubsystemUtilities.h


/**
 * Base class of any async task that can be returned to the game thread by the async task manager
 * May originate on the game thread, or generated by an external platform service callback
 */
class FOnlineAsyncItem
{
protected:
	/** Set by FOnlineAsyncTaskManager::Init */
	static DWORD GameThreadId;

	/** Set by FonlineAsyncTaskManager::Run */
	static DWORD OnlineThreadId;


	/** Time the task completed */
	DOUBLE CompleteTime;

	/** Hidden constructor */
	FOnlineAsyncItem()
		: CompleteTime(0)
	{
	}


	friend class FOnlineAsyncTaskManager;


public:

	/**
	 * Base virtual destructor
	 */
	virtual ~FOnlineAsyncItem()
	{
	}

	/**
	 * Get a human readable description of task
	 *
	 * @return	The description of the task
	 */
	virtual FString ToString() const = 0;

	/**
	 * Whether or not the task manager should execute this item when it returns to the game thread
	 * Used as a hook-in to check that the object the item is sending results to, is still valid
	 *
	 * @return	Whether or not the execute Finalize and TriggerDelegates
	 */
	virtual UBOOL CanExecute()
	{
		return TRUE;
	}

	/**
	 * Whether or not the task manager should delete this item once done with it
	 *
	 * @return	Whether or not the async task manager is responsible for deleting this item
	 */
	virtual UBOOL CanDelete()
	{
		return TRUE;
	}

	/**
	 * Whether or not this item should block other items from returning until it has completed
	 *
	 * @return	Whether or not the item should block
	 */
	virtual UBOOL IsBlocking()
	{
		return TRUE;
	}

	/**
	 * Give the async task a chance to marshal its data back to the game thread
	 * Can only be called on the game thread by the async task manager
	 */
	virtual void Finalize()
	{
		check(appGetCurrentThreadId() == GameThreadId);
	}

	/**
	 * Async task is given a chance to trigger its delegates
	 */
	virtual void TriggerDelegates()
	{
		check(appGetCurrentThreadId() == GameThreadId);
	}
};

/**
 * An event triggered by the online subsystem to be routed to the game thread for processing
 */
class FOnlineAsyncEvent : public FOnlineAsyncItem
{
protected:
	/** Hidden constructor */
	FOnlineAsyncEvent() {}


public:
	/**
	 * Base virtual destructor
	 */
	virtual ~FOnlineAsyncEvent()
	{
	}
};

/**
 * A single request for an online service to be queued with the async task manager
 * NOTE: Renamed FOnlineAsyncTaskBase, to avoid conflicting with separate FOnlineAsyncTask in OnlineSubsystemUtilities.h
 */
class FOnlineAsyncTaskBase : public FOnlineAsyncItem
{
protected:
	/** Time the task was created */
	DOUBLE StartTime;

	/** Hidden constructor */
	FOnlineAsyncTaskBase()
	{
		StartTime = appSeconds();
	}

public:
	/**
	 * Base virtual destructor
	 */
	virtual ~FOnlineAsyncTaskBase()
	{
	}

	/**
	 * Check the state of the async task
	 *
	 * @return	TRUE if complete, FALSE otherwise
	 */
	virtual UBOOL IsDone() = 0;

	/**
	 * Check the success of the async task
	 *
	 * @return	TRUE if successful, FALSE otherwise
	 */
	virtual UBOOL WasSuccessful() = 0;

	/**
	 * Give the async task time to do its work
	 * Can only be called on the async task manager thread
	 */
	virtual void Tick()
	{
		check(appGetCurrentThreadId() == OnlineThreadId);
	}

	/**
	 * Updates the amount of elapsed time this task has taken
	 */
	DOUBLE GetElapsedTime()
	{
		return appSeconds() - StartTime;
	}
};

/**
 * Thread runnable which handles the online thread side of ticking and processing asynchronous tasks/events
 */
class FOnlineAsyncTaskManager : public FRunnable
{
protected:
	/** Game thread async tasks are queued up here for processing on the online thread */
	TArray<FOnlineAsyncTaskBase*> InQueue;

	/** Completed online requests are queued up here for processing on the game thread */
	TArray<FOnlineAsyncItem*> OutQueue;


	/** Critical section for thread safe handling of InQueue */
	FCriticalSection InQueueLock;

	/** Critical section for thread safe handling of OutQueue */
	FCriticalSection OutQueueLock;

	/** Trigger event to signal the queue has tasks that need processing */
	FEvent* WorkEvent;


	/** Min amount of time to poll for the current task to complete */
	DWORD PollingInterval;

	/** Whether or not async items should block the out queue, preventing other items from executing until complete */
	UBOOL bAllowAsyncBlocking;

	/** Debug value to allow delaying triggering of task completion */
	DWORD DebugTaskDelayInMs;


	/** Should this manager and the thread exit */
	INT bRequestingExit;

	/** Guards against the Run() in the runnable from being called twice */
	static INT InvocationCount;


	/** Whether or not the online thread has encountered an error */
	volatile UBOOL bIsOnlineThreadHealthy;

	/** If there is an exception in the online thread, the error is stored here */
	FString OnlineThreadError;

	/** When the online thread has an exception, it waits for the game thread to acknowledge it before shutting down */
	volatile UBOOL bOnlineExceptionAcknowledged;


public:
	/**
	 * Base constructor
	 */
	FOnlineAsyncTaskManager();

	/**
	 * Base destructor
	 */
	virtual ~FOnlineAsyncTaskManager()
	{
	}


	/**
	 * Init the online async task manager
	 *
	 * @return	TRUE if initialization was successful, FALSE otherwise
	 */
	virtual UBOOL Init();

	/**
	 * This is where all per object thread work is done. This is only called if the initialization was successful.
	 *
	 * @return	The exit code of the runnable object
	 */
	virtual DWORD Run();

	/**
	 * This is called if a thread is requested to terminate early
	 */
	virtual void Stop();

	/**
	 * Called in the context of the aggregating thread to perform any cleanup.
	 */
	virtual void Exit();


	/**
	 * Add online async tasks that need processing onto the incoming queue
	 *
	 * @param NewTask		Some request of the online services
	 */
	void AddToInQueue(FOnlineAsyncTaskBase* NewTask);

	/**
	 * Remove the current async task from the queue
	 *
	 * @param ItemIndex	The index of the current queue item (not always the first item, since queue items can be non-blocking)
	 */
	void PopFromInQueue(INT ItemIndex);

	/**
	 * Add completed online async tasks that need processing onto the queue
	 *
	 * @param CompletedItem		Some finished request of the online services
	 */
	void AddToOutQueue(FOnlineAsyncItem* CompletedItem);


	/**
	 * Main thread entry function for the online thread (split out of 'Run' to add exception handling)
	 *
	 * @return	The exit code of the runnable object
	 */
	DWORD OnlineMain();

	/**
	 * Checks that the online thread is still functioning correctly
	 */
	void CheckOnlineThreadHealth();


	/**
	 * Give the completed async tasks a chance to marshal their data back onto the game thread, calling delegates where appropriate
	 * NOTE: CALL ONLY FROM GAME THREAD
	 */
	void GameTick();

	/**
	 * Give the online service a chance to do work
	 * NOTE: CALL ONLY FROM ONLINE THREAD
	 */
	virtual void OnlineTick() = 0;
};


#endif // INCLUDED_ONLINEASYNCTASKMANAGER_H