/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#include "OnlineSubsystemLiveNames.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_ONLINESUBSYSTEMLIVE_ENUMS
#define INCLUDED_ONLINESUBSYSTEMLIVE_ENUMS 1


#endif // !INCLUDED_ONLINESUBSYSTEMLIVE_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_ONLINESUBSYSTEMLIVE_CLASSES
#define INCLUDED_ONLINESUBSYSTEMLIVE_CLASSES 1
#define ENABLE_DECLARECLASS_MACRO 1
#include "UnObjBas.h"
#undef ENABLE_DECLARECLASS_MACRO

class UClientBeaconAddressResolverLive : public UClientBeaconAddressResolver
{
public:
    //## BEGIN PROPS ClientBeaconAddressResolverLive
    //## END PROPS ClientBeaconAddressResolverLive

    DECLARE_CLASS(UClientBeaconAddressResolverLive,UClientBeaconAddressResolver,0,OnlineSubsystemLive)
	/**
	 * Performs platform specific resolution of the address
	 *
	 * @param DesiredHost the host to resolve the IP address for
	 * @param Addr out param having it's address set
	 *
	 * @return true if the address could be resolved, false otherwise
	 */
	virtual UBOOL ResolveAddress(const FOnlineGameSearchResult& DesiredHost,FInternetIpAddr& Addr);

	/**
	 * Allows for per platform registration of secure keys, so that a secure connection
	 * can be opened and used for sending/receiving data.
	 *
	 * @param DesiredHost the host that is being registered
	 */
	virtual UBOOL RegisterAddress(const FOnlineGameSearchResult& DesiredHost);

	/**
	 * Allows for per platform unregistration of secure keys, which breaks the link between
	 * a client and server. This also releases any memory associated with the keys.
	 *
	 * @param DesiredHost the host that is being registered
	 */
	virtual UBOOL UnregisterAddress(const FOnlineGameSearchResult& DesiredHost);
};

class UDownloadableContentEnumeratorLive : public UDownloadableContentEnumerator
{
public:
    //## BEGIN PROPS DownloadableContentEnumeratorLive
    INT ReadsOutstanding;
    //## END PROPS DownloadableContentEnumeratorLive

    virtual void AppendDLC(const TArray<struct FOnlineContent>& Bundles);
    DECLARE_FUNCTION(execAppendDLC)
    {
        P_GET_TARRAY_REF(struct FOnlineContent,Bundles);
        P_FINISH;
        this->AppendDLC(Bundles);
    }
    DECLARE_CLASS(UDownloadableContentEnumeratorLive,UDownloadableContentEnumerator,0,OnlineSubsystemLive)
    NO_DEFAULT_CONSTRUCTOR(UDownloadableContentEnumeratorLive)
};

struct FPerUserPartyChatDelegates
{
    TArrayNoInit<FScriptDelegate> GameInviteDelegates;
    TArrayNoInit<FScriptDelegate> PartyMemberDelegates;
    TArrayNoInit<FScriptDelegate> PartyMemberInfoDelegates;

    /** Constructors */
    FPerUserPartyChatDelegates() {}
    FPerUserPartyChatDelegates(EEventParm)
    {
        appMemzero(this, sizeof(FPerUserPartyChatDelegates));
    }
};

struct LivePartyChat_eventOnPartyMembersInfoChanged_Parms
{
    FString PlayerName;
    struct FUniqueNetId PlayerID;
    INT CustomData1;
    INT CustomData2;
    INT CustomData3;
    INT CustomData4;
    LivePartyChat_eventOnPartyMembersInfoChanged_Parms(EEventParm)
    {
    }
};
struct LivePartyChat_eventOnPartyMemberListChanged_Parms
{
    UBOOL bJoinedOrLeft;
    FString PlayerName;
    struct FUniqueNetId PlayerID;
    LivePartyChat_eventOnPartyMemberListChanged_Parms(EEventParm)
    {
    }
};
struct LivePartyChat_eventOnSendPartyGameInvitesComplete_Parms
{
    UBOOL bWasSuccessful;
    LivePartyChat_eventOnSendPartyGameInvitesComplete_Parms(EEventParm)
    {
    }
};
class ULivePartyChat : public UObject, public FTickableObject
{
public:
    //## BEGIN PROPS LivePartyChat
    void* NotificationHandle;
    struct FPerUserPartyChatDelegates PartyChatDelegates[4];
    QWORD TotalBandwidthUsed;
    INT BandwidthUsed;
    FLOAT ElapsedTime;
    TArrayNoInit<FOnlineAsyncTaskLive*> AsyncTasks;
    TArrayNoInit<struct FOnlinePartyMember> CachedPartyMembers;
    FScriptDelegate __OnSendPartyGameInvitesComplete__Delegate;
    FScriptDelegate __OnPartyMemberListChanged__Delegate;
    FScriptDelegate __OnPartyMembersInfoChanged__Delegate;
    //## END PROPS LivePartyChat

    virtual UBOOL SendPartyGameInvites(BYTE LocalUserNum);
    virtual UBOOL GetPartyMembersInformation(TArray<struct FOnlinePartyMember>& PartyMembers);
    virtual UBOOL GetPartyMemberInformation(struct FUniqueNetId MemberId,struct FOnlinePartyMember& PartyMember);
    virtual UBOOL SetPartyMemberCustomData(BYTE LocalUserNum,INT Data1,INT Data2,INT Data3,INT Data4);
    virtual UBOOL ShowPartyUI(BYTE LocalUserNum);
    virtual UBOOL ShowVoiceChannelUI(BYTE LocalUserNum);
    virtual UBOOL ShowCommunitySessionsUI(BYTE LocalUserNum);
    virtual UBOOL IsInPartyChat(BYTE LocalUserNum);
    DECLARE_FUNCTION(execSendPartyGameInvites)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->SendPartyGameInvites(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetPartyMembersInformation)
    {
        P_GET_TARRAY_REF(struct FOnlinePartyMember,PartyMembers);
        P_FINISH;
        *(UBOOL*)Result=this->GetPartyMembersInformation(PartyMembers);
    }
    DECLARE_FUNCTION(execGetPartyMemberInformation)
    {
        P_GET_STRUCT(struct FUniqueNetId,MemberId);
        P_GET_STRUCT_INIT_REF(struct FOnlinePartyMember,PartyMember);
        P_FINISH;
        *(UBOOL*)Result=this->GetPartyMemberInformation(MemberId,PartyMember);
    }
    DECLARE_FUNCTION(execSetPartyMemberCustomData)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(Data1);
        P_GET_INT(Data2);
        P_GET_INT(Data3);
        P_GET_INT(Data4);
        P_FINISH;
        *(UBOOL*)Result=this->SetPartyMemberCustomData(LocalUserNum,Data1,Data2,Data3,Data4);
    }
    DECLARE_FUNCTION(execShowPartyUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowPartyUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowVoiceChannelUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowVoiceChannelUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowCommunitySessionsUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowCommunitySessionsUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsInPartyChat)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->IsInPartyChat(LocalUserNum);
    }
    void delegateOnPartyMembersInfoChanged(const FString& PlayerName,struct FUniqueNetId PlayerID,INT CustomData1,INT CustomData2,INT CustomData3,INT CustomData4)
    {
        LivePartyChat_eventOnPartyMembersInfoChanged_Parms Parms(EC_EventParm);
        Parms.PlayerName=PlayerName;
        Parms.PlayerID=PlayerID;
        Parms.CustomData1=CustomData1;
        Parms.CustomData2=CustomData2;
        Parms.CustomData3=CustomData3;
        Parms.CustomData4=CustomData4;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnPartyMembersInfoChanged,&__OnPartyMembersInfoChanged__Delegate,&Parms);
    }
    void delegateOnPartyMemberListChanged(UBOOL bJoinedOrLeft,const FString& PlayerName,struct FUniqueNetId PlayerID)
    {
        LivePartyChat_eventOnPartyMemberListChanged_Parms Parms(EC_EventParm);
        Parms.bJoinedOrLeft=bJoinedOrLeft ? FIRST_BITFIELD : FALSE;
        Parms.PlayerName=PlayerName;
        Parms.PlayerID=PlayerID;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnPartyMemberListChanged,&__OnPartyMemberListChanged__Delegate,&Parms);
    }
    void delegateOnSendPartyGameInvitesComplete(UBOOL bWasSuccessful)
    {
        LivePartyChat_eventOnSendPartyGameInvitesComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnSendPartyGameInvitesComplete,&__OnSendPartyGameInvitesComplete__Delegate,&Parms);
    }
    DECLARE_CLASS(ULivePartyChat,UObject,0,OnlineSubsystemLive)
    DECLARE_WITHIN(UOnlineSubsystemLive)
// FTickableObject interface

	/**
	 * Returns whether it is okay to tick this object. E.g. objects being loaded in the background shouldn't be ticked
	 * till they are finalized and unreachable objects cannot be ticked either.
	 *
	 * @return	TRUE if tickable, FALSE otherwise
	 */
	virtual UBOOL IsTickable() const
	{
		// We cannot tick objects that are unreachable or are in the process of being loaded in the background.
		return !HasAnyFlags( RF_Unreachable | RF_AsyncLoading );
	}

	/**
	 * Used to determine if an object should be ticked when the game is paused.
	 *
	 * @return always TRUE as networking needs to be ticked even when paused
	 */
	virtual UBOOL IsTickableWhenPaused() const
	{
		return TRUE;
	}

	/**
	 * Allows per frame work to be done
	 *
	 * @param DeltaTime the amount of time that has passed since the last tick
	 */
	virtual void Tick(FLOAT);

	/**
	 * Updates the bandwidth tracking information
	 *
	 * @param DeltaTime the amount of time since the last update
	 */
	void TickBandwidthTracking(FLOAT DeltaTime);

	/**
	 * Processes any party chat notifications that have happened since last tick
	 *
	 * @param DeltaTime the amount of time since the last update
	 */
	void TickPartyChatNotifications(FLOAT DeltaTime);

	/**
	 * Processes a chat notification that was returned during polling
	 *
	 * @param Notification the notification event that was fired
	 * @param Data the notification specific data
	 */
	void ProcessPartyChatNotification(DWORD Notification,ULONG_PTR Data);
};

class UOnlineEventsInterfaceMcpLive : public UOnlineEventsInterfaceMcp
{
public:
    //## BEGIN PROPS OnlineEventsInterfaceMcpLive
    //## END PROPS OnlineEventsInterfaceMcpLive

    DECLARE_CLASS(UOnlineEventsInterfaceMcpLive,UOnlineEventsInterfaceMcp,0|CLASS_Config,OnlineSubsystemLive)
	/**
	 * Returns a true/false string for the bool
	 *
	 * @param bBool the bool being converted
	 *
	 * @return true/false string
	 */
	FORCEINLINE const TCHAR* BoolToString(UBOOL bBool)
	{
		return bBool ? TEXT("true") : TEXT("false");
	}

	/**
	 * Returns a string for the video standard
	 *
	 * @param VideoStd the video standard to convert
	 *
	 * @return either NTSC, NTSC-J, or PAL
	 */
	FORCEINLINE const TCHAR* VideoStdToString(DWORD VideoStd)
	{
#if CONSOLE
		switch (VideoStd)
		{
			case XC_VIDEO_STANDARD_NTSC_J:
			{
				return TEXT("NTSC-J");
			}
			case XC_VIDEO_STANDARD_PAL_I:
			{
				return TEXT("PAL");
			}
		}
		return TEXT("NTSC");
#else
		return TEXT("VGA");
#endif
	}

	/**
	 * Returns a string for the device type
	 *
	 * @param DeviceType the device type to convert
	 *
	 * @return either HD, MU, or Unknown
	 */
	FORCEINLINE const TCHAR* DeviceTypeToString(DWORD DeviceType)
	{
#if CONSOLE
		switch (DeviceType)
		{
			case XCONTENTDEVICETYPE_HDD:
			{
				return TEXT("HD");
			}
			case XCONTENTDEVICETYPE_MU:
			{
				return TEXT("MU");
			}
		}
#endif
		return TEXT("UNKNOWN");
	}

	/**
	 * Returns a string for the NAT type
	 *
	 * @param NatType the NAT type to convert
	 *
	 * @return either OPEN, STRICT, or MODERATE
	 */
	FORCEINLINE const TCHAR* NatTypeToString(DWORD NatType)
	{
		switch (NatType)
		{
			case XONLINE_NAT_OPEN:
			{
				return TEXT("OPEN");
			}
			case XONLINE_NAT_MODERATE:
			{
				return TEXT("MODERATE");
			}
		}
		return TEXT("STRICT");
	}

	/**
	 * Builds the URL of additional parameters used when posting playlist population data
	 *
	 * @param PlaylistId the playlist id being reported
	 * @param NumPlayers the number of players on the host
	 *
	 * @return the URL to use with all of the per platform extras
	 */
	virtual FString BuildPlaylistPopulationURLParameters(INT PlaylistId,INT NumPlayers);

	/**
	 * Captures hardware information as a string for uploading to MCP
	 */
	virtual FString BuildHardwareXmlData(void);

	/**
	 * @return platform specific XML data
	 */
	virtual FString BuildPlatformXmlData(void);
};

struct FFriendsListCache
{
    TArrayNoInit<struct FOnlineFriend> Friends;
    BYTE ReadState;
    TArrayNoInit<FScriptDelegate> ReadFriendsDelegates;
    TArrayNoInit<FScriptDelegate> FriendsChangeDelegates;

    /** Constructors */
    FFriendsListCache() {}
    FFriendsListCache(EEventParm)
    {
        appMemzero(this, sizeof(FFriendsListCache));
    }
};

struct FLoginStatusDelegates
{
    TArrayNoInit<FScriptDelegate> Delegates;

    /** Constructors */
    FLoginStatusDelegates() {}
    FLoginStatusDelegates(EEventParm)
    {
        appMemzero(this, sizeof(FLoginStatusDelegates));
    }
};

struct FCachedLoginState
{
    BYTE LoginStatus;
    SCRIPT_ALIGN;
    struct FUniqueNetId OnlineXuid;
    struct FUniqueNetId OfflineXuid;

    /** Constructors */
    FCachedLoginState() {}
    FCachedLoginState(EEventParm)
    {
        appMemzero(this, sizeof(FCachedLoginState));
    }
};

struct FOnlineSaveGameDataMapping
{
    FStringNoInit InternalFileName;
    TArrayNoInit<BYTE> SaveGameData;
    BYTE ReadWriteState;
    SCRIPT_ALIGN;

    /** Constructors */
    FOnlineSaveGameDataMapping() {}
    FOnlineSaveGameDataMapping(EEventParm)
    {
        appMemzero(this, sizeof(FOnlineSaveGameDataMapping));
    }
};

struct FOnlineSaveGame : public FOnlineContent
{
    TArrayNoInit<struct FOnlineSaveGameDataMapping> SaveGames;
    BYTE BindRefCount;
    SCRIPT_ALIGN;
    BITFIELD bIsBound:1;
    BITFIELD bIsValid:1;
    SCRIPT_ALIGN;

		/**
		 * Find the save game data mapping for the specified file name
		 *
		 * @param FileName the file that is being looked for
		 *
		 * @return the save game data mapping or NULL if not found
		 */
		FOnlineSaveGameDataMapping* FindSaveGameMapping(const FString& FileName)
		{
			// Search through the array of mappings
			for (INT Index = 0; Index < SaveGames.Num(); Index++)
			{
				if (SaveGames(Index).InternalFileName == FileName)
				{
					return &SaveGames(Index);
				}
			}
			return NULL;
		}

		/**
		 * Adds a new save game data mapping for the specified file name
		 *
		 * @param FileName the file that is being looked for
		 * @param SaveGameData the data for this save game
		 *
		 * @return the save game data mapping or NULL if not found
		 */
		FOnlineSaveGameDataMapping* AddSaveGameMapping(const FString& FileName,const TArray<BYTE>& SaveGameData)
		{
			INT AddIndex = SaveGames.AddZeroed(1);
			SaveGames(AddIndex).InternalFileName = FileName;
			SaveGames(AddIndex).SaveGameData = SaveGameData;
			return &SaveGames(AddIndex);
		}

		/**
		 * Adds a new save game data mapping for the specified file name
		 *
		 * @param FileName the file that is being looked for
		 *
		 * @return the save game data mapping or NULL if not found
		 */
		FOnlineSaveGameDataMapping* AddSaveGameMapping(const FString& FileName)
		{
			INT AddIndex = SaveGames.AddZeroed(1);
			SaveGames(AddIndex).InternalFileName = FileName;
			return &SaveGames(AddIndex);
		}

		/**
		 * Checks the save game mappings to see if any have async tasks outstanding
		 *
		 * @return true if a save game has an async task in progress, false otherwise
		 */
		UBOOL AreAnySaveGamesInProgress(void) const
		{
			// Loop through each individual file to see if it's in progress
			for (INT MappingIndex = 0; MappingIndex < SaveGames.Num(); MappingIndex++)
			{
				const FOnlineSaveGameDataMapping& SaveGameMapping = SaveGames(MappingIndex);
				// See if this is in progress
				if (SaveGameMapping.ReadWriteState == OERS_InProgress)
				{
					return TRUE;
				}
			}
			return FALSE;
		}
	
};

struct FOnlineCrossTitleSaveGame : public FOnlineSaveGame
{
    INT TitleId;

    /** Constructors */
    FOnlineCrossTitleSaveGame() {}
    FOnlineCrossTitleSaveGame(EEventParm)
    {
        appMemzero(this, sizeof(FOnlineCrossTitleSaveGame));
    }
};

struct FContentListCache
{
    TArrayNoInit<struct FOnlineContent> SaveGameContent;
    BYTE SaveGameReadState;
    TArrayNoInit<FScriptDelegate> SaveGameReadCompleteDelegates;
    TArrayNoInit<struct FOnlineContent> Content;
    BYTE ReadState;
    TArrayNoInit<FScriptDelegate> ContentChangeDelegates;
    TArrayNoInit<FScriptDelegate> ReadCompleteDelegates;
    INT NewDownloadCount;
    INT TotalDownloadCount;
    TArrayNoInit<FScriptDelegate> QueryDownloadsDelegates;
    TArrayNoInit<FScriptDelegate> ReadSaveGameDataCompleteDelegates;
    TArrayNoInit<FScriptDelegate> WriteSaveGameDataCompleteDelegates;
    TArrayNoInit<struct FOnlineSaveGame> SaveGames;
    TArrayNoInit<FScriptDelegate> SaveGameReadCrossTitleCompleteDelegates;
    BYTE SaveGameCrossTitleReadState;
    TArrayNoInit<FScriptDelegate> ReadCrossTitleCompleteDelegates;
    BYTE ReadCrossTitleState;
    TArrayNoInit<struct FOnlineCrossTitleContent> CrossTitleSaveGameContent;
    TArrayNoInit<struct FOnlineCrossTitleContent> CrossTitleContent;
    TArrayNoInit<struct FOnlineCrossTitleSaveGame> CrossTitleSaveGames;
    TArrayNoInit<FScriptDelegate> ReadCrossTitleSaveGameDataCompleteDelegates;

    /** Constructors */
    FContentListCache() {}
    FContentListCache(EEventParm)
    {
        appMemzero(this, sizeof(FContentListCache));
    }
};

struct FDeviceIdCache
{
    INT DeviceID;
    FScriptDelegate DeviceSelectionMulticast;
    TArrayNoInit<FScriptDelegate> DeviceSelectionDelegates;

    /** Constructors */
    FDeviceIdCache() {}
    FDeviceIdCache(EEventParm)
    {
        appMemzero(this, sizeof(FDeviceIdCache));
    }
};

struct FCrossTitleProfileEntry
{
    INT TitleId;
    class UOnlineProfileSettings* Profile;

    /** Constructors */
    FCrossTitleProfileEntry() {}
    FCrossTitleProfileEntry(EEventParm)
    {
        appMemzero(this, sizeof(FCrossTitleProfileEntry));
    }
};

struct FProfileSettingsCache
{
    class UOnlineProfileSettings* Profile;
    TArrayNoInit<FScriptDelegate> ReadDelegates;
    TArrayNoInit<FScriptDelegate> WriteDelegates;
    TArrayNoInit<FScriptDelegate> ProfileDataChangedDelegates;
    TArrayNoInit<FScriptDelegate> CrossTitleReadDelegates;
    TArrayNoInit<struct FCrossTitleProfileEntry> CrossTitleProfileCache;

		/**
		 * Find the cache entry for a given title id
		 *
		 * @param TitleId the title that is being looked up
		 *
		 * @return the cache entry or NULL if not found
		 */
		FCrossTitleProfileEntry* FindCrossTitleProfileEntry(INT TitleId)
		{
			// Search through the array of mappings
			for (INT Index = 0; Index < CrossTitleProfileCache.Num(); Index++)
			{
				if (CrossTitleProfileCache(Index).TitleId == TitleId)
				{
					return &CrossTitleProfileCache(Index);
				}
			}
			return NULL;
		}

		/**
		 * Adds a new profile cache mapping for the specified title
		 *
		 * @param TitleId the title that is being added
		 *
		 * @return the cache entry or NULL if not found
		 */
		FCrossTitleProfileEntry* AddCrossTitleProfileEntry(INT TitleId)
		{
			INT AddIndex = CrossTitleProfileCache.AddZeroed(1);
			CrossTitleProfileCache(AddIndex).TitleId = TitleId;
			return &CrossTitleProfileCache(AddIndex);
		}
	
};

struct FPlayerStorageSettingsCacheLocal
{
    class UOnlinePlayerStorage* PlayerStorage;
    TArrayNoInit<FScriptDelegate> ReadDelegates;
    TArrayNoInit<FScriptDelegate> WriteDelegates;

    /** Constructors */
    FPlayerStorageSettingsCacheLocal() {}
    FPlayerStorageSettingsCacheLocal(EEventParm)
    {
        appMemzero(this, sizeof(FPlayerStorageSettingsCacheLocal));
    }
};

struct FPlayerStorageSettingsCacheRemote
{
    class UOnlinePlayerStorage* PlayerStorage;
    TArrayNoInit<FScriptDelegate> ReadDelegates;

		/** Constructors */
		FPlayerStorageSettingsCacheRemote() {}
		FPlayerStorageSettingsCacheRemote(EEventParm)
		{
			appMemzero(this, sizeof(FPlayerStorageSettingsCacheRemote));
		}
		/** Needed for native serialization */ 
		friend FArchive& operator<<(FArchive& Ar, FPlayerStorageSettingsCacheRemote& PlayerStorageCache)
		{
			return Ar << PlayerStorageCache.PlayerStorage
					  << PlayerStorageCache.ReadDelegates;
		}
	
};

struct FTalkerPriority
{
    INT CurrentPriority;
    INT LastPriority;

    /** Constructors */
    FTalkerPriority() {}
    FTalkerPriority(EEventParm)
    {
        appMemzero(this, sizeof(FTalkerPriority));
    }
};

struct FLiveRemoteTalker : public FRemoteTalker
{
    struct FTalkerPriority LocalPriorities[4];

		/** @return TRUE if any of the local players have this player muted, otherwise FALSE */
		inline UBOOL IsLocallyMuted(void)
		{
			for (INT Index = 0; Index < 4; Index++)
			{
				if (LocalPriorities[Index].CurrentPriority == XHV_PLAYBACK_PRIORITY_NEVER)
				{
					return TRUE;
				}
			}
			return FALSE;
		}
	
};

struct FPerUserDelegateLists
{
    TArrayNoInit<FScriptDelegate> SpeechRecognitionDelegates;
    TArrayNoInit<FScriptDelegate> AchievementDelegates;
    TArrayNoInit<FScriptDelegate> AchievementReadDelegates;
    TArrayNoInit<FScriptDelegate> PostImageDelegates;
    TArrayNoInit<FScriptDelegate> PostLinkDelegates;

    /** Constructors */
    FPerUserDelegateLists() {}
    FPerUserDelegateLists(EEventParm)
    {
        appMemzero(this, sizeof(FPerUserDelegateLists));
    }
};

struct FInviteData
{
    TArrayNoInit<FScriptDelegate> InviteDelegates;
    XINVITE_INFO* InviteData;
    class UOnlineGameSearch* InviteSearch;

    /** Constructors */
    FInviteData() {}
    FInviteData(EEventParm)
    {
        appMemzero(this, sizeof(FInviteData));
    }
};

struct FCachedAchievements
{
    INT PlayerNum;
    INT TitleId;
    TArrayNoInit<struct FAchievementDetails> Achievements;
    BYTE ReadState;
    class USurface* TempImage;

    /** Constructors */
    FCachedAchievements() {}
    FCachedAchievements(EEventParm)
    {
        appMemzero(this, sizeof(FCachedAchievements));
    }
};

struct OnlineSubsystemLive_eventOnRequestTitleFileListComplete_Parms
{
    UBOOL bWasSuccessful;
    FString ResultStr;
    OnlineSubsystemLive_eventOnRequestTitleFileListComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnPostLinkCompleted_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnPostLinkCompleted_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnPostImageCompleted_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnPostImageCompleted_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnQuerySocialPostPrivilegesCompleted_Parms
{
    UBOOL bWasSuccessful;
    struct FSocialPostPrivileges PostPrivileges;
    OnlineSubsystemLive_eventOnQuerySocialPostPrivilegesCompleted_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadCrossTitleProfileSettingsComplete_Parms
{
    BYTE LocalUserNum;
    INT TitleId;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadCrossTitleProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadAchievementsComplete_Parms
{
    INT TitleId;
    OnlineSubsystemLive_eventOnReadAchievementsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnRegisterHostStatGuidComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnRegisterHostStatGuidComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnFriendMessageReceived_Parms
{
    BYTE LocalUserNum;
    struct FUniqueNetId SendingPlayer;
    FString SendingNick;
    FString Message;
    OnlineSubsystemLive_eventOnFriendMessageReceived_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnJoinFriendGameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnJoinFriendGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReceivedGameInvite_Parms
{
    BYTE LocalUserNum;
    FString InviterName;
    OnlineSubsystemLive_eventOnReceivedGameInvite_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnFriendInviteReceived_Parms
{
    BYTE LocalUserNum;
    struct FUniqueNetId RequestingPlayer;
    FString RequestingNick;
    FString Message;
    OnlineSubsystemLive_eventOnFriendInviteReceived_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnAddFriendByNameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnAddFriendByNameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnFlushOnlineStatsComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnFlushOnlineStatsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadOnlineStatsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadOnlineStatsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnRecognitionComplete_Parms
{
    OnlineSubsystemLive_eventOnRecognitionComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnPlayerTalkingStateChange_Parms
{
    struct FUniqueNetId Player;
    UBOOL bIsTalking;
    OnlineSubsystemLive_eventOnPlayerTalkingStateChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnWriteSaveGameDataComplete_Parms
{
    UBOOL bWasSuccessful;
    BYTE LocalUserNum;
    INT DeviceID;
    FString FriendlyName;
    FString Filename;
    FString SaveFileName;
    OnlineSubsystemLive_eventOnWriteSaveGameDataComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadSaveGameDataComplete_Parms
{
    UBOOL bWasSuccessful;
    BYTE LocalUserNum;
    INT DeviceID;
    FString FriendlyName;
    FString Filename;
    FString SaveFileName;
    OnlineSubsystemLive_eventOnReadSaveGameDataComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnQueryAvailableDownloadsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnQueryAvailableDownloadsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadCrossTitleSaveGameDataComplete_Parms
{
    UBOOL bWasSuccessful;
    BYTE LocalUserNum;
    INT DeviceID;
    INT TitleId;
    FString FriendlyName;
    FString Filename;
    FString SaveFileName;
    OnlineSubsystemLive_eventOnReadCrossTitleSaveGameDataComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadCrossTitleContentComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadCrossTitleContentComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadContentComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadContentComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnContentChange_Parms
{
    OnlineSubsystemLive_eventOnContentChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnGameInviteAccepted_Parms
{
    struct FOnlineGameSearchResult InviteResult;
    OnlineSubsystemLive_eventOnGameInviteAccepted_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadFriendsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadFriendsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnArbitrationRegistrationComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnArbitrationRegistrationComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnEndOnlineGameComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnEndOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnStartOnlineGameComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnStartOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnProfileDataChanged_Parms
{
    OnlineSubsystemLive_eventOnProfileDataChanged_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnUnlockAchievementComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnUnlockAchievementComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnDeviceSelectionComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnDeviceSelectionComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnWritePlayerStorageComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnWritePlayerStorageComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadPlayerStorageForNetIdComplete_Parms
{
    struct FUniqueNetId NetId;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadPlayerStorageForNetIdComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadPlayerStorageComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadPlayerStorageComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnWriteProfileSettingsComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnWriteProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadProfileSettingsComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnJoinMigratedOnlineGameComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnJoinMigratedOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnMigrateOnlineGameComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnMigrateOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnRecalculateSkillRatingComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnRecalculateSkillRatingComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnUnregisterPlayerComplete_Parms
{
    FName SessionName;
    struct FUniqueNetId PlayerID;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnUnregisterPlayerComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnRegisterPlayerComplete_Parms
{
    FName SessionName;
    struct FUniqueNetId PlayerID;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnRegisterPlayerComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnJoinOnlineGameComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnJoinOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnQosStatusChanged_Parms
{
    INT NumComplete;
    INT NumTotal;
    OnlineSubsystemLive_eventOnQosStatusChanged_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnCancelFindOnlineGamesComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnCancelFindOnlineGamesComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnDestroyOnlineGameComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnDestroyOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnUpdateOnlineGameComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnUpdateOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnCreateOnlineGameComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnCreateOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnFindOnlineGamesComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnFindOnlineGamesComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadTitleFileComplete_Parms
{
    UBOOL bWasSuccessful;
    FString Filename;
    OnlineSubsystemLive_eventOnReadTitleFileComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnStorageDeviceChange_Parms
{
    OnlineSubsystemLive_eventOnStorageDeviceChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnConnectionStatusChange_Parms
{
    BYTE ConnectionStatus;
    OnlineSubsystemLive_eventOnConnectionStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnControllerChange_Parms
{
    INT ControllerId;
    UBOOL bIsConnected;
    OnlineSubsystemLive_eventOnControllerChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnExternalUIChange_Parms
{
    UBOOL bIsOpening;
    OnlineSubsystemLive_eventOnExternalUIChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnLinkStatusChange_Parms
{
    UBOOL bIsConnected;
    OnlineSubsystemLive_eventOnLinkStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnKeyboardInputComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnKeyboardInputComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnLoginStatusChange_Parms
{
    BYTE NewStatus;
    struct FUniqueNetId NewId;
    OnlineSubsystemLive_eventOnLoginStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnLogoutCompleted_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnLogoutCompleted_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnLoginFailed_Parms
{
    BYTE LocalUserNum;
    BYTE ErrorCode;
    OnlineSubsystemLive_eventOnLoginFailed_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnFriendsChange_Parms
{
    OnlineSubsystemLive_eventOnFriendsChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnMutingChange_Parms
{
    OnlineSubsystemLive_eventOnMutingChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnLoginCancelled_Parms
{
    OnlineSubsystemLive_eventOnLoginCancelled_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnLoginChange_Parms
{
    BYTE LocalUserNum;
    OnlineSubsystemLive_eventOnLoginChange_Parms(EEventParm)
    {
    }
};
class UOnlineSubsystemLive : public UOnlineSubsystemCommonImpl
{
public:
    //## BEGIN PROPS OnlineSubsystemLive
    void* NotificationHandle;
    class UOnlineGameSearch* GameSearch;
    BYTE LanBeaconState;
    BYTE LanNonce[8];
    BYTE CurrentNotificationPosition;
    BYTE bWasKeyboardInputCanceled;
    BYTE QoSPacket[512];
    BYTE DelayedInviteUserMask;
    INT LanAnnouncePort;
    INT LanGameUniqueId;
    INT LanPacketPlatformMask;
    FLOAT LanQueryTimeLeft;
    FLOAT LanQueryTimeout;
    FLanBeacon* LanBeacon;
    INT NumLogins;
    TArrayNoInit<FOnlineAsyncTaskLive*> AsyncTasks;
    struct FFriendsListCache FriendsCache[4];
    TArrayNoInit<FScriptDelegate> LoginChangeDelegates;
    struct FLoginStatusDelegates PlayerLoginStatusDelegates[4];
    struct FCachedLoginState LastLoginState[4];
    struct FContentListCache ContentCache[4];
    TArrayNoInit<FScriptDelegate> AnyContentChangeDelegates;
    FStringNoInit KeyboardInputResults;
    struct FDeviceIdCache DeviceCache[4];
    struct FProfileSettingsCache ProfileCache[4];
    struct FPlayerStorageSettingsCacheLocal PlayerStorageCacheLocal[4];
    TMap<QWORD,FPlayerStorageSettingsCacheRemote> PlayerStorageCacheRemote;
    struct FLocalTalker LocalTalkers[4];
    TArrayNoInit<struct FLiveRemoteTalker> RemoteTalkers;
    TArrayNoInit<FScriptDelegate> TalkingDelegates;
    struct FPerUserDelegateLists PerUserDelegates[4];
    class UOnlineStatsRead* CurrentStatsRead;
    BITFIELD bIsInSignInUI:1;
    BITFIELD bShouldLogArbitrationData:1;
    BITFIELD bShouldLogStatsData:1;
    BITFIELD bShouldUseMcp:1;
    BITFIELD bIsCountingDownSigninNotification:1;
    TArrayNoInit<FScriptDelegate> LoginCancelledDelegates;
    TArrayNoInit<FScriptDelegate> LoginFailedDelegates;
    TArrayNoInit<FScriptDelegate> LogoutCompletedDelegates;
    TArrayNoInit<FScriptDelegate> CreateOnlineGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> UpdateOnlineGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> DestroyOnlineGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> JoinOnlineGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> MigrateOnlineGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> JoinMigratedOnlineGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> RecalculateSkillRatingCompleteDelegates;
    TArrayNoInit<FScriptDelegate> StartOnlineGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> EndOnlineGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> FindOnlineGamesCompleteDelegates;
    TArrayNoInit<FScriptDelegate> CancelFindOnlineGamesCompleteDelegates;
    TArrayNoInit<FScriptDelegate> QosStatusChangedDelegates;
    TArrayNoInit<FScriptDelegate> RegisterPlayerCompleteDelegates;
    TArrayNoInit<FScriptDelegate> UnregisterPlayerCompleteDelegates;
    TArrayNoInit<FScriptDelegate> ArbitrationRegistrationCompleteDelegates;
    TArrayNoInit<FScriptDelegate> ReadOnlineStatsCompleteDelegates;
    TArrayNoInit<FScriptDelegate> ExternalUIChangeDelegates;
    TArrayNoInit<FScriptDelegate> ControllerChangeDelegates;
    INT LastInputDeviceConnectedMask;
    TArrayNoInit<FScriptDelegate> ConnectionStatusChangeDelegates;
    TArrayNoInit<FScriptDelegate> StorageDeviceChangeDelegates;
    TArrayNoInit<FScriptDelegate> LinkStatusChangeDelegates;
    TArrayNoInit<FScriptDelegate> FlushOnlineStatsDelegates;
    TArrayNoInit<FScriptDelegate> KeyboardInputDelegates;
    TArrayNoInit<FScriptDelegate> ReadTitleFileCompleteDelegates;
    TArrayNoInit<FScriptDelegate> QuerySocialPostPrivilegesDelegates;
    struct FInviteData InviteCache[4];
    TArrayNoInit<FScriptDelegate> MutingChangeDelegates;
    TArrayNoInit<FScriptDelegate> JoinFriendGameCompleteDelegates;
    TArrayNoInit<struct FTitleFile> TitleManagedFiles;
    TArrayNoInit<struct FCachedAchievements> AchievementList;
    FLOAT SigninCountDownCounter;
    FLOAT SigninCountDownDelay;
    INT DebugLogLevel;
    FLOAT VoiceNotificationDelta;
    FLOAT MaxElapsedAsyncTaskTime;
    TArrayNoInit<FString> LspNames;
    FStringNoInit CloseGuideString;
    FStringNoInit DeleteMessageString;
    FScriptDelegate __OnLoginChange__Delegate;
    FScriptDelegate __OnLoginCancelled__Delegate;
    FScriptDelegate __OnMutingChange__Delegate;
    FScriptDelegate __OnFriendsChange__Delegate;
    FScriptDelegate __OnLoginFailed__Delegate;
    FScriptDelegate __OnLogoutCompleted__Delegate;
    FScriptDelegate __OnLoginStatusChange__Delegate;
    FScriptDelegate __OnKeyboardInputComplete__Delegate;
    FScriptDelegate __OnLinkStatusChange__Delegate;
    FScriptDelegate __OnExternalUIChange__Delegate;
    FScriptDelegate __OnControllerChange__Delegate;
    FScriptDelegate __OnConnectionStatusChange__Delegate;
    FScriptDelegate __OnStorageDeviceChange__Delegate;
    FScriptDelegate __OnReadTitleFileComplete__Delegate;
    FScriptDelegate __OnFindOnlineGamesComplete__Delegate;
    FScriptDelegate __OnCreateOnlineGameComplete__Delegate;
    FScriptDelegate __OnUpdateOnlineGameComplete__Delegate;
    FScriptDelegate __OnDestroyOnlineGameComplete__Delegate;
    FScriptDelegate __OnCancelFindOnlineGamesComplete__Delegate;
    FScriptDelegate __OnQosStatusChanged__Delegate;
    FScriptDelegate __OnJoinOnlineGameComplete__Delegate;
    FScriptDelegate __OnRegisterPlayerComplete__Delegate;
    FScriptDelegate __OnUnregisterPlayerComplete__Delegate;
    FScriptDelegate __OnRecalculateSkillRatingComplete__Delegate;
    FScriptDelegate __OnMigrateOnlineGameComplete__Delegate;
    FScriptDelegate __OnJoinMigratedOnlineGameComplete__Delegate;
    FScriptDelegate __OnReadProfileSettingsComplete__Delegate;
    FScriptDelegate __OnWriteProfileSettingsComplete__Delegate;
    FScriptDelegate __OnReadPlayerStorageComplete__Delegate;
    FScriptDelegate __OnReadPlayerStorageForNetIdComplete__Delegate;
    FScriptDelegate __OnWritePlayerStorageComplete__Delegate;
    FScriptDelegate __OnDeviceSelectionComplete__Delegate;
    FScriptDelegate __OnUnlockAchievementComplete__Delegate;
    FScriptDelegate __OnProfileDataChanged__Delegate;
    FScriptDelegate __OnStartOnlineGameComplete__Delegate;
    FScriptDelegate __OnEndOnlineGameComplete__Delegate;
    FScriptDelegate __OnArbitrationRegistrationComplete__Delegate;
    FScriptDelegate __OnReadFriendsComplete__Delegate;
    FScriptDelegate __OnGameInviteAccepted__Delegate;
    FScriptDelegate __OnContentChange__Delegate;
    FScriptDelegate __OnReadContentComplete__Delegate;
    FScriptDelegate __OnReadCrossTitleContentComplete__Delegate;
    FScriptDelegate __OnReadCrossTitleSaveGameDataComplete__Delegate;
    FScriptDelegate __OnQueryAvailableDownloadsComplete__Delegate;
    FScriptDelegate __OnReadSaveGameDataComplete__Delegate;
    FScriptDelegate __OnWriteSaveGameDataComplete__Delegate;
    FScriptDelegate __OnPlayerTalkingStateChange__Delegate;
    FScriptDelegate __OnRecognitionComplete__Delegate;
    FScriptDelegate __OnReadOnlineStatsComplete__Delegate;
    FScriptDelegate __OnFlushOnlineStatsComplete__Delegate;
    FScriptDelegate __OnAddFriendByNameComplete__Delegate;
    FScriptDelegate __OnFriendInviteReceived__Delegate;
    FScriptDelegate __OnReceivedGameInvite__Delegate;
    FScriptDelegate __OnJoinFriendGameComplete__Delegate;
    FScriptDelegate __OnFriendMessageReceived__Delegate;
    FScriptDelegate __OnRegisterHostStatGuidComplete__Delegate;
    FScriptDelegate __OnReadAchievementsComplete__Delegate;
    FScriptDelegate __OnReadCrossTitleProfileSettingsComplete__Delegate;
    FScriptDelegate __OnQuerySocialPostPrivilegesCompleted__Delegate;
    FScriptDelegate __OnPostImageCompleted__Delegate;
    FScriptDelegate __OnPostLinkCompleted__Delegate;
    FScriptDelegate __OnRequestTitleFileListComplete__Delegate;
    //## END PROPS OnlineSubsystemLive

    virtual UBOOL Init();
    virtual void Exit();
    virtual UBOOL ShowLoginUI(UBOOL bShowOnlineOnly=FALSE);
    virtual UBOOL Login(BYTE LocalUserNum,const FString& LoginName,const FString& Password,UBOOL bWantsLocalOnly=FALSE);
    virtual UBOOL AutoLogin();
    virtual UBOOL Logout(BYTE LocalUserNum);
    virtual BYTE GetLoginStatus(BYTE LocalUserNum);
    virtual UBOOL IsGuestLogin(BYTE LocalUserNum);
    virtual UBOOL IsLocalLogin(BYTE LocalUserNum);
    virtual UBOOL GetUniquePlayerId(BYTE LocalUserNum,struct FUniqueNetId& PlayerID);
    virtual FString GetPlayerNickname(BYTE LocalUserNum);
    virtual BYTE CanPlayOnline(BYTE LocalUserNum);
    virtual BYTE CanCommunicate(BYTE LocalUserNum);
    virtual BYTE CanDownloadUserContent(BYTE LocalUserNum);
    virtual BYTE CanPurchaseContent(BYTE LocalUserNum);
    virtual BYTE CanViewPlayerProfiles(BYTE LocalUserNum);
    virtual BYTE CanShowPresenceInformation(BYTE LocalUserNum);
    virtual UBOOL IsFriend(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL AreAnyFriends(BYTE LocalUserNum,TArray<struct FFriendsQuery>& Query);
    virtual UBOOL IsMuted(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowFriendsUI(BYTE LocalUserNum);
    virtual UBOOL ShowFriendsInviteUI(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowFeedbackUI(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowGamerCardUI(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowMessagesUI(BYTE LocalUserNum);
    virtual UBOOL ShowAchievementsUI(BYTE LocalUserNum);
    virtual UBOOL ShowGuideUI();
    virtual UBOOL ShowPlayersUI(BYTE LocalUserNum);
    virtual UBOOL ShowKeyboardUI(BYTE LocalUserNum,const FString& TitleText,const FString& DescriptionText,UBOOL bIsPassword=FALSE,UBOOL bShouldValidate=TRUE,const FString& DefaultText=TEXT(""),INT MaxResultLength=256);
    virtual UBOOL HasLinkConnection();
    virtual void SetNetworkNotificationPosition(BYTE NewPos);
    virtual UBOOL IsControllerConnected(INT ControllerId);
    virtual BYTE GetNATType();
    virtual INT GetLocale();
    virtual UBOOL ReadTitleFile(const FString& FileToRead);
    virtual UBOOL GetTitleFileContents(const FString& Filename,TArray<BYTE>& FileContents);
    virtual UBOOL ClearDownloadedFiles();
    virtual UBOOL ClearDownloadedFile(const FString& Filename);
    virtual UBOOL CreateOnlineGame(BYTE HostingPlayerNum,FName SessionName,class UOnlineGameSettings* NewGameSettings);
    virtual UBOOL UpdateOnlineGame(FName SessionName,class UOnlineGameSettings* UpdatedGameSettings,UBOOL bShouldRefreshOnlineData=FALSE);
    virtual UBOOL DestroyOnlineGame(FName SessionName);
    virtual UBOOL FindOnlineGames(BYTE SearchingPlayerNum,class UOnlineGameSearch* SearchSettings);
    virtual UBOOL CancelFindOnlineGames();
    virtual UBOOL ReadPlatformSpecificSessionInfo(const struct FOnlineGameSearchResult& DesiredGame,BYTE* PlatformSpecificInfo);
    virtual UBOOL ReadPlatformSpecificSessionInfoBySessionName(FName SessionName,BYTE* PlatformSpecificInfo);
    virtual UBOOL BindPlatformSpecificSessionToSearch(BYTE SearchingPlayerNum,class UOnlineGameSearch* SearchSettings,BYTE* PlatformSpecificInfo);
    virtual UBOOL FreeSearchResults(class UOnlineGameSearch* Search=NULL);
    virtual UBOOL JoinOnlineGame(BYTE PlayerNum,FName SessionName,const struct FOnlineGameSearchResult& DesiredGame);
    virtual UBOOL GetResolvedConnectString(FName SessionName,FString& ConnectInfo);
    virtual UBOOL RegisterPlayer(FName SessionName,struct FUniqueNetId PlayerID,UBOOL bWasInvited);
    virtual UBOOL RegisterPlayers(FName SessionName,const TArray<struct FUniqueNetId>& Players);
    virtual UBOOL UnregisterPlayer(FName SessionName,struct FUniqueNetId PlayerID);
    virtual UBOOL UnregisterPlayers(FName SessionName,const TArray<struct FUniqueNetId>& Players);
    virtual UBOOL RecalculateSkillRating(FName SessionName,const TArray<struct FUniqueNetId>& Players);
    virtual UBOOL MigrateOnlineGame(BYTE HostingPlayerNum,FName SessionName);
    virtual UBOOL JoinMigratedOnlineGame(BYTE PlayerNum,FName SessionName,const struct FOnlineGameSearchResult& DesiredGame);
    virtual UBOOL ReadProfileSettings(BYTE LocalUserNum,class UOnlineProfileSettings* ProfileSettings);
    virtual UBOOL WriteProfileSettings(BYTE LocalUserNum,class UOnlineProfileSettings* ProfileSettings);
    virtual UBOOL ReadPlayerStorage(BYTE LocalUserNum,class UOnlinePlayerStorage* PlayerStorage,INT DeviceID=-1);
    virtual UBOOL ReadPlayerStorageForNetId(BYTE LocalUserNum,struct FUniqueNetId NetId,class UOnlinePlayerStorage* PlayerStorage);
    virtual void AddReadPlayerStorageForNetIdCompleteDelegate(struct FUniqueNetId NetId,FScriptDelegate ReadPlayerStorageForNetIdCompleteDelegate);
    virtual void ClearReadPlayerStorageForNetIdCompleteDelegate(struct FUniqueNetId NetId,FScriptDelegate ReadPlayerStorageForNetIdCompleteDelegate);
    virtual UBOOL WritePlayerStorage(BYTE LocalUserNum,class UOnlinePlayerStorage* PlayerStorage,INT DeviceID=-1);
    virtual void SetOnlineStatus(BYTE LocalUserNum,INT PresenceMode,const TArray<struct FLocalizedStringSetting>& LocalizedStringSettings,const TArray<struct FSettingsProperty>& Properties);
    virtual UBOOL ShowInviteUI(BYTE LocalUserNum,const FString& InviteText=TEXT(""));
    virtual UBOOL ShowContentMarketplaceUI(BYTE LocalUserNum,INT CategoryMask=-1,INT OfferId=0);
    virtual UBOOL ShowMembershipMarketplaceUI(BYTE LocalUserNum);
    virtual UBOOL ShowDeviceSelectionUI(BYTE LocalUserNum,INT SizeNeeded,UBOOL bManageStorage=FALSE);
    virtual INT GetDeviceSelectionResults(BYTE LocalPlayerNum,FString& DeviceName);
    virtual UBOOL IsDeviceValid(INT DeviceID,INT SizeNeeded=0);
    virtual UBOOL UnlockAchievement(BYTE LocalUserNum,INT AchievementId,FLOAT PercentComplete=100.000000);
    virtual UBOOL UnlockGamerPicture(BYTE LocalUserNum,INT PictureId);
    virtual UBOOL StartOnlineGame(FName SessionName);
    virtual UBOOL EndOnlineGame(FName SessionName);
    virtual UBOOL RegisterForArbitration(FName SessionName);
    virtual UBOOL AcceptGameInvite(BYTE LocalUserNum,FName SessionName);
    virtual UBOOL ReadFriendsList(BYTE LocalUserNum,INT Count=0,INT StartingAt=0);
    virtual BYTE GetFriendsList(BYTE LocalUserNum,TArray<struct FOnlineFriend>& Friends,INT Count=0,INT StartingAt=0);
    virtual UBOOL ReadContentList(BYTE LocalUserNum,BYTE ContentType,INT DeviceID=-1);
    virtual void ClearContentList(BYTE LocalUserNum,BYTE ContentType);
    virtual BYTE GetContentList(BYTE LocalUserNum,BYTE ContentType,TArray<struct FOnlineContent>& ContentList);
    virtual UBOOL ReadCrossTitleContentList(BYTE LocalUserNum,BYTE ContentType,INT TitleId=0,INT DeviceID=-1);
    virtual void ClearCrossTitleContentList(BYTE LocalUserNum,BYTE ContentType);
    virtual BYTE GetCrossTitleContentList(BYTE LocalUserNum,BYTE ContentType,TArray<struct FOnlineCrossTitleContent>& ContentList);
    virtual UBOOL ReadCrossTitleSaveGameData(BYTE LocalUserNum,INT DeviceID,INT TitleId,const FString& FriendlyName,const FString& Filename,const FString& SaveFileName);
    virtual UBOOL GetCrossTitleSaveGameData(BYTE LocalUserNum,INT DeviceID,INT TitleId,const FString& FriendlyName,const FString& Filename,const FString& SaveFileName,BYTE& bIsValid,TArray<BYTE>& SaveGameData);
    virtual UBOOL ClearCrossTitleSaveGames(BYTE LocalUserNum);
    virtual UBOOL QueryAvailableDownloads(BYTE LocalUserNum,INT CategoryMask=-1);
    virtual UBOOL ReadSaveGameData(BYTE LocalUserNum,INT DeviceID,const FString& FriendlyName,const FString& Filename,const FString& SaveFileName);
    virtual UBOOL GetSaveGameData(BYTE LocalUserNum,INT DeviceID,const FString& FriendlyName,const FString& Filename,const FString& SaveFileName,BYTE& bIsValid,TArray<BYTE>& SaveGameData);
    virtual UBOOL WriteSaveGameData(BYTE LocalUserNum,INT DeviceID,const FString& FriendlyName,const FString& Filename,const FString& SaveFileName,const TArray<BYTE>& SaveGameData);
    virtual UBOOL DeleteSaveGame(BYTE LocalUserNum,INT DeviceID,const FString& FriendlyName,const FString& Filename);
    virtual UBOOL ClearSaveGames(BYTE LocalUserNum);
    virtual UBOOL RegisterLocalTalker(BYTE LocalUserNum);
    virtual UBOOL UnregisterLocalTalker(BYTE LocalUserNum);
    virtual UBOOL RegisterRemoteTalker(struct FUniqueNetId PlayerID);
    virtual UBOOL UnregisterRemoteTalker(struct FUniqueNetId PlayerID);
    virtual UBOOL IsLocalPlayerTalking(BYTE LocalUserNum);
    virtual UBOOL IsRemotePlayerTalking(struct FUniqueNetId PlayerID);
    virtual UBOOL IsHeadsetPresent(BYTE LocalUserNum);
    virtual UBOOL SetRemoteTalkerPriority(BYTE LocalUserNum,struct FUniqueNetId PlayerID,INT Priority);
    virtual UBOOL MuteRemoteTalker(BYTE LocalUserNum,struct FUniqueNetId PlayerID,UBOOL bIsSystemWide=FALSE);
    virtual UBOOL UnmuteRemoteTalker(BYTE LocalUserNum,struct FUniqueNetId PlayerID,UBOOL bIsSystemWide=FALSE);
    virtual void StartNetworkedVoice(BYTE LocalUserNum);
    virtual void StopNetworkedVoice(BYTE LocalUserNum);
    virtual UBOOL StartSpeechRecognition(BYTE LocalUserNum);
    virtual UBOOL StopSpeechRecognition(BYTE LocalUserNum);
    virtual UBOOL GetRecognitionResults(BYTE LocalUserNum,TArray<FSpeechRecognizedWord>& Words);
    virtual UBOOL SelectVocabulary(BYTE LocalUserNum,INT VocabularyId);
    virtual UBOOL SetSpeechRecognitionObject(BYTE LocalUserNum,class USpeechRecognition* SpeechRecogObj);
    virtual UBOOL ReadOnlineStats(const TArray<struct FUniqueNetId>& Players,class UOnlineStatsRead* StatsRead);
    virtual UBOOL ReadOnlineStatsForFriends(BYTE LocalUserNum,class UOnlineStatsRead* StatsRead);
    virtual UBOOL ReadOnlineStatsByRank(class UOnlineStatsRead* StatsRead,INT StartIndex=1,INT NumToRead=100);
    virtual UBOOL ReadOnlineStatsByRankAroundPlayer(BYTE LocalUserNum,class UOnlineStatsRead* StatsRead,INT NumRows=10);
    virtual void FreeStats(class UOnlineStatsRead* StatsRead);
    virtual UBOOL WriteOnlineStats(FName SessionName,struct FUniqueNetId Player,class UOnlineStatsWrite* StatsWrite);
    virtual UBOOL FlushOnlineStats(FName SessionName);
    virtual UBOOL WriteOnlinePlayerScores(FName SessionName,INT LeaderboardId,const TArray<struct FOnlinePlayerScore>& PlayerScores);
    virtual UBOOL SendMessageToFriend(BYTE LocalUserNum,struct FUniqueNetId Friend,const FString& Message);
    virtual UBOOL SendGameInviteToFriend(BYTE LocalUserNum,struct FUniqueNetId Friend,const FString& Text=TEXT(""));
    virtual UBOOL SendGameInviteToFriends(BYTE LocalUserNum,const TArray<struct FUniqueNetId>& Friends,const FString& Text=TEXT(""));
    virtual UBOOL JoinFriendGame(BYTE LocalUserNum,struct FUniqueNetId Friend);
    virtual void CalcAggregateSkill(const TArray<DOUBLE>& Mus,const TArray<DOUBLE>& Sigmas,DOUBLE& OutAggregateMu,DOUBLE& OutAggregateSigma);
    virtual UBOOL ReadAchievements(BYTE LocalUserNum,INT TitleId=0,UBOOL bShouldReadText=TRUE,UBOOL bShouldReadImages=FALSE);
    virtual BYTE GetAchievements(BYTE LocalUserNum,TArray<struct FAchievementDetails>& Achievements,INT TitleId=0);
    virtual UBOOL ShowCustomPlayersUI(BYTE LocalUserNum,const TArray<struct FUniqueNetId>& Players,const FString& Title,const FString& Description);
    virtual UBOOL UnlockAvatarAward(BYTE LocalUserNum,INT AvatarItemId);
    virtual UBOOL ReadCrossTitleProfileSettings(BYTE LocalUserNum,INT TitleId,class UOnlineProfileSettings* ProfileSettings);
    virtual UBOOL QuerySocialPostPrivileges();
    virtual UBOOL PostImage(BYTE LocalUserNum,const struct FSocialPostImageInfo& PostImageInfo,const TArray<BYTE>& FullImage);
    virtual UBOOL PostLink(BYTE LocalUserNum,const struct FSocialPostLinkInfo& PostLinkInfo);
    virtual UBOOL ShowCustomMessageUI(BYTE LocalUserNum,const TArray<struct FUniqueNetId>& Recipients,const FString& MessageTitle,const FString& NonEditableMessage,const FString& EditableMessage=TEXT(""));
    virtual INT GetBuildUniqueId();
    virtual void DumpLiveSessionState();
    virtual void DumpVoiceRegistration();
    virtual void SetDebugSpewLevel(INT DebugSpewLevel);
    DECLARE_FUNCTION(execExit)
    {
        P_FINISH;
        this->Exit();
    }
    DECLARE_FUNCTION(execShowLoginUI)
    {
        P_GET_UBOOL_OPTX(bShowOnlineOnly,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->ShowLoginUI(bShowOnlineOnly);
    }
    DECLARE_FUNCTION(execLogin)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(LoginName);
        P_GET_STR(Password);
        P_GET_UBOOL_OPTX(bWantsLocalOnly,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->Login(LocalUserNum,LoginName,Password,bWantsLocalOnly);
    }
    DECLARE_FUNCTION(execAutoLogin)
    {
        P_FINISH;
        *(UBOOL*)Result=this->AutoLogin();
    }
    DECLARE_FUNCTION(execLogout)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->Logout(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetLoginStatus)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->GetLoginStatus(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsGuestLogin)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->IsGuestLogin(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsLocalLogin)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->IsLocalLogin(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetUniquePlayerId)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT_REF(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->GetUniquePlayerId(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execGetPlayerNickname)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(FString*)Result=this->GetPlayerNickname(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanPlayOnline)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->CanPlayOnline(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanCommunicate)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->CanCommunicate(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanDownloadUserContent)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->CanDownloadUserContent(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanPurchaseContent)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->CanPurchaseContent(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanViewPlayerProfiles)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->CanViewPlayerProfiles(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanShowPresenceInformation)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->CanShowPresenceInformation(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->IsFriend(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execAreAnyFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FFriendsQuery,Query);
        P_FINISH;
        *(UBOOL*)Result=this->AreAnyFriends(LocalUserNum,Query);
    }
    DECLARE_FUNCTION(execIsMuted)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->IsMuted(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowFriendsUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowFriendsUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowFriendsInviteUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->ShowFriendsInviteUI(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowFeedbackUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->ShowFeedbackUI(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowGamerCardUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->ShowGamerCardUI(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowMessagesUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowMessagesUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowAchievementsUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowAchievementsUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowGuideUI)
    {
        P_FINISH;
        *(UBOOL*)Result=this->ShowGuideUI();
    }
    DECLARE_FUNCTION(execShowPlayersUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowPlayersUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowKeyboardUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(TitleText);
        P_GET_STR(DescriptionText);
        P_GET_UBOOL_OPTX(bIsPassword,FALSE);
        P_GET_UBOOL_OPTX(bShouldValidate,TRUE);
        P_GET_STR_OPTX(DefaultText,TEXT(""));
        P_GET_INT_OPTX(MaxResultLength,256);
        P_FINISH;
        *(UBOOL*)Result=this->ShowKeyboardUI(LocalUserNum,TitleText,DescriptionText,bIsPassword,bShouldValidate,DefaultText,MaxResultLength);
    }
    DECLARE_FUNCTION(execHasLinkConnection)
    {
        P_FINISH;
        *(UBOOL*)Result=this->HasLinkConnection();
    }
    DECLARE_FUNCTION(execSetNetworkNotificationPosition)
    {
        P_GET_BYTE(NewPos);
        P_FINISH;
        this->SetNetworkNotificationPosition(NewPos);
    }
    DECLARE_FUNCTION(execIsControllerConnected)
    {
        P_GET_INT(ControllerId);
        P_FINISH;
        *(UBOOL*)Result=this->IsControllerConnected(ControllerId);
    }
    DECLARE_FUNCTION(execGetNATType)
    {
        P_FINISH;
        *(BYTE*)Result=this->GetNATType();
    }
    DECLARE_FUNCTION(execGetLocale)
    {
        P_FINISH;
        *(INT*)Result=this->GetLocale();
    }
    DECLARE_FUNCTION(execReadTitleFile)
    {
        P_GET_STR(FileToRead);
        P_FINISH;
        *(UBOOL*)Result=this->ReadTitleFile(FileToRead);
    }
    DECLARE_FUNCTION(execGetTitleFileContents)
    {
        P_GET_STR(Filename);
        P_GET_TARRAY_REF(BYTE,FileContents);
        P_FINISH;
        *(UBOOL*)Result=this->GetTitleFileContents(Filename,FileContents);
    }
    DECLARE_FUNCTION(execClearDownloadedFiles)
    {
        P_FINISH;
        *(UBOOL*)Result=this->ClearDownloadedFiles();
    }
    DECLARE_FUNCTION(execClearDownloadedFile)
    {
        P_GET_STR(Filename);
        P_FINISH;
        *(UBOOL*)Result=this->ClearDownloadedFile(Filename);
    }
    DECLARE_FUNCTION(execCreateOnlineGame)
    {
        P_GET_BYTE(HostingPlayerNum);
        P_GET_NAME(SessionName);
        P_GET_OBJECT(UOnlineGameSettings,NewGameSettings);
        P_FINISH;
        *(UBOOL*)Result=this->CreateOnlineGame(HostingPlayerNum,SessionName,NewGameSettings);
    }
    DECLARE_FUNCTION(execUpdateOnlineGame)
    {
        P_GET_NAME(SessionName);
        P_GET_OBJECT(UOnlineGameSettings,UpdatedGameSettings);
        P_GET_UBOOL_OPTX(bShouldRefreshOnlineData,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->UpdateOnlineGame(SessionName,UpdatedGameSettings,bShouldRefreshOnlineData);
    }
    DECLARE_FUNCTION(execDestroyOnlineGame)
    {
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=this->DestroyOnlineGame(SessionName);
    }
    DECLARE_FUNCTION(execFindOnlineGames)
    {
        P_GET_BYTE(SearchingPlayerNum);
        P_GET_OBJECT(UOnlineGameSearch,SearchSettings);
        P_FINISH;
        *(UBOOL*)Result=this->FindOnlineGames(SearchingPlayerNum,SearchSettings);
    }
    DECLARE_FUNCTION(execCancelFindOnlineGames)
    {
        P_FINISH;
        *(UBOOL*)Result=this->CancelFindOnlineGames();
    }
    DECLARE_FUNCTION(execReadPlatformSpecificSessionInfo)
    {
        P_GET_STRUCT_REF(struct FOnlineGameSearchResult,DesiredGame);
        P_GET_ARRAY_REF(BYTE,PlatformSpecificInfo);
        P_FINISH;
        *(UBOOL*)Result=this->ReadPlatformSpecificSessionInfo(DesiredGame,PlatformSpecificInfo);
    }
    DECLARE_FUNCTION(execReadPlatformSpecificSessionInfoBySessionName)
    {
        P_GET_NAME(SessionName);
        P_GET_ARRAY_REF(BYTE,PlatformSpecificInfo);
        P_FINISH;
        *(UBOOL*)Result=this->ReadPlatformSpecificSessionInfoBySessionName(SessionName,PlatformSpecificInfo);
    }
    DECLARE_FUNCTION(execBindPlatformSpecificSessionToSearch)
    {
        P_GET_BYTE(SearchingPlayerNum);
        P_GET_OBJECT(UOnlineGameSearch,SearchSettings);
        P_GET_ARRAY(BYTE,PlatformSpecificInfo);
        P_FINISH;
        *(UBOOL*)Result=this->BindPlatformSpecificSessionToSearch(SearchingPlayerNum,SearchSettings,PlatformSpecificInfo);
    }
    DECLARE_FUNCTION(execFreeSearchResults)
    {
        P_GET_OBJECT_OPTX(UOnlineGameSearch,Search,NULL);
        P_FINISH;
        *(UBOOL*)Result=this->FreeSearchResults(Search);
    }
    DECLARE_FUNCTION(execJoinOnlineGame)
    {
        P_GET_BYTE(PlayerNum);
        P_GET_NAME(SessionName);
        P_GET_STRUCT_REF(struct FOnlineGameSearchResult,DesiredGame);
        P_FINISH;
        *(UBOOL*)Result=this->JoinOnlineGame(PlayerNum,SessionName,DesiredGame);
    }
    DECLARE_FUNCTION(execGetResolvedConnectString)
    {
        P_GET_NAME(SessionName);
        P_GET_STR_REF(ConnectInfo);
        P_FINISH;
        *(UBOOL*)Result=this->GetResolvedConnectString(SessionName,ConnectInfo);
    }
    DECLARE_FUNCTION(execRegisterPlayer)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_UBOOL(bWasInvited);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterPlayer(SessionName,PlayerID,bWasInvited);
    }
    DECLARE_FUNCTION(execRegisterPlayers)
    {
        P_GET_NAME(SessionName);
        P_GET_TARRAY_REF(struct FUniqueNetId,Players);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterPlayers(SessionName,Players);
    }
    DECLARE_FUNCTION(execUnregisterPlayer)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->UnregisterPlayer(SessionName,PlayerID);
    }
    DECLARE_FUNCTION(execUnregisterPlayers)
    {
        P_GET_NAME(SessionName);
        P_GET_TARRAY_REF(struct FUniqueNetId,Players);
        P_FINISH;
        *(UBOOL*)Result=this->UnregisterPlayers(SessionName,Players);
    }
    DECLARE_FUNCTION(execRecalculateSkillRating)
    {
        P_GET_NAME(SessionName);
        P_GET_TARRAY_REF(struct FUniqueNetId,Players);
        P_FINISH;
        *(UBOOL*)Result=this->RecalculateSkillRating(SessionName,Players);
    }
    DECLARE_FUNCTION(execMigrateOnlineGame)
    {
        P_GET_BYTE(HostingPlayerNum);
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=this->MigrateOnlineGame(HostingPlayerNum,SessionName);
    }
    DECLARE_FUNCTION(execJoinMigratedOnlineGame)
    {
        P_GET_BYTE(PlayerNum);
        P_GET_NAME(SessionName);
        P_GET_STRUCT_REF(struct FOnlineGameSearchResult,DesiredGame);
        P_FINISH;
        *(UBOOL*)Result=this->JoinMigratedOnlineGame(PlayerNum,SessionName,DesiredGame);
    }
    DECLARE_FUNCTION(execReadProfileSettings)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineProfileSettings,ProfileSettings);
        P_FINISH;
        *(UBOOL*)Result=this->ReadProfileSettings(LocalUserNum,ProfileSettings);
    }
    DECLARE_FUNCTION(execWriteProfileSettings)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineProfileSettings,ProfileSettings);
        P_FINISH;
        *(UBOOL*)Result=this->WriteProfileSettings(LocalUserNum,ProfileSettings);
    }
    DECLARE_FUNCTION(execReadPlayerStorage)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlinePlayerStorage,PlayerStorage);
        P_GET_INT_OPTX(DeviceID,-1);
        P_FINISH;
        *(UBOOL*)Result=this->ReadPlayerStorage(LocalUserNum,PlayerStorage,DeviceID);
    }
    DECLARE_FUNCTION(execReadPlayerStorageForNetId)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,NetId);
        P_GET_OBJECT(UOnlinePlayerStorage,PlayerStorage);
        P_FINISH;
        *(UBOOL*)Result=this->ReadPlayerStorageForNetId(LocalUserNum,NetId,PlayerStorage);
    }
    DECLARE_FUNCTION(execAddReadPlayerStorageForNetIdCompleteDelegate)
    {
        P_GET_STRUCT(struct FUniqueNetId,NetId);
        P_GET_DELEGATE(ReadPlayerStorageForNetIdCompleteDelegate);
        P_FINISH;
        this->AddReadPlayerStorageForNetIdCompleteDelegate(NetId,ReadPlayerStorageForNetIdCompleteDelegate);
    }
    DECLARE_FUNCTION(execClearReadPlayerStorageForNetIdCompleteDelegate)
    {
        P_GET_STRUCT(struct FUniqueNetId,NetId);
        P_GET_DELEGATE(ReadPlayerStorageForNetIdCompleteDelegate);
        P_FINISH;
        this->ClearReadPlayerStorageForNetIdCompleteDelegate(NetId,ReadPlayerStorageForNetIdCompleteDelegate);
    }
    DECLARE_FUNCTION(execWritePlayerStorage)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlinePlayerStorage,PlayerStorage);
        P_GET_INT_OPTX(DeviceID,-1);
        P_FINISH;
        *(UBOOL*)Result=this->WritePlayerStorage(LocalUserNum,PlayerStorage,DeviceID);
    }
    DECLARE_FUNCTION(execSetOnlineStatus)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(PresenceMode);
        P_GET_TARRAY_REF(struct FLocalizedStringSetting,LocalizedStringSettings);
        P_GET_TARRAY_REF(struct FSettingsProperty,Properties);
        P_FINISH;
        this->SetOnlineStatus(LocalUserNum,PresenceMode,LocalizedStringSettings,Properties);
    }
    DECLARE_FUNCTION(execShowInviteUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR_OPTX(InviteText,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->ShowInviteUI(LocalUserNum,InviteText);
    }
    DECLARE_FUNCTION(execShowContentMarketplaceUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(CategoryMask,-1);
        P_GET_INT_OPTX(OfferId,0);
        P_FINISH;
        *(UBOOL*)Result=this->ShowContentMarketplaceUI(LocalUserNum,CategoryMask,OfferId);
    }
    DECLARE_FUNCTION(execShowMembershipMarketplaceUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowMembershipMarketplaceUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowDeviceSelectionUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(SizeNeeded);
        P_GET_UBOOL_OPTX(bManageStorage,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->ShowDeviceSelectionUI(LocalUserNum,SizeNeeded,bManageStorage);
    }
    DECLARE_FUNCTION(execGetDeviceSelectionResults)
    {
        P_GET_BYTE(LocalPlayerNum);
        P_GET_STR_REF(DeviceName);
        P_FINISH;
        *(INT*)Result=this->GetDeviceSelectionResults(LocalPlayerNum,DeviceName);
    }
    DECLARE_FUNCTION(execIsDeviceValid)
    {
        P_GET_INT(DeviceID);
        P_GET_INT_OPTX(SizeNeeded,0);
        P_FINISH;
        *(UBOOL*)Result=this->IsDeviceValid(DeviceID,SizeNeeded);
    }
    DECLARE_FUNCTION(execUnlockAchievement)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(AchievementId);
        P_GET_FLOAT_OPTX(PercentComplete,100.000000);
        P_FINISH;
        *(UBOOL*)Result=this->UnlockAchievement(LocalUserNum,AchievementId,PercentComplete);
    }
    DECLARE_FUNCTION(execUnlockGamerPicture)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(PictureId);
        P_FINISH;
        *(UBOOL*)Result=this->UnlockGamerPicture(LocalUserNum,PictureId);
    }
    DECLARE_FUNCTION(execStartOnlineGame)
    {
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=this->StartOnlineGame(SessionName);
    }
    DECLARE_FUNCTION(execEndOnlineGame)
    {
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=this->EndOnlineGame(SessionName);
    }
    DECLARE_FUNCTION(execRegisterForArbitration)
    {
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterForArbitration(SessionName);
    }
    DECLARE_FUNCTION(execAcceptGameInvite)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=this->AcceptGameInvite(LocalUserNum,SessionName);
    }
    DECLARE_FUNCTION(execReadFriendsList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(Count,0);
        P_GET_INT_OPTX(StartingAt,0);
        P_FINISH;
        *(UBOOL*)Result=this->ReadFriendsList(LocalUserNum,Count,StartingAt);
    }
    DECLARE_FUNCTION(execGetFriendsList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FOnlineFriend,Friends);
        P_GET_INT_OPTX(Count,0);
        P_GET_INT_OPTX(StartingAt,0);
        P_FINISH;
        *(BYTE*)Result=this->GetFriendsList(LocalUserNum,Friends,Count,StartingAt);
    }
    DECLARE_FUNCTION(execReadContentList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_BYTE(ContentType);
        P_GET_INT_OPTX(DeviceID,-1);
        P_FINISH;
        *(UBOOL*)Result=this->ReadContentList(LocalUserNum,ContentType,DeviceID);
    }
    DECLARE_FUNCTION(execClearContentList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_BYTE(ContentType);
        P_FINISH;
        this->ClearContentList(LocalUserNum,ContentType);
    }
    DECLARE_FUNCTION(execGetContentList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_BYTE(ContentType);
        P_GET_TARRAY_REF(struct FOnlineContent,ContentList);
        P_FINISH;
        *(BYTE*)Result=this->GetContentList(LocalUserNum,ContentType,ContentList);
    }
    DECLARE_FUNCTION(execReadCrossTitleContentList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_BYTE(ContentType);
        P_GET_INT_OPTX(TitleId,0);
        P_GET_INT_OPTX(DeviceID,-1);
        P_FINISH;
        *(UBOOL*)Result=this->ReadCrossTitleContentList(LocalUserNum,ContentType,TitleId,DeviceID);
    }
    DECLARE_FUNCTION(execClearCrossTitleContentList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_BYTE(ContentType);
        P_FINISH;
        this->ClearCrossTitleContentList(LocalUserNum,ContentType);
    }
    DECLARE_FUNCTION(execGetCrossTitleContentList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_BYTE(ContentType);
        P_GET_TARRAY_REF(struct FOnlineCrossTitleContent,ContentList);
        P_FINISH;
        *(BYTE*)Result=this->GetCrossTitleContentList(LocalUserNum,ContentType,ContentList);
    }
    DECLARE_FUNCTION(execReadCrossTitleSaveGameData)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(DeviceID);
        P_GET_INT(TitleId);
        P_GET_STR(FriendlyName);
        P_GET_STR(Filename);
        P_GET_STR(SaveFileName);
        P_FINISH;
        *(UBOOL*)Result=this->ReadCrossTitleSaveGameData(LocalUserNum,DeviceID,TitleId,FriendlyName,Filename,SaveFileName);
    }
    DECLARE_FUNCTION(execGetCrossTitleSaveGameData)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(DeviceID);
        P_GET_INT(TitleId);
        P_GET_STR(FriendlyName);
        P_GET_STR(Filename);
        P_GET_STR(SaveFileName);
        P_GET_BYTE_REF(bIsValid);
        P_GET_TARRAY_REF(BYTE,SaveGameData);
        P_FINISH;
        *(UBOOL*)Result=this->GetCrossTitleSaveGameData(LocalUserNum,DeviceID,TitleId,FriendlyName,Filename,SaveFileName,bIsValid,SaveGameData);
    }
    DECLARE_FUNCTION(execClearCrossTitleSaveGames)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ClearCrossTitleSaveGames(LocalUserNum);
    }
    DECLARE_FUNCTION(execQueryAvailableDownloads)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(CategoryMask,-1);
        P_FINISH;
        *(UBOOL*)Result=this->QueryAvailableDownloads(LocalUserNum,CategoryMask);
    }
    DECLARE_FUNCTION(execReadSaveGameData)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(DeviceID);
        P_GET_STR(FriendlyName);
        P_GET_STR(Filename);
        P_GET_STR(SaveFileName);
        P_FINISH;
        *(UBOOL*)Result=this->ReadSaveGameData(LocalUserNum,DeviceID,FriendlyName,Filename,SaveFileName);
    }
    DECLARE_FUNCTION(execGetSaveGameData)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(DeviceID);
        P_GET_STR(FriendlyName);
        P_GET_STR(Filename);
        P_GET_STR(SaveFileName);
        P_GET_BYTE_REF(bIsValid);
        P_GET_TARRAY_REF(BYTE,SaveGameData);
        P_FINISH;
        *(UBOOL*)Result=this->GetSaveGameData(LocalUserNum,DeviceID,FriendlyName,Filename,SaveFileName,bIsValid,SaveGameData);
    }
    DECLARE_FUNCTION(execWriteSaveGameData)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(DeviceID);
        P_GET_STR(FriendlyName);
        P_GET_STR(Filename);
        P_GET_STR(SaveFileName);
        P_GET_TARRAY_REF(BYTE,SaveGameData);
        P_FINISH;
        *(UBOOL*)Result=this->WriteSaveGameData(LocalUserNum,DeviceID,FriendlyName,Filename,SaveFileName,SaveGameData);
    }
    DECLARE_FUNCTION(execDeleteSaveGame)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(DeviceID);
        P_GET_STR(FriendlyName);
        P_GET_STR(Filename);
        P_FINISH;
        *(UBOOL*)Result=this->DeleteSaveGame(LocalUserNum,DeviceID,FriendlyName,Filename);
    }
    DECLARE_FUNCTION(execClearSaveGames)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ClearSaveGames(LocalUserNum);
    }
    DECLARE_FUNCTION(execRegisterLocalTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterLocalTalker(LocalUserNum);
    }
    DECLARE_FUNCTION(execUnregisterLocalTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->UnregisterLocalTalker(LocalUserNum);
    }
    DECLARE_FUNCTION(execRegisterRemoteTalker)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterRemoteTalker(PlayerID);
    }
    DECLARE_FUNCTION(execUnregisterRemoteTalker)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->UnregisterRemoteTalker(PlayerID);
    }
    DECLARE_FUNCTION(execIsLocalPlayerTalking)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->IsLocalPlayerTalking(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsRemotePlayerTalking)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->IsRemotePlayerTalking(PlayerID);
    }
    DECLARE_FUNCTION(execIsHeadsetPresent)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->IsHeadsetPresent(LocalUserNum);
    }
    DECLARE_FUNCTION(execSetRemoteTalkerPriority)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_INT(Priority);
        P_FINISH;
        *(UBOOL*)Result=this->SetRemoteTalkerPriority(LocalUserNum,PlayerID,Priority);
    }
    DECLARE_FUNCTION(execMuteRemoteTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_UBOOL_OPTX(bIsSystemWide,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->MuteRemoteTalker(LocalUserNum,PlayerID,bIsSystemWide);
    }
    DECLARE_FUNCTION(execUnmuteRemoteTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_UBOOL_OPTX(bIsSystemWide,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->UnmuteRemoteTalker(LocalUserNum,PlayerID,bIsSystemWide);
    }
    DECLARE_FUNCTION(execStartNetworkedVoice)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        this->StartNetworkedVoice(LocalUserNum);
    }
    DECLARE_FUNCTION(execStopNetworkedVoice)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        this->StopNetworkedVoice(LocalUserNum);
    }
    DECLARE_FUNCTION(execStartSpeechRecognition)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->StartSpeechRecognition(LocalUserNum);
    }
    DECLARE_FUNCTION(execStopSpeechRecognition)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->StopSpeechRecognition(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetRecognitionResults)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(FSpeechRecognizedWord,Words);
        P_FINISH;
        *(UBOOL*)Result=this->GetRecognitionResults(LocalUserNum,Words);
    }
    DECLARE_FUNCTION(execSelectVocabulary)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(VocabularyId);
        P_FINISH;
        *(UBOOL*)Result=this->SelectVocabulary(LocalUserNum,VocabularyId);
    }
    DECLARE_FUNCTION(execSetSpeechRecognitionObject)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(USpeechRecognition,SpeechRecogObj);
        P_FINISH;
        *(UBOOL*)Result=this->SetSpeechRecognitionObject(LocalUserNum,SpeechRecogObj);
    }
    DECLARE_FUNCTION(execReadOnlineStats)
    {
        P_GET_TARRAY_REF(struct FUniqueNetId,Players);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStats(Players,StatsRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsForFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStatsForFriends(LocalUserNum,StatsRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsByRank)
    {
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_GET_INT_OPTX(StartIndex,1);
        P_GET_INT_OPTX(NumToRead,100);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStatsByRank(StatsRead,StartIndex,NumToRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsByRankAroundPlayer)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_GET_INT_OPTX(NumRows,10);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStatsByRankAroundPlayer(LocalUserNum,StatsRead,NumRows);
    }
    DECLARE_FUNCTION(execFreeStats)
    {
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        this->FreeStats(StatsRead);
    }
    DECLARE_FUNCTION(execWriteOnlineStats)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,Player);
        P_GET_OBJECT(UOnlineStatsWrite,StatsWrite);
        P_FINISH;
        *(UBOOL*)Result=this->WriteOnlineStats(SessionName,Player,StatsWrite);
    }
    DECLARE_FUNCTION(execFlushOnlineStats)
    {
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=this->FlushOnlineStats(SessionName);
    }
    DECLARE_FUNCTION(execWriteOnlinePlayerScores)
    {
        P_GET_NAME(SessionName);
        P_GET_INT(LeaderboardId);
        P_GET_TARRAY_REF(struct FOnlinePlayerScore,PlayerScores);
        P_FINISH;
        *(UBOOL*)Result=this->WriteOnlinePlayerScores(SessionName,LeaderboardId,PlayerScores);
    }
    DECLARE_FUNCTION(execSendMessageToFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_GET_STR(Message);
        P_FINISH;
        *(UBOOL*)Result=this->SendMessageToFriend(LocalUserNum,Friend,Message);
    }
    DECLARE_FUNCTION(execSendGameInviteToFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_GET_STR_OPTX(Text,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->SendGameInviteToFriend(LocalUserNum,Friend,Text);
    }
    DECLARE_FUNCTION(execSendGameInviteToFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY(struct FUniqueNetId,Friends);
        P_GET_STR_OPTX(Text,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->SendGameInviteToFriends(LocalUserNum,Friends,Text);
    }
    DECLARE_FUNCTION(execJoinFriendGame)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_FINISH;
        *(UBOOL*)Result=this->JoinFriendGame(LocalUserNum,Friend);
    }
    DECLARE_FUNCTION(execCalcAggregateSkill)
    {
        P_GET_TARRAY(DOUBLE,Mus);
        P_GET_TARRAY(DOUBLE,Sigmas);
        P_GET_STRUCT_REF(DOUBLE,OutAggregateMu);
        P_GET_STRUCT_REF(DOUBLE,OutAggregateSigma);
        P_FINISH;
        this->CalcAggregateSkill(Mus,Sigmas,OutAggregateMu,OutAggregateSigma);
    }
    DECLARE_FUNCTION(execReadAchievements)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(TitleId,0);
        P_GET_UBOOL_OPTX(bShouldReadText,TRUE);
        P_GET_UBOOL_OPTX(bShouldReadImages,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->ReadAchievements(LocalUserNum,TitleId,bShouldReadText,bShouldReadImages);
    }
    DECLARE_FUNCTION(execGetAchievements)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FAchievementDetails,Achievements);
        P_GET_INT_OPTX(TitleId,0);
        P_FINISH;
        *(BYTE*)Result=this->GetAchievements(LocalUserNum,Achievements,TitleId);
    }
    DECLARE_FUNCTION(execShowCustomPlayersUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FUniqueNetId,Players);
        P_GET_STR(Title);
        P_GET_STR(Description);
        P_FINISH;
        *(UBOOL*)Result=this->ShowCustomPlayersUI(LocalUserNum,Players,Title,Description);
    }
    DECLARE_FUNCTION(execUnlockAvatarAward)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(AvatarItemId);
        P_FINISH;
        *(UBOOL*)Result=this->UnlockAvatarAward(LocalUserNum,AvatarItemId);
    }
    DECLARE_FUNCTION(execReadCrossTitleProfileSettings)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(TitleId);
        P_GET_OBJECT(UOnlineProfileSettings,ProfileSettings);
        P_FINISH;
        *(UBOOL*)Result=this->ReadCrossTitleProfileSettings(LocalUserNum,TitleId,ProfileSettings);
    }
    DECLARE_FUNCTION(execQuerySocialPostPrivileges)
    {
        P_FINISH;
        *(UBOOL*)Result=this->QuerySocialPostPrivileges();
    }
    DECLARE_FUNCTION(execPostImage)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT_INIT_REF(struct FSocialPostImageInfo,PostImageInfo);
        P_GET_TARRAY(BYTE,FullImage);
        P_FINISH;
        *(UBOOL*)Result=this->PostImage(LocalUserNum,PostImageInfo,FullImage);
    }
    DECLARE_FUNCTION(execPostLink)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT_INIT_REF(struct FSocialPostLinkInfo,PostLinkInfo);
        P_FINISH;
        *(UBOOL*)Result=this->PostLink(LocalUserNum,PostLinkInfo);
    }
    DECLARE_FUNCTION(execShowCustomMessageUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FUniqueNetId,Recipients);
        P_GET_STR(MessageTitle);
        P_GET_STR(NonEditableMessage);
        P_GET_STR_OPTX(EditableMessage,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->ShowCustomMessageUI(LocalUserNum,Recipients,MessageTitle,NonEditableMessage,EditableMessage);
    }
    DECLARE_FUNCTION(execDumpLiveSessionState)
    {
        P_FINISH;
        this->DumpLiveSessionState();
    }
    DECLARE_FUNCTION(execDumpVoiceRegistration)
    {
        P_FINISH;
        this->DumpVoiceRegistration();
    }
    DECLARE_FUNCTION(execSetDebugSpewLevel)
    {
        P_GET_INT(DebugSpewLevel);
        P_FINISH;
        this->SetDebugSpewLevel(DebugSpewLevel);
    }
    void delegateOnRequestTitleFileListComplete(UBOOL bWasSuccessful,const FString& ResultStr)
    {
        OnlineSubsystemLive_eventOnRequestTitleFileListComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.ResultStr=ResultStr;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnRequestTitleFileListComplete,&__OnRequestTitleFileListComplete__Delegate,&Parms);
    }
    void delegateOnPostLinkCompleted(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnPostLinkCompleted_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnPostLinkCompleted,&__OnPostLinkCompleted__Delegate,&Parms);
    }
    void delegateOnPostImageCompleted(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnPostImageCompleted_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnPostImageCompleted,&__OnPostImageCompleted__Delegate,&Parms);
    }
    void delegateOnQuerySocialPostPrivilegesCompleted(UBOOL bWasSuccessful,struct FSocialPostPrivileges PostPrivileges)
    {
        OnlineSubsystemLive_eventOnQuerySocialPostPrivilegesCompleted_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.PostPrivileges=PostPrivileges;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnQuerySocialPostPrivilegesCompleted,&__OnQuerySocialPostPrivilegesCompleted__Delegate,&Parms);
    }
    void delegateOnReadCrossTitleProfileSettingsComplete(BYTE LocalUserNum,INT TitleId,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadCrossTitleProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.TitleId=TitleId;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadCrossTitleProfileSettingsComplete,&__OnReadCrossTitleProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnReadAchievementsComplete(INT TitleId)
    {
        OnlineSubsystemLive_eventOnReadAchievementsComplete_Parms Parms(EC_EventParm);
        Parms.TitleId=TitleId;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadAchievementsComplete,&__OnReadAchievementsComplete__Delegate,&Parms);
    }
    void delegateOnRegisterHostStatGuidComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnRegisterHostStatGuidComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnRegisterHostStatGuidComplete,&__OnRegisterHostStatGuidComplete__Delegate,&Parms);
    }
    void delegateOnFriendMessageReceived(BYTE LocalUserNum,struct FUniqueNetId SendingPlayer,const FString& SendingNick,const FString& Message)
    {
        OnlineSubsystemLive_eventOnFriendMessageReceived_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.SendingPlayer=SendingPlayer;
        Parms.SendingNick=SendingNick;
        Parms.Message=Message;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnFriendMessageReceived,&__OnFriendMessageReceived__Delegate,&Parms);
    }
    void delegateOnJoinFriendGameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnJoinFriendGameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnJoinFriendGameComplete,&__OnJoinFriendGameComplete__Delegate,&Parms);
    }
    void delegateOnReceivedGameInvite(BYTE LocalUserNum,const FString& InviterName)
    {
        OnlineSubsystemLive_eventOnReceivedGameInvite_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.InviterName=InviterName;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReceivedGameInvite,&__OnReceivedGameInvite__Delegate,&Parms);
    }
    void delegateOnFriendInviteReceived(BYTE LocalUserNum,struct FUniqueNetId RequestingPlayer,const FString& RequestingNick,const FString& Message)
    {
        OnlineSubsystemLive_eventOnFriendInviteReceived_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.RequestingPlayer=RequestingPlayer;
        Parms.RequestingNick=RequestingNick;
        Parms.Message=Message;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnFriendInviteReceived,&__OnFriendInviteReceived__Delegate,&Parms);
    }
    void delegateOnAddFriendByNameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnAddFriendByNameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnAddFriendByNameComplete,&__OnAddFriendByNameComplete__Delegate,&Parms);
    }
    void delegateOnFlushOnlineStatsComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnFlushOnlineStatsComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnFlushOnlineStatsComplete,&__OnFlushOnlineStatsComplete__Delegate,&Parms);
    }
    void delegateOnReadOnlineStatsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadOnlineStatsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadOnlineStatsComplete,&__OnReadOnlineStatsComplete__Delegate,&Parms);
    }
    void delegateOnRecognitionComplete()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnRecognitionComplete,&__OnRecognitionComplete__Delegate,NULL);
    }
    void delegateOnPlayerTalkingStateChange(struct FUniqueNetId Player,UBOOL bIsTalking)
    {
        OnlineSubsystemLive_eventOnPlayerTalkingStateChange_Parms Parms(EC_EventParm);
        Parms.Player=Player;
        Parms.bIsTalking=bIsTalking ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnPlayerTalkingStateChange,&__OnPlayerTalkingStateChange__Delegate,&Parms);
    }
    void delegateOnWriteSaveGameDataComplete(UBOOL bWasSuccessful,BYTE LocalUserNum,INT DeviceID,const FString& FriendlyName,const FString& Filename,const FString& SaveFileName)
    {
        OnlineSubsystemLive_eventOnWriteSaveGameDataComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.LocalUserNum=LocalUserNum;
        Parms.DeviceID=DeviceID;
        Parms.FriendlyName=FriendlyName;
        Parms.Filename=Filename;
        Parms.SaveFileName=SaveFileName;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnWriteSaveGameDataComplete,&__OnWriteSaveGameDataComplete__Delegate,&Parms);
    }
    void delegateOnReadSaveGameDataComplete(UBOOL bWasSuccessful,BYTE LocalUserNum,INT DeviceID,const FString& FriendlyName,const FString& Filename,const FString& SaveFileName)
    {
        OnlineSubsystemLive_eventOnReadSaveGameDataComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.LocalUserNum=LocalUserNum;
        Parms.DeviceID=DeviceID;
        Parms.FriendlyName=FriendlyName;
        Parms.Filename=Filename;
        Parms.SaveFileName=SaveFileName;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadSaveGameDataComplete,&__OnReadSaveGameDataComplete__Delegate,&Parms);
    }
    void delegateOnQueryAvailableDownloadsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnQueryAvailableDownloadsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnQueryAvailableDownloadsComplete,&__OnQueryAvailableDownloadsComplete__Delegate,&Parms);
    }
    void delegateOnReadCrossTitleSaveGameDataComplete(UBOOL bWasSuccessful,BYTE LocalUserNum,INT DeviceID,INT TitleId,const FString& FriendlyName,const FString& Filename,const FString& SaveFileName)
    {
        OnlineSubsystemLive_eventOnReadCrossTitleSaveGameDataComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.LocalUserNum=LocalUserNum;
        Parms.DeviceID=DeviceID;
        Parms.TitleId=TitleId;
        Parms.FriendlyName=FriendlyName;
        Parms.Filename=Filename;
        Parms.SaveFileName=SaveFileName;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadCrossTitleSaveGameDataComplete,&__OnReadCrossTitleSaveGameDataComplete__Delegate,&Parms);
    }
    void delegateOnReadCrossTitleContentComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadCrossTitleContentComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadCrossTitleContentComplete,&__OnReadCrossTitleContentComplete__Delegate,&Parms);
    }
    void delegateOnReadContentComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadContentComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadContentComplete,&__OnReadContentComplete__Delegate,&Parms);
    }
    void delegateOnContentChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnContentChange,&__OnContentChange__Delegate,NULL);
    }
    void delegateOnGameInviteAccepted(const struct FOnlineGameSearchResult& InviteResult)
    {
        OnlineSubsystemLive_eventOnGameInviteAccepted_Parms Parms(EC_EventParm);
        Parms.InviteResult=InviteResult;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnGameInviteAccepted,&__OnGameInviteAccepted__Delegate,&Parms);
    }
    void delegateOnReadFriendsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadFriendsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadFriendsComplete,&__OnReadFriendsComplete__Delegate,&Parms);
    }
    void delegateOnArbitrationRegistrationComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnArbitrationRegistrationComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnArbitrationRegistrationComplete,&__OnArbitrationRegistrationComplete__Delegate,&Parms);
    }
    void delegateOnEndOnlineGameComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnEndOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnEndOnlineGameComplete,&__OnEndOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnStartOnlineGameComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnStartOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnStartOnlineGameComplete,&__OnStartOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnProfileDataChanged()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnProfileDataChanged,&__OnProfileDataChanged__Delegate,NULL);
    }
    void delegateOnUnlockAchievementComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnUnlockAchievementComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnUnlockAchievementComplete,&__OnUnlockAchievementComplete__Delegate,&Parms);
    }
    void delegateOnDeviceSelectionComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnDeviceSelectionComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnDeviceSelectionComplete,&__OnDeviceSelectionComplete__Delegate,&Parms);
    }
    void delegateOnWritePlayerStorageComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnWritePlayerStorageComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnWritePlayerStorageComplete,&__OnWritePlayerStorageComplete__Delegate,&Parms);
    }
    void delegateOnReadPlayerStorageForNetIdComplete(struct FUniqueNetId NetId,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadPlayerStorageForNetIdComplete_Parms Parms(EC_EventParm);
        Parms.NetId=NetId;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadPlayerStorageForNetIdComplete,&__OnReadPlayerStorageForNetIdComplete__Delegate,&Parms);
    }
    void delegateOnReadPlayerStorageComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadPlayerStorageComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadPlayerStorageComplete,&__OnReadPlayerStorageComplete__Delegate,&Parms);
    }
    void delegateOnWriteProfileSettingsComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnWriteProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnWriteProfileSettingsComplete,&__OnWriteProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnReadProfileSettingsComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadProfileSettingsComplete,&__OnReadProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnJoinMigratedOnlineGameComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnJoinMigratedOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnJoinMigratedOnlineGameComplete,&__OnJoinMigratedOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnMigrateOnlineGameComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnMigrateOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnMigrateOnlineGameComplete,&__OnMigrateOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnRecalculateSkillRatingComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnRecalculateSkillRatingComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnRecalculateSkillRatingComplete,&__OnRecalculateSkillRatingComplete__Delegate,&Parms);
    }
    void delegateOnUnregisterPlayerComplete(FName SessionName,struct FUniqueNetId PlayerID,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnUnregisterPlayerComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.PlayerID=PlayerID;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnUnregisterPlayerComplete,&__OnUnregisterPlayerComplete__Delegate,&Parms);
    }
    void delegateOnRegisterPlayerComplete(FName SessionName,struct FUniqueNetId PlayerID,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnRegisterPlayerComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.PlayerID=PlayerID;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnRegisterPlayerComplete,&__OnRegisterPlayerComplete__Delegate,&Parms);
    }
    void delegateOnJoinOnlineGameComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnJoinOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnJoinOnlineGameComplete,&__OnJoinOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnQosStatusChanged(INT NumComplete,INT NumTotal)
    {
        OnlineSubsystemLive_eventOnQosStatusChanged_Parms Parms(EC_EventParm);
        Parms.NumComplete=NumComplete;
        Parms.NumTotal=NumTotal;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnQosStatusChanged,&__OnQosStatusChanged__Delegate,&Parms);
    }
    void delegateOnCancelFindOnlineGamesComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnCancelFindOnlineGamesComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnCancelFindOnlineGamesComplete,&__OnCancelFindOnlineGamesComplete__Delegate,&Parms);
    }
    void delegateOnDestroyOnlineGameComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnDestroyOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnDestroyOnlineGameComplete,&__OnDestroyOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnUpdateOnlineGameComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnUpdateOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnUpdateOnlineGameComplete,&__OnUpdateOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnCreateOnlineGameComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnCreateOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnCreateOnlineGameComplete,&__OnCreateOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnFindOnlineGamesComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnFindOnlineGamesComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnFindOnlineGamesComplete,&__OnFindOnlineGamesComplete__Delegate,&Parms);
    }
    void delegateOnReadTitleFileComplete(UBOOL bWasSuccessful,const FString& Filename)
    {
        OnlineSubsystemLive_eventOnReadTitleFileComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.Filename=Filename;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadTitleFileComplete,&__OnReadTitleFileComplete__Delegate,&Parms);
    }
    void delegateOnStorageDeviceChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnStorageDeviceChange,&__OnStorageDeviceChange__Delegate,NULL);
    }
    void delegateOnConnectionStatusChange(BYTE ConnectionStatus)
    {
        OnlineSubsystemLive_eventOnConnectionStatusChange_Parms Parms(EC_EventParm);
        Parms.ConnectionStatus=ConnectionStatus;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnConnectionStatusChange,&__OnConnectionStatusChange__Delegate,&Parms);
    }
    void delegateOnControllerChange(INT ControllerId,UBOOL bIsConnected)
    {
        OnlineSubsystemLive_eventOnControllerChange_Parms Parms(EC_EventParm);
        Parms.ControllerId=ControllerId;
        Parms.bIsConnected=bIsConnected ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnControllerChange,&__OnControllerChange__Delegate,&Parms);
    }
    void delegateOnExternalUIChange(UBOOL bIsOpening)
    {
        OnlineSubsystemLive_eventOnExternalUIChange_Parms Parms(EC_EventParm);
        Parms.bIsOpening=bIsOpening ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnExternalUIChange,&__OnExternalUIChange__Delegate,&Parms);
    }
    void delegateOnLinkStatusChange(UBOOL bIsConnected)
    {
        OnlineSubsystemLive_eventOnLinkStatusChange_Parms Parms(EC_EventParm);
        Parms.bIsConnected=bIsConnected ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnLinkStatusChange,&__OnLinkStatusChange__Delegate,&Parms);
    }
    void delegateOnKeyboardInputComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnKeyboardInputComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnKeyboardInputComplete,&__OnKeyboardInputComplete__Delegate,&Parms);
    }
    void delegateOnLoginStatusChange(BYTE NewStatus,struct FUniqueNetId NewId)
    {
        OnlineSubsystemLive_eventOnLoginStatusChange_Parms Parms(EC_EventParm);
        Parms.NewStatus=NewStatus;
        Parms.NewId=NewId;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnLoginStatusChange,&__OnLoginStatusChange__Delegate,&Parms);
    }
    void delegateOnLogoutCompleted(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnLogoutCompleted_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnLogoutCompleted,&__OnLogoutCompleted__Delegate,&Parms);
    }
    void delegateOnLoginFailed(BYTE LocalUserNum,BYTE ErrorCode)
    {
        OnlineSubsystemLive_eventOnLoginFailed_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.ErrorCode=ErrorCode;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnLoginFailed,&__OnLoginFailed__Delegate,&Parms);
    }
    void delegateOnFriendsChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnFriendsChange,&__OnFriendsChange__Delegate,NULL);
    }
    void delegateOnMutingChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnMutingChange,&__OnMutingChange__Delegate,NULL);
    }
    void delegateOnLoginCancelled()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnLoginCancelled,&__OnLoginCancelled__Delegate,NULL);
    }
    void delegateOnLoginChange(BYTE LocalUserNum)
    {
        OnlineSubsystemLive_eventOnLoginChange_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnLoginChange,&__OnLoginChange__Delegate,&Parms);
    }
    DECLARE_CLASS(UOnlineSubsystemLive,UOnlineSubsystemCommonImpl,0|CLASS_Config,OnlineSubsystemLive)
    #include "UOnlineSubsystemLive.h"
};

class UOnlineTitleFileDownloadMcpLive : public UOnlineTitleFileDownloadMcp
{
public:
    //## BEGIN PROPS OnlineTitleFileDownloadMcpLive
    //## END PROPS OnlineTitleFileDownloadMcpLive

    DECLARE_CLASS(UOnlineTitleFileDownloadMcpLive,UOnlineTitleFileDownloadMcp,0|CLASS_Config,OnlineSubsystemLive)
	/**
	 * Builds the URL to use when fetching the specified file
	 *
	 * @param FileName the file that is being requested
	 *
	 * @return the URL to use with all of the per platform extras
	 */
	virtual FString BuildURLParameters(const FString& FileName);
};

#undef DECLARE_CLASS
#undef DECLARE_CASTED_CLASS
#undef DECLARE_ABSTRACT_CLASS
#undef DECLARE_ABSTRACT_CASTED_CLASS
#endif // !INCLUDED_ONLINESUBSYSTEMLIVE_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UDownloadableContentEnumeratorLive,-1,execAppendDLC);
AUTOGENERATE_FUNCTION(ULivePartyChat,-1,execIsInPartyChat);
AUTOGENERATE_FUNCTION(ULivePartyChat,-1,execShowCommunitySessionsUI);
AUTOGENERATE_FUNCTION(ULivePartyChat,-1,execShowVoiceChannelUI);
AUTOGENERATE_FUNCTION(ULivePartyChat,-1,execShowPartyUI);
AUTOGENERATE_FUNCTION(ULivePartyChat,-1,execSetPartyMemberCustomData);
AUTOGENERATE_FUNCTION(ULivePartyChat,-1,execGetPartyMemberInformation);
AUTOGENERATE_FUNCTION(ULivePartyChat,-1,execGetPartyMembersInformation);
AUTOGENERATE_FUNCTION(ULivePartyChat,-1,execSendPartyGameInvites);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSetDebugSpewLevel);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execDumpVoiceRegistration);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execDumpLiveSessionState);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetBuildUniqueId);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowCustomMessageUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execPostLink);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execPostImage);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execQuerySocialPostPrivileges);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadCrossTitleProfileSettings);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnlockAvatarAward);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowCustomPlayersUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetAchievements);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadAchievements);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCalcAggregateSkill);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execJoinFriendGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSendGameInviteToFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSendGameInviteToFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSendMessageToFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execWriteOnlinePlayerScores);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execFlushOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execWriteOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execFreeStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadOnlineStatsByRankAroundPlayer);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadOnlineStatsByRank);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadOnlineStatsForFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSetSpeechRecognitionObject);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSelectVocabulary);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetRecognitionResults);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execStopSpeechRecognition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execStartSpeechRecognition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execStopNetworkedVoice);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execStartNetworkedVoice);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnmuteRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execMuteRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSetRemoteTalkerPriority);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsHeadsetPresent);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsRemotePlayerTalking);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsLocalPlayerTalking);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnregisterRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execRegisterRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnregisterLocalTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execRegisterLocalTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execClearSaveGames);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execDeleteSaveGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execWriteSaveGameData);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetSaveGameData);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadSaveGameData);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execQueryAvailableDownloads);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execClearCrossTitleSaveGames);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetCrossTitleSaveGameData);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadCrossTitleSaveGameData);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetCrossTitleContentList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execClearCrossTitleContentList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadCrossTitleContentList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetContentList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execClearContentList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadContentList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetFriendsList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadFriendsList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execAcceptGameInvite);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execRegisterForArbitration);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execEndOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execStartOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnlockGamerPicture);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnlockAchievement);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsDeviceValid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetDeviceSelectionResults);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowDeviceSelectionUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowMembershipMarketplaceUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowContentMarketplaceUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowInviteUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSetOnlineStatus);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execWritePlayerStorage);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execClearReadPlayerStorageForNetIdCompleteDelegate);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execAddReadPlayerStorageForNetIdCompleteDelegate);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadPlayerStorageForNetId);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadPlayerStorage);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execWriteProfileSettings);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadProfileSettings);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execJoinMigratedOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execMigrateOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execRecalculateSkillRating);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnregisterPlayers);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnregisterPlayer);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execRegisterPlayers);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execRegisterPlayer);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetResolvedConnectString);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execJoinOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execFreeSearchResults);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execBindPlatformSpecificSessionToSearch);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadPlatformSpecificSessionInfoBySessionName);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadPlatformSpecificSessionInfo);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCancelFindOnlineGames);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execFindOnlineGames);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execDestroyOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUpdateOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCreateOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execClearDownloadedFile);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execClearDownloadedFiles);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetTitleFileContents);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadTitleFile);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetLocale);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetNATType);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsControllerConnected);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSetNetworkNotificationPosition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execHasLinkConnection);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowKeyboardUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowPlayersUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowGuideUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowAchievementsUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowMessagesUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowGamerCardUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowFeedbackUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowFriendsInviteUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowFriendsUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsMuted);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execAreAnyFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanShowPresenceInformation);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanViewPlayerProfiles);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanPurchaseContent);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanDownloadUserContent);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanCommunicate);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanPlayOnline);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetPlayerNickname);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetUniquePlayerId);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsLocalLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsGuestLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetLoginStatus);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execLogout);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execAutoLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowLoginUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execExit);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execInit);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef ONLINESUBSYSTEMLIVE_NATIVE_DEFS
#define ONLINESUBSYSTEMLIVE_NATIVE_DEFS

#define AUTO_INITIALIZE_REGISTRANTS_ONLINESUBSYSTEMLIVE \
	UClientBeaconAddressResolverLive::StaticClass(); \
	UDownloadableContentEnumeratorLive::StaticClass(); \
	GNativeLookupFuncs.Set(FName("DownloadableContentEnumeratorLive"), GOnlineSubsystemLiveUDownloadableContentEnumeratorLiveNatives); \
	ULivePartyChat::StaticClass(); \
	GNativeLookupFuncs.Set(FName("LivePartyChat"), GOnlineSubsystemLiveULivePartyChatNatives); \
	UOnlineEventsInterfaceMcpLive::StaticClass(); \
	UOnlineSubsystemLive::StaticClass(); \
	GNativeLookupFuncs.Set(FName("OnlineSubsystemLive"), GOnlineSubsystemLiveUOnlineSubsystemLiveNatives); \
	UOnlineTitleFileDownloadMcpLive::StaticClass(); \

#endif // ONLINESUBSYSTEMLIVE_NATIVE_DEFS

#ifdef NATIVES_ONLY
FNativeFunctionLookup GOnlineSubsystemLiveUDownloadableContentEnumeratorLiveNatives[] = 
{ 
	MAP_NATIVE(UDownloadableContentEnumeratorLive, execAppendDLC)
	{NULL, NULL}
};

FNativeFunctionLookup GOnlineSubsystemLiveULivePartyChatNatives[] = 
{ 
	MAP_NATIVE(ULivePartyChat, execIsInPartyChat)
	MAP_NATIVE(ULivePartyChat, execShowCommunitySessionsUI)
	MAP_NATIVE(ULivePartyChat, execShowVoiceChannelUI)
	MAP_NATIVE(ULivePartyChat, execShowPartyUI)
	MAP_NATIVE(ULivePartyChat, execSetPartyMemberCustomData)
	MAP_NATIVE(ULivePartyChat, execGetPartyMemberInformation)
	MAP_NATIVE(ULivePartyChat, execGetPartyMembersInformation)
	MAP_NATIVE(ULivePartyChat, execSendPartyGameInvites)
	{NULL, NULL}
};

FNativeFunctionLookup GOnlineSubsystemLiveUOnlineSubsystemLiveNatives[] = 
{ 
	MAP_NATIVE(UOnlineSubsystemLive, execSetDebugSpewLevel)
	MAP_NATIVE(UOnlineSubsystemLive, execDumpVoiceRegistration)
	MAP_NATIVE(UOnlineSubsystemLive, execDumpLiveSessionState)
	MAP_NATIVE(UOnlineSubsystemLive, execGetBuildUniqueId)
	MAP_NATIVE(UOnlineSubsystemLive, execShowCustomMessageUI)
	MAP_NATIVE(UOnlineSubsystemLive, execPostLink)
	MAP_NATIVE(UOnlineSubsystemLive, execPostImage)
	MAP_NATIVE(UOnlineSubsystemLive, execQuerySocialPostPrivileges)
	MAP_NATIVE(UOnlineSubsystemLive, execReadCrossTitleProfileSettings)
	MAP_NATIVE(UOnlineSubsystemLive, execUnlockAvatarAward)
	MAP_NATIVE(UOnlineSubsystemLive, execShowCustomPlayersUI)
	MAP_NATIVE(UOnlineSubsystemLive, execGetAchievements)
	MAP_NATIVE(UOnlineSubsystemLive, execReadAchievements)
	MAP_NATIVE(UOnlineSubsystemLive, execCalcAggregateSkill)
	MAP_NATIVE(UOnlineSubsystemLive, execJoinFriendGame)
	MAP_NATIVE(UOnlineSubsystemLive, execSendGameInviteToFriends)
	MAP_NATIVE(UOnlineSubsystemLive, execSendGameInviteToFriend)
	MAP_NATIVE(UOnlineSubsystemLive, execSendMessageToFriend)
	MAP_NATIVE(UOnlineSubsystemLive, execWriteOnlinePlayerScores)
	MAP_NATIVE(UOnlineSubsystemLive, execFlushOnlineStats)
	MAP_NATIVE(UOnlineSubsystemLive, execWriteOnlineStats)
	MAP_NATIVE(UOnlineSubsystemLive, execFreeStats)
	MAP_NATIVE(UOnlineSubsystemLive, execReadOnlineStatsByRankAroundPlayer)
	MAP_NATIVE(UOnlineSubsystemLive, execReadOnlineStatsByRank)
	MAP_NATIVE(UOnlineSubsystemLive, execReadOnlineStatsForFriends)
	MAP_NATIVE(UOnlineSubsystemLive, execReadOnlineStats)
	MAP_NATIVE(UOnlineSubsystemLive, execSetSpeechRecognitionObject)
	MAP_NATIVE(UOnlineSubsystemLive, execSelectVocabulary)
	MAP_NATIVE(UOnlineSubsystemLive, execGetRecognitionResults)
	MAP_NATIVE(UOnlineSubsystemLive, execStopSpeechRecognition)
	MAP_NATIVE(UOnlineSubsystemLive, execStartSpeechRecognition)
	MAP_NATIVE(UOnlineSubsystemLive, execStopNetworkedVoice)
	MAP_NATIVE(UOnlineSubsystemLive, execStartNetworkedVoice)
	MAP_NATIVE(UOnlineSubsystemLive, execUnmuteRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemLive, execMuteRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemLive, execSetRemoteTalkerPriority)
	MAP_NATIVE(UOnlineSubsystemLive, execIsHeadsetPresent)
	MAP_NATIVE(UOnlineSubsystemLive, execIsRemotePlayerTalking)
	MAP_NATIVE(UOnlineSubsystemLive, execIsLocalPlayerTalking)
	MAP_NATIVE(UOnlineSubsystemLive, execUnregisterRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemLive, execRegisterRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemLive, execUnregisterLocalTalker)
	MAP_NATIVE(UOnlineSubsystemLive, execRegisterLocalTalker)
	MAP_NATIVE(UOnlineSubsystemLive, execClearSaveGames)
	MAP_NATIVE(UOnlineSubsystemLive, execDeleteSaveGame)
	MAP_NATIVE(UOnlineSubsystemLive, execWriteSaveGameData)
	MAP_NATIVE(UOnlineSubsystemLive, execGetSaveGameData)
	MAP_NATIVE(UOnlineSubsystemLive, execReadSaveGameData)
	MAP_NATIVE(UOnlineSubsystemLive, execQueryAvailableDownloads)
	MAP_NATIVE(UOnlineSubsystemLive, execClearCrossTitleSaveGames)
	MAP_NATIVE(UOnlineSubsystemLive, execGetCrossTitleSaveGameData)
	MAP_NATIVE(UOnlineSubsystemLive, execReadCrossTitleSaveGameData)
	MAP_NATIVE(UOnlineSubsystemLive, execGetCrossTitleContentList)
	MAP_NATIVE(UOnlineSubsystemLive, execClearCrossTitleContentList)
	MAP_NATIVE(UOnlineSubsystemLive, execReadCrossTitleContentList)
	MAP_NATIVE(UOnlineSubsystemLive, execGetContentList)
	MAP_NATIVE(UOnlineSubsystemLive, execClearContentList)
	MAP_NATIVE(UOnlineSubsystemLive, execReadContentList)
	MAP_NATIVE(UOnlineSubsystemLive, execGetFriendsList)
	MAP_NATIVE(UOnlineSubsystemLive, execReadFriendsList)
	MAP_NATIVE(UOnlineSubsystemLive, execAcceptGameInvite)
	MAP_NATIVE(UOnlineSubsystemLive, execRegisterForArbitration)
	MAP_NATIVE(UOnlineSubsystemLive, execEndOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive, execStartOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive, execUnlockGamerPicture)
	MAP_NATIVE(UOnlineSubsystemLive, execUnlockAchievement)
	MAP_NATIVE(UOnlineSubsystemLive, execIsDeviceValid)
	MAP_NATIVE(UOnlineSubsystemLive, execGetDeviceSelectionResults)
	MAP_NATIVE(UOnlineSubsystemLive, execShowDeviceSelectionUI)
	MAP_NATIVE(UOnlineSubsystemLive, execShowMembershipMarketplaceUI)
	MAP_NATIVE(UOnlineSubsystemLive, execShowContentMarketplaceUI)
	MAP_NATIVE(UOnlineSubsystemLive, execShowInviteUI)
	MAP_NATIVE(UOnlineSubsystemLive, execSetOnlineStatus)
	MAP_NATIVE(UOnlineSubsystemLive, execWritePlayerStorage)
	MAP_NATIVE(UOnlineSubsystemLive, execClearReadPlayerStorageForNetIdCompleteDelegate)
	MAP_NATIVE(UOnlineSubsystemLive, execAddReadPlayerStorageForNetIdCompleteDelegate)
	MAP_NATIVE(UOnlineSubsystemLive, execReadPlayerStorageForNetId)
	MAP_NATIVE(UOnlineSubsystemLive, execReadPlayerStorage)
	MAP_NATIVE(UOnlineSubsystemLive, execWriteProfileSettings)
	MAP_NATIVE(UOnlineSubsystemLive, execReadProfileSettings)
	MAP_NATIVE(UOnlineSubsystemLive, execJoinMigratedOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive, execMigrateOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive, execRecalculateSkillRating)
	MAP_NATIVE(UOnlineSubsystemLive, execUnregisterPlayers)
	MAP_NATIVE(UOnlineSubsystemLive, execUnregisterPlayer)
	MAP_NATIVE(UOnlineSubsystemLive, execRegisterPlayers)
	MAP_NATIVE(UOnlineSubsystemLive, execRegisterPlayer)
	MAP_NATIVE(UOnlineSubsystemLive, execGetResolvedConnectString)
	MAP_NATIVE(UOnlineSubsystemLive, execJoinOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive, execFreeSearchResults)
	MAP_NATIVE(UOnlineSubsystemLive, execBindPlatformSpecificSessionToSearch)
	MAP_NATIVE(UOnlineSubsystemLive, execReadPlatformSpecificSessionInfoBySessionName)
	MAP_NATIVE(UOnlineSubsystemLive, execReadPlatformSpecificSessionInfo)
	MAP_NATIVE(UOnlineSubsystemLive, execCancelFindOnlineGames)
	MAP_NATIVE(UOnlineSubsystemLive, execFindOnlineGames)
	MAP_NATIVE(UOnlineSubsystemLive, execDestroyOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive, execUpdateOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive, execCreateOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive, execClearDownloadedFile)
	MAP_NATIVE(UOnlineSubsystemLive, execClearDownloadedFiles)
	MAP_NATIVE(UOnlineSubsystemLive, execGetTitleFileContents)
	MAP_NATIVE(UOnlineSubsystemLive, execReadTitleFile)
	MAP_NATIVE(UOnlineSubsystemLive, execGetLocale)
	MAP_NATIVE(UOnlineSubsystemLive, execGetNATType)
	MAP_NATIVE(UOnlineSubsystemLive, execIsControllerConnected)
	MAP_NATIVE(UOnlineSubsystemLive, execSetNetworkNotificationPosition)
	MAP_NATIVE(UOnlineSubsystemLive, execHasLinkConnection)
	MAP_NATIVE(UOnlineSubsystemLive, execShowKeyboardUI)
	MAP_NATIVE(UOnlineSubsystemLive, execShowPlayersUI)
	MAP_NATIVE(UOnlineSubsystemLive, execShowGuideUI)
	MAP_NATIVE(UOnlineSubsystemLive, execShowAchievementsUI)
	MAP_NATIVE(UOnlineSubsystemLive, execShowMessagesUI)
	MAP_NATIVE(UOnlineSubsystemLive, execShowGamerCardUI)
	MAP_NATIVE(UOnlineSubsystemLive, execShowFeedbackUI)
	MAP_NATIVE(UOnlineSubsystemLive, execShowFriendsInviteUI)
	MAP_NATIVE(UOnlineSubsystemLive, execShowFriendsUI)
	MAP_NATIVE(UOnlineSubsystemLive, execIsMuted)
	MAP_NATIVE(UOnlineSubsystemLive, execAreAnyFriends)
	MAP_NATIVE(UOnlineSubsystemLive, execIsFriend)
	MAP_NATIVE(UOnlineSubsystemLive, execCanShowPresenceInformation)
	MAP_NATIVE(UOnlineSubsystemLive, execCanViewPlayerProfiles)
	MAP_NATIVE(UOnlineSubsystemLive, execCanPurchaseContent)
	MAP_NATIVE(UOnlineSubsystemLive, execCanDownloadUserContent)
	MAP_NATIVE(UOnlineSubsystemLive, execCanCommunicate)
	MAP_NATIVE(UOnlineSubsystemLive, execCanPlayOnline)
	MAP_NATIVE(UOnlineSubsystemLive, execGetPlayerNickname)
	MAP_NATIVE(UOnlineSubsystemLive, execGetUniquePlayerId)
	MAP_NATIVE(UOnlineSubsystemLive, execIsLocalLogin)
	MAP_NATIVE(UOnlineSubsystemLive, execIsGuestLogin)
	MAP_NATIVE(UOnlineSubsystemLive, execGetLoginStatus)
	MAP_NATIVE(UOnlineSubsystemLive, execLogout)
	MAP_NATIVE(UOnlineSubsystemLive, execAutoLogin)
	MAP_NATIVE(UOnlineSubsystemLive, execLogin)
	MAP_NATIVE(UOnlineSubsystemLive, execShowLoginUI)
	MAP_NATIVE(UOnlineSubsystemLive, execExit)
	MAP_NATIVE(UOnlineSubsystemLive, execInit)
	{NULL, NULL}
};

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE_NODIE(UClientBeaconAddressResolverLive)
VERIFY_CLASS_OFFSET_NODIE(UDownloadableContentEnumeratorLive,DownloadableContentEnumeratorLive,ReadsOutstanding)
VERIFY_CLASS_SIZE_NODIE(UDownloadableContentEnumeratorLive)
VERIFY_CLASS_OFFSET_NODIE(ULivePartyChat,LivePartyChat,NotificationHandle)
VERIFY_CLASS_OFFSET_NODIE(ULivePartyChat,LivePartyChat,__OnPartyMembersInfoChanged__Delegate)
VERIFY_CLASS_SIZE_NODIE(ULivePartyChat)
VERIFY_CLASS_SIZE_NODIE(UOnlineEventsInterfaceMcpLive)
VERIFY_CLASS_OFFSET_NODIE(UOnlineSubsystemLive,OnlineSubsystemLive,NotificationHandle)
VERIFY_CLASS_OFFSET_NODIE(UOnlineSubsystemLive,OnlineSubsystemLive,__OnRequestTitleFileListComplete__Delegate)
VERIFY_CLASS_SIZE_NODIE(UOnlineSubsystemLive)
VERIFY_CLASS_SIZE_NODIE(UOnlineTitleFileDownloadMcpLive)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
