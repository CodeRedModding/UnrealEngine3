/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#include "OnlineSubsystemGameSpyNames.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_ONLINESUBSYSTEMGAMESPY_ENUMS
#define INCLUDED_ONLINESUBSYSTEMGAMESPY_ENUMS 1

enum EMuteType
{
    MUTE_None               =0,
    MUTE_AllButFriends      =1,
    MUTE_All                =2,
    MUTE_MAX                =3,
};
#define FOREACH_ENUM_EMUTETYPE(op) \
    op(MUTE_None) \
    op(MUTE_AllButFriends) \
    op(MUTE_All) 

#endif // !INCLUDED_ONLINESUBSYSTEMGAMESPY_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_ONLINESUBSYSTEMGAMESPY_CLASSES
#define INCLUDED_ONLINESUBSYSTEMGAMESPY_CLASSES 1
#define ENABLE_DECLARECLASS_MACRO 1
#include "UnObjBas.h"
#undef ENABLE_DECLARECLASS_MACRO

struct FSBServer
{
    _SBServer* Server;

    /** Constructors */
    FSBServer() {}
    FSBServer(EEventParm)
    {
        appMemzero(this, sizeof(FSBServer));
    }
};

class UOnlineGameInterfaceGameSpy : public UOnlineGameInterfaceImpl
{
public:
    //## BEGIN PROPS OnlineGameInterfaceGameSpy
    struct qr2_implementation_s* QR2Handle;
    struct _ServerBrowser* SBHandle;
    INT QR2OwningPlayerIdKeyId;
    INT QR2FirstDataBindableKeyId;
    INT QR2NumDataBindableKeys;
    TArrayNoInit<FName> QR2DataBindableKeyNames;
    INT QR2FirstSettingKeyId;
    INT QR2NumSettingKeys;
    INT QR2FirstPropertyKeyId;
    INT QR2NumPropertyKeys;
    INT QR2NpIdKeyId;
    FStringNoInit QR2NpIdString;
    TArrayNoInit<FScriptDelegate> GameInviteAcceptedDelegates;
    class UOnlineGameSearch* InviteGameSearch;
    FStringNoInit InviteLocationUrl;
    TArrayNoInit<FScriptDelegate> RegisterPlayerCompleteDelegates;
    TArrayNoInit<FScriptDelegate> UnregisterPlayerCompleteDelegates;
    FScriptDelegate __OnGameInviteAccepted__Delegate;
    FScriptDelegate __OnRegisterPlayerComplete__Delegate;
    FScriptDelegate __OnUnregisterPlayerComplete__Delegate;
    //## END PROPS OnlineGameInterfaceGameSpy

    virtual UBOOL UpdateOnlineGame(FName SessionName,class UOnlineGameSettings* UpdatedGameSettings,UBOOL bShouldRefreshOnlineData=FALSE);
    virtual UBOOL AcceptGameInvite(BYTE LocalUserNum,FName SessionName);
    virtual UBOOL RegisterPlayer(FName SessionName,struct FUniqueNetId PlayerID,UBOOL bWasInvited);
    virtual UBOOL UnregisterPlayer(FName SessionName,struct FUniqueNetId PlayerID);
    virtual UBOOL QueryNonAdvertisedData(INT StartAt,INT NumberToQuery);
    DECLARE_FUNCTION(execUpdateOnlineGame)
    {
        P_GET_NAME(SessionName);
        P_GET_OBJECT(UOnlineGameSettings,UpdatedGameSettings);
        P_GET_UBOOL_OPTX(bShouldRefreshOnlineData,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->UpdateOnlineGame(SessionName,UpdatedGameSettings,bShouldRefreshOnlineData);
    }
    DECLARE_FUNCTION(execAcceptGameInvite)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=this->AcceptGameInvite(LocalUserNum,SessionName);
    }
    DECLARE_FUNCTION(execRegisterPlayer)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_UBOOL(bWasInvited);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterPlayer(SessionName,PlayerID,bWasInvited);
    }
    DECLARE_FUNCTION(execUnregisterPlayer)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->UnregisterPlayer(SessionName,PlayerID);
    }
    DECLARE_FUNCTION(execQueryNonAdvertisedData)
    {
        P_GET_INT(StartAt);
        P_GET_INT(NumberToQuery);
        P_FINISH;
        *(UBOOL*)Result=this->QueryNonAdvertisedData(StartAt,NumberToQuery);
    }
    DECLARE_CLASS(UOnlineGameInterfaceGameSpy,UOnlineGameInterfaceImpl,0|CLASS_Config,OnlineSubsystemGameSpy)
    #include "UOnlineGameInterfaceGameSpy.h"
};

struct FPerUserProfileDelegates
{
    TArrayNoInit<FScriptDelegate> Delegates;

    /** Constructors */
    FPerUserProfileDelegates() {}
    FPerUserProfileDelegates(EEventParm)
    {
        appMemzero(this, sizeof(FPerUserProfileDelegates));
    }
};

struct FLocalTalkerGS : public FLocalTalker
{
    MS_ALIGN(4) BYTE MuteType GCC_ALIGN(4); // Extra alignment flags needed because all properties are bytes
    SCRIPT_ALIGN;

    /** Constructors */
    FLocalTalkerGS() {}
    FLocalTalkerGS(EEventParm)
    {
        appMemzero(this, sizeof(FLocalTalkerGS));
    }
};

struct FViewPropertyToKeyId
{
    INT ViewId;
    INT PropertyId;
    INT KeyId;

    /** Constructors */
    FViewPropertyToKeyId() {}
    FViewPropertyToKeyId(EEventParm)
    {
        appMemzero(this, sizeof(FViewPropertyToKeyId));
    }
};

struct FPlayerStat
{
    INT KeyId;
    struct FSettingsData Data;

    /** Constructors */
    FPlayerStat() {}
    FPlayerStat(EEventParm)
    {
        appMemzero(this, sizeof(FPlayerStat));
    }
};

struct FPendingPlayerStats
{
    struct FUniqueNetId Player;
    FStringNoInit PlayerName;
    FStringNoInit StatGuid;
    TArrayNoInit<struct FPlayerStat> Stats;
    struct FOnlinePlayerScore Score;
    FStringNoInit Place;

    /** Constructors */
    FPendingPlayerStats() {}
    FPendingPlayerStats(EEventParm)
    {
        appMemzero(this, sizeof(FPendingPlayerStats));
    }
};

struct FOnlineStatusMapping
{
    INT StatusId;
    FStringNoInit StatusString;

    /** Constructors */
    FOnlineStatusMapping() {}
    FOnlineStatusMapping(EEventParm)
    {
        appMemzero(this, sizeof(FOnlineStatusMapping));
    }
};

struct FControllerConnectionState
{
    INT bIsControllerConnected;
    INT bLastIsControllerConnected;

    /** Constructors */
    FControllerConnectionState() {}
    FControllerConnectionState(EEventParm)
    {
        appMemzero(this, sizeof(FControllerConnectionState));
    }
};

struct OnlineSubsystemGameSpy_eventOnReadAchievementsComplete_Parms
{
    INT TitleId;
    OnlineSubsystemGameSpy_eventOnReadAchievementsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnUnlockAchievementComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnUnlockAchievementComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnRegisterHostStatGuidComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnRegisterHostStatGuidComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnFriendMessageReceived_Parms
{
    BYTE LocalUserNum;
    struct FUniqueNetId SendingPlayer;
    FString SendingNick;
    FString Message;
    OnlineSubsystemGameSpy_eventOnFriendMessageReceived_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnJoinFriendGameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnJoinFriendGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnReceivedGameInvite_Parms
{
    BYTE LocalUserNum;
    FString InviterName;
    OnlineSubsystemGameSpy_eventOnReceivedGameInvite_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnFriendInviteReceived_Parms
{
    BYTE LocalUserNum;
    struct FUniqueNetId RequestingPlayer;
    FString RequestingNick;
    FString Message;
    OnlineSubsystemGameSpy_eventOnFriendInviteReceived_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnAddFriendByNameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnAddFriendByNameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnKeyboardInputComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnKeyboardInputComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnCreateOnlineAccountCompleted_Parms
{
    BYTE ErrorStatus;
    OnlineSubsystemGameSpy_eventOnCreateOnlineAccountCompleted_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnReadTitleFileComplete_Parms
{
    UBOOL bWasSuccessful;
    FString Filename;
    OnlineSubsystemGameSpy_eventOnReadTitleFileComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnStorageDeviceChange_Parms
{
    OnlineSubsystemGameSpy_eventOnStorageDeviceChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnConnectionStatusChange_Parms
{
    BYTE ConnectionStatus;
    OnlineSubsystemGameSpy_eventOnConnectionStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnControllerChange_Parms
{
    INT ControllerId;
    UBOOL bIsConnected;
    OnlineSubsystemGameSpy_eventOnControllerChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnExternalUIChange_Parms
{
    UBOOL bIsOpening;
    OnlineSubsystemGameSpy_eventOnExternalUIChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnLinkStatusChange_Parms
{
    UBOOL bIsConnected;
    OnlineSubsystemGameSpy_eventOnLinkStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnFlushOnlineStatsComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnFlushOnlineStatsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnReadOnlineStatsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnReadOnlineStatsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnRecognitionComplete_Parms
{
    OnlineSubsystemGameSpy_eventOnRecognitionComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnPlayerTalkingStateChange_Parms
{
    struct FUniqueNetId Player;
    UBOOL bIsTalking;
    OnlineSubsystemGameSpy_eventOnPlayerTalkingStateChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnReadFriendsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnReadFriendsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnWritePlayerStorageComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnWritePlayerStorageComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnReadPlayerStorageForNetIdComplete_Parms
{
    struct FUniqueNetId NetId;
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnReadPlayerStorageForNetIdComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnReadPlayerStorageComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnReadPlayerStorageComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnWriteProfileSettingsComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnWriteProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnReadProfileSettingsComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnReadProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnLoginStatusChange_Parms
{
    BYTE NewStatus;
    struct FUniqueNetId NewId;
    OnlineSubsystemGameSpy_eventOnLoginStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnLogoutCompleted_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnLogoutCompleted_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnLoginFailed_Parms
{
    BYTE LocalUserNum;
    BYTE ErrorCode;
    OnlineSubsystemGameSpy_eventOnLoginFailed_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnFriendsChange_Parms
{
    OnlineSubsystemGameSpy_eventOnFriendsChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnMutingChange_Parms
{
    OnlineSubsystemGameSpy_eventOnMutingChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnLoginCancelled_Parms
{
    OnlineSubsystemGameSpy_eventOnLoginCancelled_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnLoginChange_Parms
{
    BYTE LocalUserNum;
    OnlineSubsystemGameSpy_eventOnLoginChange_Parms(EEventParm)
    {
    }
};
class UOnlineSubsystemGameSpy : public UOnlineSubsystemCommonImpl
{
public:
    //## BEGIN PROPS OnlineSubsystemGameSpy
    class UOnlineGameInterfaceGameSpy* CachedGameInt;
    FStringNoInit LocalProfileName;
    FStringNoInit LoggedInPlayerName;
    struct FUniqueNetId LoggedInPlayerId;
    BITFIELD bIsLoginInProcess:1;
    BITFIELD bNeedsKeyboardTicking:1;
    BITFIELD bLastHasConnection:1;
    BITFIELD bIsStatsSessionOk:1;
    BITFIELD bHasGameSpyAccount:1;
    BITFIELD bShouldUseMcp:1;
    BITFIELD bShouldStatsReadsRequestTotals:1;
    FStringNoInit LoggedInPlayerPassword;
    INT LoggedInPlayerNum;
    BYTE LoggedInStatus;
    BYTE bWasKeyboardInputCanceled;
    FStringNoInit RemoteAuthToken;
    FStringNoInit RemoteAuthPartnerChallenge;
    TArrayNoInit<FOnlineAsyncTaskGameSpy*> AsyncTasks;
    FStringNoInit ProfileDataDirectory;
    FStringNoInit ProfileDataExtension;
    struct FPerUserProfileDelegates PerUserReadProfileSettings[4];
    TArrayNoInit<FScriptDelegate> WriteProfileSettingsDelegates;
    class UOnlineProfileSettings* CachedProfile;
    class UOnlinePlayerStorage* PlayerStorageCache[4];
    TArrayNoInit<FScriptDelegate> LocalPlayerStorageReadDelegates;
    TArrayNoInit<FScriptDelegate> LocalPlayerStorageWriteDelegates;
    TArrayNoInit<FScriptDelegate> RemotePlayerStorageReadDelegates;
    TArrayNoInit<FScriptDelegate> SpeechRecognitionCompleteDelegates;
    TArrayNoInit<FScriptDelegate> ReadFriendsDelegates;
    TArrayNoInit<FScriptDelegate> FriendsChangeDelegates;
    TArrayNoInit<FScriptDelegate> MutingChangeDelegates;
    TArrayNoInit<FScriptDelegate> LoginChangeDelegates;
    TArrayNoInit<FScriptDelegate> LoginFailedDelegates;
    TArrayNoInit<FScriptDelegate> LogoutCompletedDelegates;
    TArrayNoInit<FScriptDelegate> AccountCreateDelegates;
    TArrayNoInit<FScriptDelegate> PlayerTalkingDelegates;
    TArrayNoInit<FScriptDelegate> ReadOnlineStatsCompleteDelegates;
    TArrayNoInit<FScriptDelegate> FlushOnlineStatsDelegates;
    TArrayNoInit<FScriptDelegate> ConnectionStatusChangeDelegates;
    TArrayNoInit<FScriptDelegate> ControllerChangeDelegates;
    TArrayNoInit<FScriptDelegate> LinkStatusDelegates;
    TArrayNoInit<FScriptDelegate> ReadTitleFileCompleteDelegates;
    TArrayNoInit<FScriptDelegate> ReadAchievementsCompleteDelegates;
    TArrayNoInit<FScriptDelegate> UnlockAchievementCompleteDelegates;
    struct FLocalTalkerGS CurrentLocalTalker;
    TArrayNoInit<struct FRemoteTalker> RemoteTalkers;
    void* GPHandle;
    struct SAKEInternal* SakeHandle;
    void* SCHandle;
    GSLoginCertificate* LoginCertificate;
    GSLoginPrivateData* LoginPrivateData;
    INT SakeProfileRecordID;
    INT GameID;
    INT ProductID;
    INT NamespaceID;
    INT PartnerID;
    class UOnlineStatsRead* CurrentStatsRead;
    INT StatsVersion;
    INT NickStatsKeyId;
    INT PlaceStatsKeyId;
    TArrayNoInit<struct FViewPropertyToKeyId> StatsKeyMappings;
    TArrayNoInit<struct FPendingPlayerStats> PendingStats;
    FStringNoInit KeyboardResultsString;
    TArrayNoInit<FScriptDelegate> KeyboardInputDelegates;
    TArrayNoInit<FScriptDelegate> FriendInviteReceivedDelegates;
    TArrayNoInit<FScriptDelegate> FriendMessageReceivedDelegates;
    TArrayNoInit<FScriptDelegate> AddFriendByNameCompleteDelegates;
    FStringNoInit CachedFriendMessage;
    TArrayNoInit<FString> LocationUrlsForInvites;
    FStringNoInit LocationUrl;
    TArrayNoInit<FScriptDelegate> ReceivedGameInviteDelegates;
    TArrayNoInit<FScriptDelegate> JoinFriendGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> RegisterHostStatGuidCompleteDelegates;
    TArrayNoInit<struct FOnlineFriendMessage> CachedFriendMessages;
    TArrayNoInit<struct FOnlineStatusMapping> StatusMappings;
    FStringNoInit DefaultStatus;
    FStringNoInit GameInviteMessage;
    FNpData* NpData;
    struct FControllerConnectionState ControllerStates[4];
    FLOAT ConnectionPresenceTimeInterval;
    FLOAT ConnectionPresenceElapsedTime;
    FStringNoInit EncryptedProductKey;
    INT NextAuthId;
    FStringNoInit ServerChallenge;
    FStringNoInit ServerResponse;
    INT ServerLocalId;
    TArrayNoInit<struct FUniqueNetId> MuteList;
    FScriptDelegate __OnLoginChange__Delegate;
    FScriptDelegate __OnLoginCancelled__Delegate;
    FScriptDelegate __OnMutingChange__Delegate;
    FScriptDelegate __OnFriendsChange__Delegate;
    FScriptDelegate __OnLoginFailed__Delegate;
    FScriptDelegate __OnLogoutCompleted__Delegate;
    FScriptDelegate __OnLoginStatusChange__Delegate;
    FScriptDelegate __OnReadProfileSettingsComplete__Delegate;
    FScriptDelegate __OnWriteProfileSettingsComplete__Delegate;
    FScriptDelegate __OnReadPlayerStorageComplete__Delegate;
    FScriptDelegate __OnReadPlayerStorageForNetIdComplete__Delegate;
    FScriptDelegate __OnWritePlayerStorageComplete__Delegate;
    FScriptDelegate __OnReadFriendsComplete__Delegate;
    FScriptDelegate __OnPlayerTalkingStateChange__Delegate;
    FScriptDelegate __OnRecognitionComplete__Delegate;
    FScriptDelegate __OnReadOnlineStatsComplete__Delegate;
    FScriptDelegate __OnFlushOnlineStatsComplete__Delegate;
    FScriptDelegate __OnLinkStatusChange__Delegate;
    FScriptDelegate __OnExternalUIChange__Delegate;
    FScriptDelegate __OnControllerChange__Delegate;
    FScriptDelegate __OnConnectionStatusChange__Delegate;
    FScriptDelegate __OnStorageDeviceChange__Delegate;
    FScriptDelegate __OnReadTitleFileComplete__Delegate;
    FScriptDelegate __OnCreateOnlineAccountCompleted__Delegate;
    FScriptDelegate __OnKeyboardInputComplete__Delegate;
    FScriptDelegate __OnAddFriendByNameComplete__Delegate;
    FScriptDelegate __OnFriendInviteReceived__Delegate;
    FScriptDelegate __OnReceivedGameInvite__Delegate;
    FScriptDelegate __OnJoinFriendGameComplete__Delegate;
    FScriptDelegate __OnFriendMessageReceived__Delegate;
    FScriptDelegate __OnRegisterHostStatGuidComplete__Delegate;
    FScriptDelegate __OnUnlockAchievementComplete__Delegate;
    FScriptDelegate __OnReadAchievementsComplete__Delegate;
    //## END PROPS OnlineSubsystemGameSpy

    virtual UBOOL Init();
    virtual UBOOL ShowLoginUI(UBOOL bShowOnlineOnly=FALSE);
    virtual UBOOL Login(BYTE LocalUserNum,const FString& LoginName,const FString& Password,UBOOL bWantsLocalOnly=FALSE);
    virtual UBOOL AutoLogin();
    virtual UBOOL Logout(BYTE LocalUserNum);
    virtual BYTE GetLoginStatus(BYTE LocalUserNum);
    virtual BYTE CanPlayOnline(BYTE LocalUserNum);
    virtual BYTE CanCommunicate(BYTE LocalUserNum);
    virtual UBOOL IsFriend(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL AreAnyFriends(BYTE LocalUserNum,TArray<struct FFriendsQuery>& Query);
    virtual UBOOL ReadProfileSettings(BYTE LocalUserNum,class UOnlineProfileSettings* ProfileSettings);
    virtual UBOOL WriteProfileSettings(BYTE LocalUserNum,class UOnlineProfileSettings* ProfileSettings);
    virtual UBOOL ReadFriendsList(BYTE LocalUserNum,INT Count=0,INT StartingAt=0);
    virtual BYTE GetFriendsList(BYTE LocalUserNum,TArray<struct FOnlineFriend>& Friends,INT Count=0,INT StartingAt=0);
    virtual UBOOL RegisterLocalTalker(BYTE LocalUserNum);
    virtual UBOOL UnregisterLocalTalker(BYTE LocalUserNum);
    virtual UBOOL RegisterRemoteTalker(struct FUniqueNetId PlayerID);
    virtual UBOOL UnregisterRemoteTalker(struct FUniqueNetId PlayerID);
    virtual UBOOL IsLocalPlayerTalking(BYTE LocalUserNum);
    virtual UBOOL IsRemotePlayerTalking(struct FUniqueNetId PlayerID);
    virtual UBOOL IsHeadsetPresent(BYTE LocalUserNum);
    virtual UBOOL SetRemoteTalkerPriority(BYTE LocalUserNum,struct FUniqueNetId PlayerID,INT Priority);
    virtual UBOOL MuteRemoteTalker(BYTE LocalUserNum,struct FUniqueNetId PlayerID,UBOOL bIsSystemWide=FALSE);
    virtual UBOOL UnmuteRemoteTalker(BYTE LocalUserNum,struct FUniqueNetId PlayerID,UBOOL bIsSystemWide=FALSE);
    virtual void StartNetworkedVoice(BYTE LocalUserNum);
    virtual void StopNetworkedVoice(BYTE LocalUserNum);
    virtual UBOOL StartSpeechRecognition(BYTE LocalUserNum);
    virtual UBOOL StopSpeechRecognition(BYTE LocalUserNum);
    virtual UBOOL GetRecognitionResults(BYTE LocalUserNum,TArray<FSpeechRecognizedWord>& Words);
    virtual UBOOL SelectVocabulary(BYTE LocalUserNum,INT VocabularyId);
    virtual UBOOL SetSpeechRecognitionObject(BYTE LocalUserNum,class USpeechRecognition* SpeechRecogObj);
    virtual UBOOL ReadOnlineStats(const TArray<struct FUniqueNetId>& Players,class UOnlineStatsRead* StatsRead);
    virtual UBOOL ReadOnlineStatsForFriends(BYTE LocalUserNum,class UOnlineStatsRead* StatsRead);
    virtual UBOOL ReadOnlineStatsByRank(class UOnlineStatsRead* StatsRead,INT StartIndex=1,INT NumToRead=100);
    virtual UBOOL ReadOnlineStatsByRankAroundPlayer(BYTE LocalUserNum,class UOnlineStatsRead* StatsRead,INT NumRows=10);
    virtual void FreeStats(class UOnlineStatsRead* StatsRead);
    virtual UBOOL WriteOnlineStats(FName SessionName,struct FUniqueNetId Player,class UOnlineStatsWrite* StatsWrite);
    virtual UBOOL FlushOnlineStats(FName SessionName);
    virtual UBOOL WriteOnlinePlayerScores(FName SessionName,INT LeaderboardId,const TArray<struct FOnlinePlayerScore>& PlayerScores);
    virtual UBOOL HasLinkConnection();
    virtual UBOOL IsControllerConnected(INT ControllerId);
    virtual BYTE GetNATType();
    virtual UBOOL ReadTitleFile(const FString& FileToRead);
    virtual UBOOL GetTitleFileContents(const FString& Filename,TArray<BYTE>& FileContents);
    virtual UBOOL CreateOnlineAccount(const FString& UserName,const FString& Password,const FString& EmailAddress,const FString& ProductKey=TEXT(""));
    virtual void SetOnlineStatus(BYTE LocalUserNum,INT StatusId,const TArray<struct FLocalizedStringSetting>& LocalizedStringSettings,const TArray<struct FSettingsProperty>& Properties);
    virtual UBOOL ShowKeyboardUI(BYTE LocalUserNum,const FString& TitleText,const FString& DescriptionText,UBOOL bIsPassword=FALSE,UBOOL bShouldValidate=TRUE,const FString& DefaultText=TEXT(""),INT MaxResultLength=256);
    virtual UBOOL AddFriend(BYTE LocalUserNum,struct FUniqueNetId NewFriend,const FString& Message=TEXT(""));
    virtual UBOOL AddFriendByName(BYTE LocalUserNum,const FString& FriendName,const FString& Message=TEXT(""));
    virtual UBOOL RemoveFriend(BYTE LocalUserNum,struct FUniqueNetId FormerFriend);
    virtual UBOOL AcceptFriendInvite(BYTE LocalUserNum,struct FUniqueNetId RequestingPlayer);
    virtual UBOOL DenyFriendInvite(BYTE LocalUserNum,struct FUniqueNetId RequestingPlayer);
    virtual UBOOL SendMessageToFriend(BYTE LocalUserNum,struct FUniqueNetId Friend,const FString& Message);
    virtual UBOOL SendGameInviteToFriend(BYTE LocalUserNum,struct FUniqueNetId Friend,const FString& Text=TEXT(""));
    virtual UBOOL SendGameInviteToFriends(BYTE LocalUserNum,const TArray<struct FUniqueNetId>& Friends,const FString& Text=TEXT(""));
    virtual UBOOL JoinFriendGame(BYTE LocalUserNum,struct FUniqueNetId Friend);
    virtual FString GetHostStatGuid();
    virtual UBOOL RegisterHostStatGuid(const FString& HostStatGuid);
    virtual FString GetClientStatGuid();
    virtual UBOOL RegisterStatGuid(struct FUniqueNetId PlayerID,const FString& ClientStatGuid);
    virtual UBOOL UnlockAchievement(BYTE LocalUserNum,INT AchievementId,FLOAT PercentComplete=100.000000);
    virtual UBOOL ReadAchievements(BYTE LocalUserNum,INT TitleId=0,UBOOL bShouldReadText=TRUE,UBOOL bShouldReadImages=FALSE);
    virtual BYTE GetAchievements(BYTE LocalUserNum,TArray<struct FAchievementDetails>& Achievements,INT TitleId=0);
    DECLARE_FUNCTION(execShowLoginUI)
    {
        P_GET_UBOOL_OPTX(bShowOnlineOnly,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->ShowLoginUI(bShowOnlineOnly);
    }
    DECLARE_FUNCTION(execLogin)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(LoginName);
        P_GET_STR(Password);
        P_GET_UBOOL_OPTX(bWantsLocalOnly,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->Login(LocalUserNum,LoginName,Password,bWantsLocalOnly);
    }
    DECLARE_FUNCTION(execAutoLogin)
    {
        P_FINISH;
        *(UBOOL*)Result=this->AutoLogin();
    }
    DECLARE_FUNCTION(execLogout)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->Logout(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetLoginStatus)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->GetLoginStatus(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanPlayOnline)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->CanPlayOnline(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanCommunicate)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->CanCommunicate(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->IsFriend(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execAreAnyFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FFriendsQuery,Query);
        P_FINISH;
        *(UBOOL*)Result=this->AreAnyFriends(LocalUserNum,Query);
    }
    DECLARE_FUNCTION(execReadProfileSettings)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineProfileSettings,ProfileSettings);
        P_FINISH;
        *(UBOOL*)Result=this->ReadProfileSettings(LocalUserNum,ProfileSettings);
    }
    DECLARE_FUNCTION(execWriteProfileSettings)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineProfileSettings,ProfileSettings);
        P_FINISH;
        *(UBOOL*)Result=this->WriteProfileSettings(LocalUserNum,ProfileSettings);
    }
    DECLARE_FUNCTION(execReadFriendsList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(Count,0);
        P_GET_INT_OPTX(StartingAt,0);
        P_FINISH;
        *(UBOOL*)Result=this->ReadFriendsList(LocalUserNum,Count,StartingAt);
    }
    DECLARE_FUNCTION(execGetFriendsList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FOnlineFriend,Friends);
        P_GET_INT_OPTX(Count,0);
        P_GET_INT_OPTX(StartingAt,0);
        P_FINISH;
        *(BYTE*)Result=this->GetFriendsList(LocalUserNum,Friends,Count,StartingAt);
    }
    DECLARE_FUNCTION(execRegisterLocalTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterLocalTalker(LocalUserNum);
    }
    DECLARE_FUNCTION(execUnregisterLocalTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->UnregisterLocalTalker(LocalUserNum);
    }
    DECLARE_FUNCTION(execRegisterRemoteTalker)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterRemoteTalker(PlayerID);
    }
    DECLARE_FUNCTION(execUnregisterRemoteTalker)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->UnregisterRemoteTalker(PlayerID);
    }
    DECLARE_FUNCTION(execIsLocalPlayerTalking)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->IsLocalPlayerTalking(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsRemotePlayerTalking)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->IsRemotePlayerTalking(PlayerID);
    }
    DECLARE_FUNCTION(execIsHeadsetPresent)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->IsHeadsetPresent(LocalUserNum);
    }
    DECLARE_FUNCTION(execSetRemoteTalkerPriority)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_INT(Priority);
        P_FINISH;
        *(UBOOL*)Result=this->SetRemoteTalkerPriority(LocalUserNum,PlayerID,Priority);
    }
    DECLARE_FUNCTION(execMuteRemoteTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_UBOOL_OPTX(bIsSystemWide,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->MuteRemoteTalker(LocalUserNum,PlayerID,bIsSystemWide);
    }
    DECLARE_FUNCTION(execUnmuteRemoteTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_UBOOL_OPTX(bIsSystemWide,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->UnmuteRemoteTalker(LocalUserNum,PlayerID,bIsSystemWide);
    }
    DECLARE_FUNCTION(execStartNetworkedVoice)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        this->StartNetworkedVoice(LocalUserNum);
    }
    DECLARE_FUNCTION(execStopNetworkedVoice)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        this->StopNetworkedVoice(LocalUserNum);
    }
    DECLARE_FUNCTION(execStartSpeechRecognition)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->StartSpeechRecognition(LocalUserNum);
    }
    DECLARE_FUNCTION(execStopSpeechRecognition)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->StopSpeechRecognition(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetRecognitionResults)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(FSpeechRecognizedWord,Words);
        P_FINISH;
        *(UBOOL*)Result=this->GetRecognitionResults(LocalUserNum,Words);
    }
    DECLARE_FUNCTION(execSelectVocabulary)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(VocabularyId);
        P_FINISH;
        *(UBOOL*)Result=this->SelectVocabulary(LocalUserNum,VocabularyId);
    }
    DECLARE_FUNCTION(execSetSpeechRecognitionObject)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(USpeechRecognition,SpeechRecogObj);
        P_FINISH;
        *(UBOOL*)Result=this->SetSpeechRecognitionObject(LocalUserNum,SpeechRecogObj);
    }
    DECLARE_FUNCTION(execReadOnlineStats)
    {
        P_GET_TARRAY_REF(struct FUniqueNetId,Players);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStats(Players,StatsRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsForFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStatsForFriends(LocalUserNum,StatsRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsByRank)
    {
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_GET_INT_OPTX(StartIndex,1);
        P_GET_INT_OPTX(NumToRead,100);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStatsByRank(StatsRead,StartIndex,NumToRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsByRankAroundPlayer)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_GET_INT_OPTX(NumRows,10);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStatsByRankAroundPlayer(LocalUserNum,StatsRead,NumRows);
    }
    DECLARE_FUNCTION(execFreeStats)
    {
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        this->FreeStats(StatsRead);
    }
    DECLARE_FUNCTION(execWriteOnlineStats)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,Player);
        P_GET_OBJECT(UOnlineStatsWrite,StatsWrite);
        P_FINISH;
        *(UBOOL*)Result=this->WriteOnlineStats(SessionName,Player,StatsWrite);
    }
    DECLARE_FUNCTION(execFlushOnlineStats)
    {
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=this->FlushOnlineStats(SessionName);
    }
    DECLARE_FUNCTION(execWriteOnlinePlayerScores)
    {
        P_GET_NAME(SessionName);
        P_GET_INT(LeaderboardId);
        P_GET_TARRAY_REF(struct FOnlinePlayerScore,PlayerScores);
        P_FINISH;
        *(UBOOL*)Result=this->WriteOnlinePlayerScores(SessionName,LeaderboardId,PlayerScores);
    }
    DECLARE_FUNCTION(execHasLinkConnection)
    {
        P_FINISH;
        *(UBOOL*)Result=this->HasLinkConnection();
    }
    DECLARE_FUNCTION(execIsControllerConnected)
    {
        P_GET_INT(ControllerId);
        P_FINISH;
        *(UBOOL*)Result=this->IsControllerConnected(ControllerId);
    }
    DECLARE_FUNCTION(execGetNATType)
    {
        P_FINISH;
        *(BYTE*)Result=this->GetNATType();
    }
    DECLARE_FUNCTION(execReadTitleFile)
    {
        P_GET_STR(FileToRead);
        P_FINISH;
        *(UBOOL*)Result=this->ReadTitleFile(FileToRead);
    }
    DECLARE_FUNCTION(execGetTitleFileContents)
    {
        P_GET_STR(Filename);
        P_GET_TARRAY_REF(BYTE,FileContents);
        P_FINISH;
        *(UBOOL*)Result=this->GetTitleFileContents(Filename,FileContents);
    }
    DECLARE_FUNCTION(execCreateOnlineAccount)
    {
        P_GET_STR(UserName);
        P_GET_STR(Password);
        P_GET_STR(EmailAddress);
        P_GET_STR_OPTX(ProductKey,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->CreateOnlineAccount(UserName,Password,EmailAddress,ProductKey);
    }
    DECLARE_FUNCTION(execSetOnlineStatus)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(StatusId);
        P_GET_TARRAY_REF(struct FLocalizedStringSetting,LocalizedStringSettings);
        P_GET_TARRAY_REF(struct FSettingsProperty,Properties);
        P_FINISH;
        this->SetOnlineStatus(LocalUserNum,StatusId,LocalizedStringSettings,Properties);
    }
    DECLARE_FUNCTION(execShowKeyboardUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(TitleText);
        P_GET_STR(DescriptionText);
        P_GET_UBOOL_OPTX(bIsPassword,FALSE);
        P_GET_UBOOL_OPTX(bShouldValidate,TRUE);
        P_GET_STR_OPTX(DefaultText,TEXT(""));
        P_GET_INT_OPTX(MaxResultLength,256);
        P_FINISH;
        *(UBOOL*)Result=this->ShowKeyboardUI(LocalUserNum,TitleText,DescriptionText,bIsPassword,bShouldValidate,DefaultText,MaxResultLength);
    }
    DECLARE_FUNCTION(execAddFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,NewFriend);
        P_GET_STR_OPTX(Message,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->AddFriend(LocalUserNum,NewFriend,Message);
    }
    DECLARE_FUNCTION(execAddFriendByName)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(FriendName);
        P_GET_STR_OPTX(Message,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->AddFriendByName(LocalUserNum,FriendName,Message);
    }
    DECLARE_FUNCTION(execRemoveFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,FormerFriend);
        P_FINISH;
        *(UBOOL*)Result=this->RemoveFriend(LocalUserNum,FormerFriend);
    }
    DECLARE_FUNCTION(execAcceptFriendInvite)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,RequestingPlayer);
        P_FINISH;
        *(UBOOL*)Result=this->AcceptFriendInvite(LocalUserNum,RequestingPlayer);
    }
    DECLARE_FUNCTION(execDenyFriendInvite)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,RequestingPlayer);
        P_FINISH;
        *(UBOOL*)Result=this->DenyFriendInvite(LocalUserNum,RequestingPlayer);
    }
    DECLARE_FUNCTION(execSendMessageToFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_GET_STR(Message);
        P_FINISH;
        *(UBOOL*)Result=this->SendMessageToFriend(LocalUserNum,Friend,Message);
    }
    DECLARE_FUNCTION(execSendGameInviteToFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_GET_STR_OPTX(Text,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->SendGameInviteToFriend(LocalUserNum,Friend,Text);
    }
    DECLARE_FUNCTION(execSendGameInviteToFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY(struct FUniqueNetId,Friends);
        P_GET_STR_OPTX(Text,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->SendGameInviteToFriends(LocalUserNum,Friends,Text);
    }
    DECLARE_FUNCTION(execJoinFriendGame)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_FINISH;
        *(UBOOL*)Result=this->JoinFriendGame(LocalUserNum,Friend);
    }
    DECLARE_FUNCTION(execGetHostStatGuid)
    {
        P_FINISH;
        *(FString*)Result=this->GetHostStatGuid();
    }
    DECLARE_FUNCTION(execRegisterHostStatGuid)
    {
        P_GET_STR_REF(HostStatGuid);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterHostStatGuid(HostStatGuid);
    }
    DECLARE_FUNCTION(execGetClientStatGuid)
    {
        P_FINISH;
        *(FString*)Result=this->GetClientStatGuid();
    }
    DECLARE_FUNCTION(execRegisterStatGuid)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_STR_REF(ClientStatGuid);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterStatGuid(PlayerID,ClientStatGuid);
    }
    DECLARE_FUNCTION(execUnlockAchievement)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(AchievementId);
        P_GET_FLOAT_OPTX(PercentComplete,100.000000);
        P_FINISH;
        *(UBOOL*)Result=this->UnlockAchievement(LocalUserNum,AchievementId,PercentComplete);
    }
    DECLARE_FUNCTION(execReadAchievements)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(TitleId,0);
        P_GET_UBOOL_OPTX(bShouldReadText,TRUE);
        P_GET_UBOOL_OPTX(bShouldReadImages,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->ReadAchievements(LocalUserNum,TitleId,bShouldReadText,bShouldReadImages);
    }
    DECLARE_FUNCTION(execGetAchievements)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FAchievementDetails,Achievements);
        P_GET_INT_OPTX(TitleId,0);
        P_FINISH;
        *(BYTE*)Result=this->GetAchievements(LocalUserNum,Achievements,TitleId);
    }
    void delegateOnReadAchievementsComplete(INT TitleId)
    {
        OnlineSubsystemGameSpy_eventOnReadAchievementsComplete_Parms Parms(EC_EventParm);
        Parms.TitleId=TitleId;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnReadAchievementsComplete,&__OnReadAchievementsComplete__Delegate,&Parms);
    }
    void delegateOnUnlockAchievementComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnUnlockAchievementComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnUnlockAchievementComplete,&__OnUnlockAchievementComplete__Delegate,&Parms);
    }
    void delegateOnRegisterHostStatGuidComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnRegisterHostStatGuidComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnRegisterHostStatGuidComplete,&__OnRegisterHostStatGuidComplete__Delegate,&Parms);
    }
    void delegateOnFriendMessageReceived(BYTE LocalUserNum,struct FUniqueNetId SendingPlayer,const FString& SendingNick,const FString& Message)
    {
        OnlineSubsystemGameSpy_eventOnFriendMessageReceived_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.SendingPlayer=SendingPlayer;
        Parms.SendingNick=SendingNick;
        Parms.Message=Message;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnFriendMessageReceived,&__OnFriendMessageReceived__Delegate,&Parms);
    }
    void delegateOnJoinFriendGameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnJoinFriendGameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnJoinFriendGameComplete,&__OnJoinFriendGameComplete__Delegate,&Parms);
    }
    void delegateOnReceivedGameInvite(BYTE LocalUserNum,const FString& InviterName)
    {
        OnlineSubsystemGameSpy_eventOnReceivedGameInvite_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.InviterName=InviterName;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnReceivedGameInvite,&__OnReceivedGameInvite__Delegate,&Parms);
    }
    void delegateOnFriendInviteReceived(BYTE LocalUserNum,struct FUniqueNetId RequestingPlayer,const FString& RequestingNick,const FString& Message)
    {
        OnlineSubsystemGameSpy_eventOnFriendInviteReceived_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.RequestingPlayer=RequestingPlayer;
        Parms.RequestingNick=RequestingNick;
        Parms.Message=Message;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnFriendInviteReceived,&__OnFriendInviteReceived__Delegate,&Parms);
    }
    void delegateOnAddFriendByNameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnAddFriendByNameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnAddFriendByNameComplete,&__OnAddFriendByNameComplete__Delegate,&Parms);
    }
    void delegateOnKeyboardInputComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnKeyboardInputComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnKeyboardInputComplete,&__OnKeyboardInputComplete__Delegate,&Parms);
    }
    void delegateOnCreateOnlineAccountCompleted(BYTE ErrorStatus)
    {
        OnlineSubsystemGameSpy_eventOnCreateOnlineAccountCompleted_Parms Parms(EC_EventParm);
        Parms.ErrorStatus=ErrorStatus;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnCreateOnlineAccountCompleted,&__OnCreateOnlineAccountCompleted__Delegate,&Parms);
    }
    void delegateOnReadTitleFileComplete(UBOOL bWasSuccessful,const FString& Filename)
    {
        OnlineSubsystemGameSpy_eventOnReadTitleFileComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.Filename=Filename;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnReadTitleFileComplete,&__OnReadTitleFileComplete__Delegate,&Parms);
    }
    void delegateOnStorageDeviceChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnStorageDeviceChange,&__OnStorageDeviceChange__Delegate,NULL);
    }
    void delegateOnConnectionStatusChange(BYTE ConnectionStatus)
    {
        OnlineSubsystemGameSpy_eventOnConnectionStatusChange_Parms Parms(EC_EventParm);
        Parms.ConnectionStatus=ConnectionStatus;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnConnectionStatusChange,&__OnConnectionStatusChange__Delegate,&Parms);
    }
    void delegateOnControllerChange(INT ControllerId,UBOOL bIsConnected)
    {
        OnlineSubsystemGameSpy_eventOnControllerChange_Parms Parms(EC_EventParm);
        Parms.ControllerId=ControllerId;
        Parms.bIsConnected=bIsConnected ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnControllerChange,&__OnControllerChange__Delegate,&Parms);
    }
    void delegateOnExternalUIChange(UBOOL bIsOpening)
    {
        OnlineSubsystemGameSpy_eventOnExternalUIChange_Parms Parms(EC_EventParm);
        Parms.bIsOpening=bIsOpening ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnExternalUIChange,&__OnExternalUIChange__Delegate,&Parms);
    }
    void delegateOnLinkStatusChange(UBOOL bIsConnected)
    {
        OnlineSubsystemGameSpy_eventOnLinkStatusChange_Parms Parms(EC_EventParm);
        Parms.bIsConnected=bIsConnected ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnLinkStatusChange,&__OnLinkStatusChange__Delegate,&Parms);
    }
    void delegateOnFlushOnlineStatsComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnFlushOnlineStatsComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnFlushOnlineStatsComplete,&__OnFlushOnlineStatsComplete__Delegate,&Parms);
    }
    void delegateOnReadOnlineStatsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnReadOnlineStatsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnReadOnlineStatsComplete,&__OnReadOnlineStatsComplete__Delegate,&Parms);
    }
    void delegateOnRecognitionComplete()
    {
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnRecognitionComplete,&__OnRecognitionComplete__Delegate,NULL);
    }
    void delegateOnPlayerTalkingStateChange(struct FUniqueNetId Player,UBOOL bIsTalking)
    {
        OnlineSubsystemGameSpy_eventOnPlayerTalkingStateChange_Parms Parms(EC_EventParm);
        Parms.Player=Player;
        Parms.bIsTalking=bIsTalking ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnPlayerTalkingStateChange,&__OnPlayerTalkingStateChange__Delegate,&Parms);
    }
    void delegateOnReadFriendsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnReadFriendsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnReadFriendsComplete,&__OnReadFriendsComplete__Delegate,&Parms);
    }
    void delegateOnWritePlayerStorageComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnWritePlayerStorageComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnWritePlayerStorageComplete,&__OnWritePlayerStorageComplete__Delegate,&Parms);
    }
    void delegateOnReadPlayerStorageForNetIdComplete(struct FUniqueNetId NetId,UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnReadPlayerStorageForNetIdComplete_Parms Parms(EC_EventParm);
        Parms.NetId=NetId;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnReadPlayerStorageForNetIdComplete,&__OnReadPlayerStorageForNetIdComplete__Delegate,&Parms);
    }
    void delegateOnReadPlayerStorageComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnReadPlayerStorageComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnReadPlayerStorageComplete,&__OnReadPlayerStorageComplete__Delegate,&Parms);
    }
    void delegateOnWriteProfileSettingsComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnWriteProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnWriteProfileSettingsComplete,&__OnWriteProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnReadProfileSettingsComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnReadProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnReadProfileSettingsComplete,&__OnReadProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnLoginStatusChange(BYTE NewStatus,struct FUniqueNetId NewId)
    {
        OnlineSubsystemGameSpy_eventOnLoginStatusChange_Parms Parms(EC_EventParm);
        Parms.NewStatus=NewStatus;
        Parms.NewId=NewId;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnLoginStatusChange,&__OnLoginStatusChange__Delegate,&Parms);
    }
    void delegateOnLogoutCompleted(UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnLogoutCompleted_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnLogoutCompleted,&__OnLogoutCompleted__Delegate,&Parms);
    }
    void delegateOnLoginFailed(BYTE LocalUserNum,BYTE ErrorCode)
    {
        OnlineSubsystemGameSpy_eventOnLoginFailed_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.ErrorCode=ErrorCode;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnLoginFailed,&__OnLoginFailed__Delegate,&Parms);
    }
    void delegateOnFriendsChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnFriendsChange,&__OnFriendsChange__Delegate,NULL);
    }
    void delegateOnMutingChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnMutingChange,&__OnMutingChange__Delegate,NULL);
    }
    void delegateOnLoginCancelled()
    {
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnLoginCancelled,&__OnLoginCancelled__Delegate,NULL);
    }
    void delegateOnLoginChange(BYTE LocalUserNum)
    {
        OnlineSubsystemGameSpy_eventOnLoginChange_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnLoginChange,&__OnLoginChange__Delegate,&Parms);
    }
    DECLARE_CLASS(UOnlineSubsystemGameSpy,UOnlineSubsystemCommonImpl,0|CLASS_Config,OnlineSubsystemGameSpy)
    #include "UOnlineSubsystemGameSpy.h"
};

#undef DECLARE_CLASS
#undef DECLARE_CASTED_CLASS
#undef DECLARE_ABSTRACT_CLASS
#undef DECLARE_ABSTRACT_CASTED_CLASS
#endif // !INCLUDED_ONLINESUBSYSTEMGAMESPY_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UOnlineGameInterfaceGameSpy,-1,execQueryNonAdvertisedData);
AUTOGENERATE_FUNCTION(UOnlineGameInterfaceGameSpy,-1,execUnregisterPlayer);
AUTOGENERATE_FUNCTION(UOnlineGameInterfaceGameSpy,-1,execRegisterPlayer);
AUTOGENERATE_FUNCTION(UOnlineGameInterfaceGameSpy,-1,execAcceptGameInvite);
AUTOGENERATE_FUNCTION(UOnlineGameInterfaceGameSpy,-1,execUpdateOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execGetAchievements);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execReadAchievements);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execUnlockAchievement);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execRegisterStatGuid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execGetClientStatGuid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execRegisterHostStatGuid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execGetHostStatGuid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execJoinFriendGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execSendGameInviteToFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execSendGameInviteToFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execSendMessageToFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execDenyFriendInvite);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execAcceptFriendInvite);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execRemoveFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execAddFriendByName);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execAddFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execShowKeyboardUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execSetOnlineStatus);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execCreateOnlineAccount);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execGetTitleFileContents);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execReadTitleFile);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execGetNATType);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execIsControllerConnected);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execHasLinkConnection);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execWriteOnlinePlayerScores);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execFlushOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execWriteOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execFreeStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execReadOnlineStatsByRankAroundPlayer);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execReadOnlineStatsByRank);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execReadOnlineStatsForFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execReadOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execSetSpeechRecognitionObject);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execSelectVocabulary);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execGetRecognitionResults);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execStopSpeechRecognition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execStartSpeechRecognition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execStopNetworkedVoice);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execStartNetworkedVoice);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execUnmuteRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execMuteRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execSetRemoteTalkerPriority);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execIsHeadsetPresent);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execIsRemotePlayerTalking);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execIsLocalPlayerTalking);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execUnregisterRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execRegisterRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execUnregisterLocalTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execRegisterLocalTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execGetFriendsList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execReadFriendsList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execWriteProfileSettings);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execReadProfileSettings);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execAreAnyFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execIsFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execCanCommunicate);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execCanPlayOnline);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execGetLoginStatus);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execLogout);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execAutoLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execShowLoginUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execInit);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef ONLINESUBSYSTEMGAMESPY_NATIVE_DEFS
#define ONLINESUBSYSTEMGAMESPY_NATIVE_DEFS

#define AUTO_INITIALIZE_REGISTRANTS_ONLINESUBSYSTEMGAMESPY \
	UOnlineGameInterfaceGameSpy::StaticClass(); \
	GNativeLookupFuncs.Set(FName("OnlineGameInterfaceGameSpy"), GOnlineSubsystemGameSpyUOnlineGameInterfaceGameSpyNatives); \
	UOnlineSubsystemGameSpy::StaticClass(); \
	GNativeLookupFuncs.Set(FName("OnlineSubsystemGameSpy"), GOnlineSubsystemGameSpyUOnlineSubsystemGameSpyNatives); \

#endif // ONLINESUBSYSTEMGAMESPY_NATIVE_DEFS

#ifdef NATIVES_ONLY
FNativeFunctionLookup GOnlineSubsystemGameSpyUOnlineGameInterfaceGameSpyNatives[] = 
{ 
	MAP_NATIVE(UOnlineGameInterfaceGameSpy, execQueryNonAdvertisedData)
	MAP_NATIVE(UOnlineGameInterfaceGameSpy, execUnregisterPlayer)
	MAP_NATIVE(UOnlineGameInterfaceGameSpy, execRegisterPlayer)
	MAP_NATIVE(UOnlineGameInterfaceGameSpy, execAcceptGameInvite)
	MAP_NATIVE(UOnlineGameInterfaceGameSpy, execUpdateOnlineGame)
	{NULL, NULL}
};

FNativeFunctionLookup GOnlineSubsystemGameSpyUOnlineSubsystemGameSpyNatives[] = 
{ 
	MAP_NATIVE(UOnlineSubsystemGameSpy, execGetAchievements)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execReadAchievements)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execUnlockAchievement)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execRegisterStatGuid)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execGetClientStatGuid)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execRegisterHostStatGuid)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execGetHostStatGuid)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execJoinFriendGame)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execSendGameInviteToFriends)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execSendGameInviteToFriend)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execSendMessageToFriend)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execDenyFriendInvite)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execAcceptFriendInvite)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execRemoveFriend)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execAddFriendByName)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execAddFriend)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execShowKeyboardUI)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execSetOnlineStatus)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execCreateOnlineAccount)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execGetTitleFileContents)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execReadTitleFile)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execGetNATType)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execIsControllerConnected)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execHasLinkConnection)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execWriteOnlinePlayerScores)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execFlushOnlineStats)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execWriteOnlineStats)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execFreeStats)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execReadOnlineStatsByRankAroundPlayer)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execReadOnlineStatsByRank)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execReadOnlineStatsForFriends)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execReadOnlineStats)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execSetSpeechRecognitionObject)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execSelectVocabulary)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execGetRecognitionResults)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execStopSpeechRecognition)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execStartSpeechRecognition)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execStopNetworkedVoice)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execStartNetworkedVoice)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execUnmuteRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execMuteRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execSetRemoteTalkerPriority)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execIsHeadsetPresent)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execIsRemotePlayerTalking)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execIsLocalPlayerTalking)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execUnregisterRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execRegisterRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execUnregisterLocalTalker)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execRegisterLocalTalker)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execGetFriendsList)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execReadFriendsList)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execWriteProfileSettings)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execReadProfileSettings)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execAreAnyFriends)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execIsFriend)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execCanCommunicate)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execCanPlayOnline)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execGetLoginStatus)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execLogout)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execAutoLogin)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execLogin)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execShowLoginUI)
	MAP_NATIVE(UOnlineSubsystemGameSpy, execInit)
	{NULL, NULL}
};

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(UOnlineGameInterfaceGameSpy,OnlineGameInterfaceGameSpy,QR2Handle)
VERIFY_CLASS_OFFSET_NODIE(UOnlineGameInterfaceGameSpy,OnlineGameInterfaceGameSpy,__OnUnregisterPlayerComplete__Delegate)
VERIFY_CLASS_SIZE_NODIE(UOnlineGameInterfaceGameSpy)
VERIFY_CLASS_OFFSET_NODIE(UOnlineSubsystemGameSpy,OnlineSubsystemGameSpy,CachedGameInt)
VERIFY_CLASS_OFFSET_NODIE(UOnlineSubsystemGameSpy,OnlineSubsystemGameSpy,__OnReadAchievementsComplete__Delegate)
VERIFY_CLASS_SIZE_NODIE(UOnlineSubsystemGameSpy)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
