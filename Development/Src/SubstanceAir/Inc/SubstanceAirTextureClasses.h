/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#include "SubstanceAirNames.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_SUBSTANCEAIR_TEXTURE_ENUMS
#define INCLUDED_SUBSTANCEAIR_TEXTURE_ENUMS 1

enum SubstanceAirInputType
{
    SIT_Float               =0,
    SIT_Float2              =1,
    SIT_Float3              =2,
    SIT_Float4              =3,
    SIT_Integer             =4,
    SIT_Image               =5,
    SIT_Unused_6            =6,
    SIT_Unused_7            =7,
    SIT_Integer2            =8,
    SIT_Integer3            =9,
    SIT_Integer4            =10,
    SIT_MAX                 =11,
};
#define FOREACH_ENUM_SUBSTANCEAIRINPUTTYPE(op) \
    op(SIT_Float) \
    op(SIT_Float2) \
    op(SIT_Float3) \
    op(SIT_Float4) \
    op(SIT_Integer) \
    op(SIT_Image) \
    op(SIT_Unused_6) \
    op(SIT_Unused_7) \
    op(SIT_Integer2) \
    op(SIT_Integer3) \
    op(SIT_Integer4) 

#endif // !INCLUDED_SUBSTANCEAIR_TEXTURE_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_SUBSTANCEAIR_TEXTURE_CLASSES
#define INCLUDED_SUBSTANCEAIR_TEXTURE_CLASSES 1
#define ENABLE_DECLARECLASS_MACRO 1
#include "UnObjBas.h"
#undef ENABLE_DECLARECLASS_MACRO

class USubstanceAirGraphInstance : public UObject
{
public:
    //## BEGIN PROPS SubstanceAirGraphInstance
    struct SubstanceAir::FGraphInstance* Instance;
    class USubstanceAirInstanceFactory* Parent;
    //## END PROPS SubstanceAirGraphInstance

    TArray<FString> GetInputNames();
    BYTE GetInputType(const FString& InputName);
    UBOOL SetInputInt(const FString& InputName,const TArray<INT>& Value);
    UBOOL SetInputFloat(const FString& InputName,const TArray<FLOAT>& Value);
    UBOOL SetInputImg(const FString& InputName,class UObject* Value);
    TArray<INT> GetInputInt(const FString& InputName);
    TArray<FLOAT> GetInputFloat(const FString& InputName);
    class UObject* GetInputImg(const FString& InputName);
    DECLARE_FUNCTION(execGetInputNames)
    {
        P_FINISH;
        *(TArray<FString>*)Result=this->GetInputNames();
    }
    DECLARE_FUNCTION(execGetInputType)
    {
        P_GET_STR(InputName);
        P_FINISH;
        *(BYTE*)Result=this->GetInputType(InputName);
    }
    DECLARE_FUNCTION(execSetInputInt)
    {
        P_GET_STR(InputName);
        P_GET_TARRAY(INT,Value);
        P_FINISH;
        *(UBOOL*)Result=this->SetInputInt(InputName,Value);
    }
    DECLARE_FUNCTION(execSetInputFloat)
    {
        P_GET_STR(InputName);
        P_GET_TARRAY(FLOAT,Value);
        P_FINISH;
        *(UBOOL*)Result=this->SetInputFloat(InputName,Value);
    }
    DECLARE_FUNCTION(execSetInputImg)
    {
        P_GET_STR(InputName);
        P_GET_OBJECT(UObject,Value);
        P_FINISH;
        *(UBOOL*)Result=this->SetInputImg(InputName,Value);
    }
    DECLARE_FUNCTION(execGetInputInt)
    {
        P_GET_STR(InputName);
        P_FINISH;
        *(TArray<INT>*)Result=this->GetInputInt(InputName);
    }
    DECLARE_FUNCTION(execGetInputFloat)
    {
        P_GET_STR(InputName);
        P_FINISH;
        *(TArray<FLOAT>*)Result=this->GetInputFloat(InputName);
    }
    DECLARE_FUNCTION(execGetInputImg)
    {
        P_GET_STR(InputName);
        P_FINISH;
        *(class UObject**)Result=this->GetInputImg(InputName);
    }
    DECLARE_CLASS(USubstanceAirGraphInstance,UObject,0,SubstanceAir)
public:
	virtual void InitializeIntrinsicPropertyValues();
	virtual void Serialize(FArchive& Ar);
	virtual void BeginDestroy();
	virtual void PostLoad();
	virtual void PostDuplicate();
	virtual void PreEditUndo();
	virtual void PostEditUndo();
};

class USubstanceAirTexture2D : public UTexture2D
{
public:
    //## BEGIN PROPS SubstanceAirTexture2D
    struct SubstanceAir::FOutputInstance* OutputCopy;
    FGuid OutputGuid;
    class USubstanceAirGraphInstance* ParentInstance;
    //## END PROPS SubstanceAirTexture2D

    DECLARE_CLASS(USubstanceAirTexture2D,UTexture2D,0,SubstanceAir)
    static const TCHAR* StaticConfigName() {return TEXT("Engine");}

public:
	virtual void Serialize(FArchive& Ar);
	virtual void BeginDestroy();
	virtual void PostLoad();
	virtual void PostDuplicate();

	virtual UBOOL CanEditChange(const UProperty* InProperty) const;

	// UTexture interface.
	virtual FTextureResource* CreateResource();
	UBOOL HasSourceArt() const;
	FString GetDesc();
	void StripData(UE3::EPlatformType TargetPlatform, UBOOL bStripLargeEditorData);

	// Init function which can be called from outside the main thread
	void LighterInit(UINT InSizeX,UINT InSizeY,EPixelFormat InFormat);   
};

#undef DECLARE_CLASS
#undef DECLARE_CASTED_CLASS
#undef DECLARE_ABSTRACT_CLASS
#undef DECLARE_ABSTRACT_CASTED_CLASS
#endif // !INCLUDED_SUBSTANCEAIR_TEXTURE_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(USubstanceAirGraphInstance,-1,execGetInputImg);
AUTOGENERATE_FUNCTION(USubstanceAirGraphInstance,-1,execGetInputFloat);
AUTOGENERATE_FUNCTION(USubstanceAirGraphInstance,-1,execGetInputInt);
AUTOGENERATE_FUNCTION(USubstanceAirGraphInstance,-1,execSetInputImg);
AUTOGENERATE_FUNCTION(USubstanceAirGraphInstance,-1,execSetInputFloat);
AUTOGENERATE_FUNCTION(USubstanceAirGraphInstance,-1,execSetInputInt);
AUTOGENERATE_FUNCTION(USubstanceAirGraphInstance,-1,execGetInputType);
AUTOGENERATE_FUNCTION(USubstanceAirGraphInstance,-1,execGetInputNames);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef SUBSTANCEAIR_TEXTURE_NATIVE_DEFS
#define SUBSTANCEAIR_TEXTURE_NATIVE_DEFS

#define AUTO_INITIALIZE_REGISTRANTS_SUBSTANCEAIR_TEXTURE \
	USubstanceAirGraphInstance::StaticClass(); \
	GNativeLookupFuncs.Set(FName("SubstanceAirGraphInstance"), GSubstanceAirUSubstanceAirGraphInstanceNatives); \
	USubstanceAirTexture2D::StaticClass(); \

#endif // SUBSTANCEAIR_TEXTURE_NATIVE_DEFS

#ifdef NATIVES_ONLY
FNativeFunctionLookup GSubstanceAirUSubstanceAirGraphInstanceNatives[] = 
{ 
	MAP_NATIVE(USubstanceAirGraphInstance, execGetInputImg)
	MAP_NATIVE(USubstanceAirGraphInstance, execGetInputFloat)
	MAP_NATIVE(USubstanceAirGraphInstance, execGetInputInt)
	MAP_NATIVE(USubstanceAirGraphInstance, execSetInputImg)
	MAP_NATIVE(USubstanceAirGraphInstance, execSetInputFloat)
	MAP_NATIVE(USubstanceAirGraphInstance, execSetInputInt)
	MAP_NATIVE(USubstanceAirGraphInstance, execGetInputType)
	MAP_NATIVE(USubstanceAirGraphInstance, execGetInputNames)
	{NULL, NULL}
};

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(USubstanceAirGraphInstance,SubstanceAirGraphInstance,Instance)
VERIFY_CLASS_OFFSET_NODIE(USubstanceAirGraphInstance,SubstanceAirGraphInstance,Parent)
VERIFY_CLASS_SIZE_NODIE(USubstanceAirGraphInstance)
VERIFY_CLASS_OFFSET_NODIE(USubstanceAirTexture2D,SubstanceAirTexture2D,OutputCopy)
VERIFY_CLASS_OFFSET_NODIE(USubstanceAirTexture2D,SubstanceAirTexture2D,ParentInstance)
VERIFY_CLASS_SIZE_NODIE(USubstanceAirTexture2D)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
