/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#include "OnlineSubsystemSteamworksNames.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_ONLINESUBSYSTEMSTEAMWORKS_ENUMS
#define INCLUDED_ONLINESUBSYSTEMSTEAMWORKS_ENUMS 1

enum ESteamMatchmakingType
{
    SMT_Invalid             =0,
    SMT_LAN                 =1,
    SMT_Internet            =2,
    SMT_MAX                 =3,
};
#define FOREACH_ENUM_ESTEAMMATCHMAKINGTYPE(op) \
    op(SMT_Invalid) \
    op(SMT_LAN) \
    op(SMT_Internet) 
enum ELeaderboardUpdateType
{
    LUT_KeepBest            =0,
    LUT_Force               =1,
    LUT_MAX                 =2,
};
#define FOREACH_ENUM_ELEADERBOARDUPDATETYPE(op) \
    op(LUT_KeepBest) \
    op(LUT_Force) 
enum ELeaderboardFormat
{
    LF_Number               =0,
    LF_Seconds              =1,
    LF_Milliseconds         =2,
    LF_MAX                  =3,
};
#define FOREACH_ENUM_ELEADERBOARDFORMAT(op) \
    op(LF_Number) \
    op(LF_Seconds) \
    op(LF_Milliseconds) 
enum ELeaderboardSortType
{
    LST_Ascending           =0,
    LST_Descending          =1,
    LST_MAX                 =2,
};
#define FOREACH_ENUM_ELEADERBOARDSORTTYPE(op) \
    op(LST_Ascending) \
    op(LST_Descending) 
enum ELeaderboardRequestType
{
    LRT_Global              =0,
    LRT_Player              =1,
    LRT_Friends             =2,
    LRT_MAX                 =3,
};
#define FOREACH_ENUM_ELEADERBOARDREQUESTTYPE(op) \
    op(LRT_Global) \
    op(LRT_Player) \
    op(LRT_Friends) 
enum EMuteType
{
    MUTE_None               =0,
    MUTE_AllButFriends      =1,
    MUTE_All                =2,
    MUTE_MAX                =3,
};
#define FOREACH_ENUM_EMUTETYPE(op) \
    op(MUTE_None) \
    op(MUTE_AllButFriends) \
    op(MUTE_All) 

#endif // !INCLUDED_ONLINESUBSYSTEMSTEAMWORKS_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_ONLINESUBSYSTEMSTEAMWORKS_CLASSES
#define INCLUDED_ONLINESUBSYSTEMSTEAMWORKS_CLASSES 1
#define ENABLE_DECLARECLASS_MACRO 1
#include "UnObjBas.h"
#undef ENABLE_DECLARECLASS_MACRO

class UOnlineAuthInterfaceSteamworks : public UOnlineAuthInterfaceImpl
{
public:
    //## BEGIN PROPS OnlineAuthInterfaceSteamworks
    //## END PROPS OnlineAuthInterfaceSteamworks

    virtual UBOOL SendClientAuthRequest(class UPlayer* ClientConnection,struct FUniqueNetId ClientUID);
    virtual UBOOL SendServerAuthRequest(struct FUniqueNetId ServerUID);
    virtual UBOOL CreateClientAuthSession(struct FUniqueNetId ServerUID,INT ServerIP,INT ServerPort,UBOOL bSecure,INT& OutAuthTicketUID);
    virtual UBOOL VerifyClientAuthSession(struct FUniqueNetId ClientUID,INT ClientIP,INT ClientPort,INT AuthTicketUID);
    virtual UBOOL CreateServerAuthSession(struct FUniqueNetId ClientUID,INT ClientIP,INT ClientPort,INT& OutAuthTicketUID);
    virtual UBOOL VerifyServerAuthSession(struct FUniqueNetId ServerUID,INT ServerIP,INT AuthTicketUID);
    virtual UBOOL GetServerUniqueId(struct FUniqueNetId& OutServerUID);
    virtual UBOOL GetServerAddr(INT& OutServerIP,INT& OutServerPort);
    DECLARE_FUNCTION(execSendClientAuthRequest)
    {
        P_GET_OBJECT(UPlayer,ClientConnection);
        P_GET_STRUCT(struct FUniqueNetId,ClientUID);
        P_FINISH;
        *(UBOOL*)Result=this->SendClientAuthRequest(ClientConnection,ClientUID);
    }
    DECLARE_FUNCTION(execSendServerAuthRequest)
    {
        P_GET_STRUCT(struct FUniqueNetId,ServerUID);
        P_FINISH;
        *(UBOOL*)Result=this->SendServerAuthRequest(ServerUID);
    }
    DECLARE_FUNCTION(execCreateClientAuthSession)
    {
        P_GET_STRUCT(struct FUniqueNetId,ServerUID);
        P_GET_INT(ServerIP);
        P_GET_INT(ServerPort);
        P_GET_UBOOL(bSecure);
        P_GET_INT_REF(OutAuthTicketUID);
        P_FINISH;
        *(UBOOL*)Result=this->CreateClientAuthSession(ServerUID,ServerIP,ServerPort,bSecure,OutAuthTicketUID);
    }
    DECLARE_FUNCTION(execVerifyClientAuthSession)
    {
        P_GET_STRUCT(struct FUniqueNetId,ClientUID);
        P_GET_INT(ClientIP);
        P_GET_INT(ClientPort);
        P_GET_INT(AuthTicketUID);
        P_FINISH;
        *(UBOOL*)Result=this->VerifyClientAuthSession(ClientUID,ClientIP,ClientPort,AuthTicketUID);
    }
    DECLARE_FUNCTION(execCreateServerAuthSession)
    {
        P_GET_STRUCT(struct FUniqueNetId,ClientUID);
        P_GET_INT(ClientIP);
        P_GET_INT(ClientPort);
        P_GET_INT_REF(OutAuthTicketUID);
        P_FINISH;
        *(UBOOL*)Result=this->CreateServerAuthSession(ClientUID,ClientIP,ClientPort,OutAuthTicketUID);
    }
    DECLARE_FUNCTION(execVerifyServerAuthSession)
    {
        P_GET_STRUCT(struct FUniqueNetId,ServerUID);
        P_GET_INT(ServerIP);
        P_GET_INT(AuthTicketUID);
        P_FINISH;
        *(UBOOL*)Result=this->VerifyServerAuthSession(ServerUID,ServerIP,AuthTicketUID);
    }
    DECLARE_FUNCTION(execGetServerUniqueId)
    {
        P_GET_STRUCT_REF(struct FUniqueNetId,OutServerUID);
        P_FINISH;
        *(UBOOL*)Result=this->GetServerUniqueId(OutServerUID);
    }
    DECLARE_FUNCTION(execGetServerAddr)
    {
        P_GET_INT_REF(OutServerIP);
        P_GET_INT_REF(OutServerPort);
        P_FINISH;
        *(UBOOL*)Result=this->GetServerAddr(OutServerIP,OutServerPort);
    }
    DECLARE_CLASS(UOnlineAuthInterfaceSteamworks,UOnlineAuthInterfaceImpl,0,OnlineSubsystemSteamworks)
    #include "UOnlineAuthInterfaceSteamworks.h"
};

struct FServerQueryToRulesResponseMapping
{
    INT Query;
    FOnlineAsyncTaskSteamServerRulesRequest* Response;

    /** Constructors */
    FServerQueryToRulesResponseMapping() {}
    FServerQueryToRulesResponseMapping(EEventParm)
    {
        appMemzero(this, sizeof(FServerQueryToRulesResponseMapping));
    }
};

struct FServerQueryToPingResponseMapping
{
    INT Query;
    FOnlineAsyncTaskSteamServerPingRequest* Response;

    /** Constructors */
    FServerQueryToPingResponseMapping() {}
    FServerQueryToPingResponseMapping(EEventParm)
    {
        appMemzero(this, sizeof(FServerQueryToPingResponseMapping));
    }
};

struct FClientFilterORClause
{
    FilterMap OrParams;

    /** Constructors */
    FClientFilterORClause() {}
    FClientFilterORClause(EEventParm)
    {
        appMemzero(this, sizeof(FClientFilterORClause));
    }
};

struct FMatchmakingQueryState
{
    class UOnlineGameSearch* GameSearch;
    TArrayNoInit<struct FServerQueryToRulesResponseMapping> QueryToRulesResponseMap;
    TArrayNoInit<struct FServerQueryToPingResponseMapping> QueryToPingResponseMap;
    FOnlineAsyncTaskSteamServerListRequest* ServerListResponse;
    BYTE CurrentMatchmakingType;
    SCRIPT_ALIGN;
    void* CurrentMatchmakingQuery;
    TArrayNoInit<struct FClientFilterORClause> ActiveClientsideFilters;
    TArrayNoInit<class UOnlineGameSettings*> PendingRulesSearchSettings;
    TArrayNoInit<class UOnlineGameSettings*> PendingPingSearchSettings;
    BITFIELD bIgnoreRefreshComplete:1;
    FLOAT LastActivityTimestamp;

    /** Constructors */
    FMatchmakingQueryState() {}
    FMatchmakingQueryState(EEventParm)
    {
        appMemzero(this, sizeof(FMatchmakingQueryState));
    }
};

struct FFilterKeyToSteamKeyMapping
{
    INT KeyId;
    BYTE KeyType;
    FStringNoInit RawKey;
    FStringNoInit SteamKey;
    BITFIELD bReverseFilter:1;
    FStringNoInit IgnoreValue;

    /** Constructors */
    FFilterKeyToSteamKeyMapping() {}
    FFilterKeyToSteamKeyMapping(EEventParm)
    {
        appMemzero(this, sizeof(FFilterKeyToSteamKeyMapping));
    }
};

class UOnlineGameInterfaceSteamworks : public UOnlineGameInterfaceImpl
{
public:
    //## BEGIN PROPS OnlineGameInterfaceSteamworks
    struct FMatchmakingQueryState ServerBrowserSearchQuery;
    struct FMatchmakingQueryState InviteSearchQuery;
    FLOAT ServerBrowserTimeout;
    FLOAT InviteTimeout;
    struct FUniqueNetId InviteServerUID;
    TArrayNoInit<FScriptDelegate> GameInviteAcceptedDelegates;
    class UOnlineGameSearch* InviteGameSearch;
    FStringNoInit InviteLocationUrl;
    TArrayNoInit<FScriptDelegate> RegisterPlayerCompleteDelegates;
    TArrayNoInit<FScriptDelegate> UnregisterPlayerCompleteDelegates;
    BITFIELD bFilterEngineBuild:1;
    TArrayNoInit<struct FFilterKeyToSteamKeyMapping> FilterKeyToSteamKeyMap;
    FScriptDelegate __OnGameInviteAccepted__Delegate;
    FScriptDelegate __OnRegisterPlayerComplete__Delegate;
    FScriptDelegate __OnUnregisterPlayerComplete__Delegate;
    //## END PROPS OnlineGameInterfaceSteamworks

    virtual UBOOL UpdateOnlineGame(FName SessionName,class UOnlineGameSettings* UpdatedGameSettings,UBOOL bShouldRefreshOnlineData=FALSE);
    virtual UBOOL AcceptGameInvite(BYTE LocalUserNum,FName SessionName);
    virtual UBOOL RegisterPlayer(FName SessionName,struct FUniqueNetId PlayerID,UBOOL bWasInvited);
    virtual UBOOL UnregisterPlayer(FName SessionName,struct FUniqueNetId PlayerID);
    DECLARE_FUNCTION(execUpdateOnlineGame)
    {
        P_GET_NAME(SessionName);
        P_GET_OBJECT(UOnlineGameSettings,UpdatedGameSettings);
        P_GET_UBOOL_OPTX(bShouldRefreshOnlineData,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->UpdateOnlineGame(SessionName,UpdatedGameSettings,bShouldRefreshOnlineData);
    }
    DECLARE_FUNCTION(execAcceptGameInvite)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=this->AcceptGameInvite(LocalUserNum,SessionName);
    }
    DECLARE_FUNCTION(execRegisterPlayer)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_UBOOL(bWasInvited);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterPlayer(SessionName,PlayerID,bWasInvited);
    }
    DECLARE_FUNCTION(execUnregisterPlayer)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->UnregisterPlayer(SessionName,PlayerID);
    }
    DECLARE_CLASS(UOnlineGameInterfaceSteamworks,UOnlineGameInterfaceImpl,0|CLASS_Config,OnlineSubsystemSteamworks)
    #include "UOnlineGameInterfaceSteamworks.h"
};

class UOnlineLobbyInterfaceSteamworks : public UObject
{
public:
    //## BEGIN PROPS OnlineLobbyInterfaceSteamworks
    //## END PROPS OnlineLobbyInterfaceSteamworks

    DECLARE_CLASS(UOnlineLobbyInterfaceSteamworks,UObject,0,OnlineSubsystemSteamworks)
    DECLARE_WITHIN(UOnlineSubsystemCommonImpl)
    static const TCHAR* StaticConfigName() {return TEXT("Engine");}

    #include "UOnlineLobbyInterfaceSteamworks.h"
};

struct FLocalTalkerSteam : public FLocalTalker
{
    MS_ALIGN(4) BYTE MuteType GCC_ALIGN(4); // Extra alignment flags needed because all properties are bytes
    SCRIPT_ALIGN;

    /** Constructors */
    FLocalTalkerSteam() {}
    FLocalTalkerSteam(EEventParm)
    {
        appMemzero(this, sizeof(FLocalTalkerSteam));
    }
};

struct FPlayerStat
{
    INT ViewId;
    INT ColumnId;
    struct FSettingsData Data;

    /** Constructors */
    FPlayerStat() {}
    FPlayerStat(EEventParm)
    {
        appMemzero(this, sizeof(FPlayerStat));
    }
};

struct FPendingPlayerStats
{
    struct FUniqueNetId Player;
    FStringNoInit PlayerName;
    FStringNoInit StatGuid;
    TArrayNoInit<struct FPlayerStat> Stats;
    struct FOnlinePlayerScore Score;
    FStringNoInit Place;

    /** Constructors */
    FPendingPlayerStats() {}
    FPendingPlayerStats(EEventParm)
    {
        appMemzero(this, sizeof(FPendingPlayerStats));
    }
};

struct FProfileSettingsCache
{
    class UOnlineProfileSettings* Profile;
    TArrayNoInit<FScriptDelegate> ReadDelegates;
    TArrayNoInit<FScriptDelegate> WriteDelegates;
    TArrayNoInit<FScriptDelegate> ProfileDataChangedDelegates;

    /** Constructors */
    FProfileSettingsCache() {}
    FProfileSettingsCache(EEventParm)
    {
        appMemzero(this, sizeof(FProfileSettingsCache));
    }
};

struct FOnlineStatusMapping
{
    INT StatusId;
    FStringNoInit StatusString;

    /** Constructors */
    FOnlineStatusMapping() {}
    FOnlineStatusMapping(EEventParm)
    {
        appMemzero(this, sizeof(FOnlineStatusMapping));
    }
};

struct FSteamUserCloud
{
    FStringNoInit UserId;
    TArrayNoInit<struct FTitleFile> UserCloudFileData;

    /** Constructors */
    FSteamUserCloud() {}
    FSteamUserCloud(EEventParm)
    {
        appMemzero(this, sizeof(FSteamUserCloud));
    }
};

struct FSteamUserCloudMetadata
{
    FStringNoInit UserId;
    TArrayNoInit<struct FEmsFile> UserCloudMetadata;

    /** Constructors */
    FSteamUserCloudMetadata() {}
    FSteamUserCloudMetadata(EEventParm)
    {
        appMemzero(this, sizeof(FSteamUserCloudMetadata));
    }
};

struct FQueuedAvatarRequest
{
    FLOAT CheckTime;
    INT NumberOfAttempts;
    struct FUniqueNetId PlayerNetId;
    INT Size;
    FScriptDelegate ReadOnlineAvatarCompleteDelegate;

    /** Constructors */
    FQueuedAvatarRequest() {}
    FQueuedAvatarRequest(EEventParm)
    {
        appMemzero(this, sizeof(FQueuedAvatarRequest));
    }
};

struct FAchievementMappingInfo
{
    INT AchievementId;
    FName AchievementName;
    INT ViewId;
    INT ProgressCount;
    INT MaxProgress;
    BITFIELD bAutoUnlock:1;
    SCRIPT_ALIGN;

    /** Constructors */
    FAchievementMappingInfo() {}
    FAchievementMappingInfo(EEventParm)
    {
        appMemzero(this, sizeof(FAchievementMappingInfo));
    }
};

struct FAchievementProgressStat
{
    INT AchievementId;
    INT Progress;
    INT MaxProgress;
    BITFIELD bUnlock:1;
    SCRIPT_ALIGN;

    /** Constructors */
    FAchievementProgressStat() {}
    FAchievementProgressStat(EEventParm)
    {
        appMemzero(this, sizeof(FAchievementProgressStat));
    }
};

struct FLeaderboardTemplate
{
    FStringNoInit LeaderboardName;
    BYTE UpdateType;
    INT LeaderboardSize;
    BYTE SortType;
    BYTE DisplayFormat;
    SCRIPT_ALIGN;
    SteamLeaderboard_t LeaderboardRef;
    BITFIELD bLeaderboardInitializing:1;
    BITFIELD bLeaderboardInitiated:1;
    SCRIPT_ALIGN;

    /** Constructors */
    FLeaderboardTemplate() {}
    FLeaderboardTemplate(EEventParm)
    {
        appMemzero(this, sizeof(FLeaderboardTemplate));
    }
};

struct FDeferredLeaderboardRead
{
    FStringNoInit LeaderboardName;
    BYTE RequestType;
    INT Start;
    INT End;
    TArrayNoInit<struct FUniqueNetId> PlayerList;

    /** Constructors */
    FDeferredLeaderboardRead() {}
    FDeferredLeaderboardRead(EEventParm)
    {
        appMemzero(this, sizeof(FDeferredLeaderboardRead));
    }
};

struct FDeferredLeaderboardWrite
{
    FStringNoInit LeaderboardName;
    INT Score;
    TArrayNoInit<INT> LeaderboardData;

    /** Constructors */
    FDeferredLeaderboardWrite() {}
    FDeferredLeaderboardWrite(EEventParm)
    {
        appMemzero(this, sizeof(FDeferredLeaderboardWrite));
    }
};

struct FLeaderboardEntry
{
    struct FUniqueNetId PlayerUID;
    INT Rank;
    INT Score;
    TArrayNoInit<INT> LeaderboardData;

    /** Constructors */
    FLeaderboardEntry() {}
    FLeaderboardEntry(EEventParm)
    {
        appMemzero(this, sizeof(FLeaderboardEntry));
    }
};

struct FViewIdToLeaderboardName
{
    INT ViewId;
    FStringNoInit LeaderboardName;

    /** Constructors */
    FViewIdToLeaderboardName() {}
    FViewIdToLeaderboardName(EEventParm)
    {
        appMemzero(this, sizeof(FViewIdToLeaderboardName));
    }
};

struct FSteamPlayerClanData
{
    FStringNoInit ClanName;
    FStringNoInit ClanTag;

    /** Constructors */
    FSteamPlayerClanData() {}
    FSteamPlayerClanData(EEventParm)
    {
        appMemzero(this, sizeof(FSteamPlayerClanData));
    }
};

struct OnlineSubsystemSteamworks_eventOnWriteSharedFileComplete_Parms
{
    UBOOL bWasSuccessful;
    FString UserId;
    FString Filename;
    FString SharedHandle;
    OnlineSubsystemSteamworks_eventOnWriteSharedFileComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadSharedFileComplete_Parms
{
    UBOOL bWasSuccessful;
    FString SharedHandle;
    OnlineSubsystemSteamworks_eventOnReadSharedFileComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnDeleteUserFileComplete_Parms
{
    UBOOL bWasSuccessful;
    FString UserId;
    FString Filename;
    OnlineSubsystemSteamworks_eventOnDeleteUserFileComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnWriteUserFileComplete_Parms
{
    UBOOL bWasSuccessful;
    FString UserId;
    FString Filename;
    OnlineSubsystemSteamworks_eventOnWriteUserFileComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadUserFileComplete_Parms
{
    UBOOL bWasSuccessful;
    FString UserId;
    FString Filename;
    OnlineSubsystemSteamworks_eventOnReadUserFileComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnEnumerateUserFilesComplete_Parms
{
    UBOOL bWasSuccessful;
    FString UserId;
    OnlineSubsystemSteamworks_eventOnEnumerateUserFilesComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadCrossTitleProfileSettingsComplete_Parms
{
    BYTE LocalUserNum;
    INT TitleId;
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnReadCrossTitleProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnGetNumberOfCurrentPlayersComplete_Parms
{
    INT TotalPlayers;
    OnlineSubsystemSteamworks_eventOnGetNumberOfCurrentPlayersComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadOnlineAvatarComplete_Parms
{
    struct FUniqueNetId PlayerNetId;
    class UTexture2D* Avatar;
    OnlineSubsystemSteamworks_eventOnReadOnlineAvatarComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadAchievementsComplete_Parms
{
    INT TitleId;
    OnlineSubsystemSteamworks_eventOnReadAchievementsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnProfileDataChanged_Parms
{
    OnlineSubsystemSteamworks_eventOnProfileDataChanged_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnUnlockAchievementComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnUnlockAchievementComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnDeviceSelectionComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnDeviceSelectionComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnRegisterHostStatGuidComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnRegisterHostStatGuidComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnFriendMessageReceived_Parms
{
    BYTE LocalUserNum;
    struct FUniqueNetId SendingPlayer;
    FString SendingNick;
    FString Message;
    OnlineSubsystemSteamworks_eventOnFriendMessageReceived_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnJoinFriendGameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnJoinFriendGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReceivedGameInvite_Parms
{
    BYTE LocalUserNum;
    FString InviterName;
    OnlineSubsystemSteamworks_eventOnReceivedGameInvite_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnFriendInviteReceived_Parms
{
    BYTE LocalUserNum;
    struct FUniqueNetId RequestingPlayer;
    FString RequestingNick;
    FString Message;
    OnlineSubsystemSteamworks_eventOnFriendInviteReceived_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnAddFriendByNameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnAddFriendByNameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnKeyboardInputComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnKeyboardInputComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadTitleFileComplete_Parms
{
    UBOOL bWasSuccessful;
    FString Filename;
    OnlineSubsystemSteamworks_eventOnReadTitleFileComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnStorageDeviceChange_Parms
{
    OnlineSubsystemSteamworks_eventOnStorageDeviceChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnConnectionStatusChange_Parms
{
    BYTE ConnectionStatus;
    OnlineSubsystemSteamworks_eventOnConnectionStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnControllerChange_Parms
{
    INT ControllerId;
    UBOOL bIsConnected;
    OnlineSubsystemSteamworks_eventOnControllerChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnExternalUIChange_Parms
{
    UBOOL bIsOpening;
    OnlineSubsystemSteamworks_eventOnExternalUIChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnLinkStatusChange_Parms
{
    UBOOL bIsConnected;
    OnlineSubsystemSteamworks_eventOnLinkStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnFlushOnlineStatsComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnFlushOnlineStatsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadOnlineStatsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnReadOnlineStatsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnRecognitionComplete_Parms
{
    OnlineSubsystemSteamworks_eventOnRecognitionComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnPlayerTalkingStateChange_Parms
{
    struct FUniqueNetId Player;
    UBOOL bIsTalking;
    OnlineSubsystemSteamworks_eventOnPlayerTalkingStateChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadFriendsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnReadFriendsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnWritePlayerStorageComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnWritePlayerStorageComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadPlayerStorageForNetIdComplete_Parms
{
    struct FUniqueNetId NetId;
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnReadPlayerStorageForNetIdComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadPlayerStorageComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnReadPlayerStorageComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnWriteProfileSettingsComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnWriteProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnReadProfileSettingsComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnReadProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnLoginStatusChange_Parms
{
    BYTE NewStatus;
    struct FUniqueNetId NewId;
    OnlineSubsystemSteamworks_eventOnLoginStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnLogoutCompleted_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemSteamworks_eventOnLogoutCompleted_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnLoginFailed_Parms
{
    BYTE LocalUserNum;
    BYTE ErrorCode;
    OnlineSubsystemSteamworks_eventOnLoginFailed_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnFriendsChange_Parms
{
    OnlineSubsystemSteamworks_eventOnFriendsChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnMutingChange_Parms
{
    OnlineSubsystemSteamworks_eventOnMutingChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnLoginCancelled_Parms
{
    OnlineSubsystemSteamworks_eventOnLoginCancelled_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemSteamworks_eventOnLoginChange_Parms
{
    BYTE LocalUserNum;
    OnlineSubsystemSteamworks_eventOnLoginChange_Parms(EEventParm)
    {
    }
};
class UOnlineSubsystemSteamworks : public UOnlineSubsystemCommonImpl
{
public:
    //## BEGIN PROPS OnlineSubsystemSteamworks
    BITFIELD bStoringAchievement:1;
    BITFIELD bClientStatsStorePending:1;
    BITFIELD bGSStatsStoresSuccess:1;
    BITFIELD bLastHasConnection:1;
    BITFIELD bIsStatsSessionOk:1;
    BITFIELD bShouldUseMcp:1;
    INT TotalGSStatsStoresPending;
    BYTE UserStatsReceivedState;
    BYTE LoggedInStatus;
    BYTE CurrentNotificationPosition;
    class UOnlineGameInterfaceSteamworks* CachedGameInt;
    FStringNoInit LocalProfileName;
    FStringNoInit LoggedInPlayerName;
    struct FUniqueNetId LoggedInPlayerId;
    INT LoggedInPlayerNum;
    TArrayNoInit<FScriptDelegate> WriteProfileSettingsDelegates;
    class UOnlineProfileSettings* CachedProfile;
    TArrayNoInit<FScriptDelegate> LocalPlayerStorageReadDelegates;
    TArrayNoInit<FScriptDelegate> LocalPlayerStorageWriteDelegates;
    TArrayNoInit<FScriptDelegate> RemotePlayerStorageReadDelegates;
    TArrayNoInit<FScriptDelegate> SpeechRecognitionCompleteDelegates;
    TArrayNoInit<FScriptDelegate> ReadFriendsDelegates;
    TArrayNoInit<FScriptDelegate> FriendsChangeDelegates;
    TArrayNoInit<FScriptDelegate> MutingChangeDelegates;
    TArrayNoInit<FScriptDelegate> LoginChangeDelegates;
    TArrayNoInit<FScriptDelegate> LoginFailedDelegates;
    TArrayNoInit<FScriptDelegate> TalkingDelegates;
    TArrayNoInit<FScriptDelegate> ReadOnlineStatsCompleteDelegates;
    TArrayNoInit<FScriptDelegate> FlushOnlineStatsDelegates;
    TArrayNoInit<FScriptDelegate> ConnectionStatusChangeDelegates;
    TArrayNoInit<FScriptDelegate> LinkStatusDelegates;
    TArrayNoInit<FScriptDelegate> ReadTitleFileCompleteDelegates;
    TArrayNoInit<FScriptDelegate> AchievementDelegates;
    TArrayNoInit<FScriptDelegate> AchievementReadDelegates;
    TArrayNoInit<FScriptDelegate> EnumerateUserFilesCompleteDelegates;
    TArrayNoInit<FScriptDelegate> ReadUserFileCompleteDelegates;
    TArrayNoInit<FScriptDelegate> WriteUserFileCompleteDelegates;
    TArrayNoInit<FScriptDelegate> DeleteUserFileCompleteDelegates;
    TArrayNoInit<FScriptDelegate> SharedFileReadCompleteDelegates;
    TArrayNoInit<FScriptDelegate> SharedFileWriteCompleteDelegates;
    struct FLocalTalkerSteam CurrentLocalTalker;
    TArrayNoInit<struct FRemoteTalker> RemoteTalkers;
    INT AppID;
    class UOnlineStatsRead* CurrentStatsRead;
    TArrayNoInit<struct FPendingPlayerStats> PendingStats;
    TArrayNoInit<FScriptDelegate> FriendInviteReceivedDelegates;
    TArrayNoInit<FScriptDelegate> FriendMessageReceivedDelegates;
    TArrayNoInit<FScriptDelegate> AddFriendByNameCompleteDelegates;
    struct FProfileSettingsCache ProfileCache;
    class UOnlinePlayerStorage* PlayerStorageCache;
    TArrayNoInit<FString> LocationUrlsForInvites;
    FStringNoInit LocationUrl;
    TArrayNoInit<FScriptDelegate> ReceivedGameInviteDelegates;
    TArrayNoInit<FScriptDelegate> JoinFriendGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> GetNumberOfCurrentPlayersCompleteDelegates;
    TArrayNoInit<struct FOnlineFriendMessage> CachedFriendMessages;
    TArrayNoInit<struct FOnlineStatusMapping> StatusMappings;
    FStringNoInit DefaultStatus;
    FStringNoInit GameInviteMessage;
    FLOAT ConnectionPresenceTimeInterval;
    FLOAT ConnectionPresenceElapsedTime;
    TArrayNoInit<struct FUniqueNetId> MuteList;
    TArrayNoInit<struct FSteamUserCloud> UserCloudFiles;
    TArrayNoInit<struct FSteamUserCloudMetadata> UserCloudMetadata;
    TArrayNoInit<struct FTitleFile> SharedFileCache;
    TArrayNoInit<struct FQueuedAvatarRequest> QueuedAvatarRequests;
    TArrayNoInit<struct FAchievementMappingInfo> AchievementMappings;
    TArrayNoInit<struct FAchievementProgressStat> PendingAchievementProgress;
    TArrayNoInit<struct FLeaderboardTemplate> LeaderboardList;
    TArrayNoInit<struct FDeferredLeaderboardRead> DeferredLeaderboardReads;
    TArrayNoInit<struct FDeferredLeaderboardWrite> DeferredLeaderboardWrites;
    TArrayNoInit<struct FDeferredLeaderboardWrite> PendingLeaderboardStats;
    TArrayNoInit<struct FViewIdToLeaderboardName> LeaderboardNameMappings;
    TArrayNoInit<INT> GameServerStatsMappings;
    class UOnlineAuthInterfaceSteamworks* CachedAuthInt;
    FScriptDelegate __OnLoginChange__Delegate;
    FScriptDelegate __OnLoginCancelled__Delegate;
    FScriptDelegate __OnMutingChange__Delegate;
    FScriptDelegate __OnFriendsChange__Delegate;
    FScriptDelegate __OnLoginFailed__Delegate;
    FScriptDelegate __OnLogoutCompleted__Delegate;
    FScriptDelegate __OnLoginStatusChange__Delegate;
    FScriptDelegate __OnReadProfileSettingsComplete__Delegate;
    FScriptDelegate __OnWriteProfileSettingsComplete__Delegate;
    FScriptDelegate __OnReadPlayerStorageComplete__Delegate;
    FScriptDelegate __OnReadPlayerStorageForNetIdComplete__Delegate;
    FScriptDelegate __OnWritePlayerStorageComplete__Delegate;
    FScriptDelegate __OnReadFriendsComplete__Delegate;
    FScriptDelegate __OnPlayerTalkingStateChange__Delegate;
    FScriptDelegate __OnRecognitionComplete__Delegate;
    FScriptDelegate __OnReadOnlineStatsComplete__Delegate;
    FScriptDelegate __OnFlushOnlineStatsComplete__Delegate;
    FScriptDelegate __OnLinkStatusChange__Delegate;
    FScriptDelegate __OnExternalUIChange__Delegate;
    FScriptDelegate __OnControllerChange__Delegate;
    FScriptDelegate __OnConnectionStatusChange__Delegate;
    FScriptDelegate __OnStorageDeviceChange__Delegate;
    FScriptDelegate __OnReadTitleFileComplete__Delegate;
    FScriptDelegate __OnKeyboardInputComplete__Delegate;
    FScriptDelegate __OnAddFriendByNameComplete__Delegate;
    FScriptDelegate __OnFriendInviteReceived__Delegate;
    FScriptDelegate __OnReceivedGameInvite__Delegate;
    FScriptDelegate __OnJoinFriendGameComplete__Delegate;
    FScriptDelegate __OnFriendMessageReceived__Delegate;
    FScriptDelegate __OnRegisterHostStatGuidComplete__Delegate;
    FScriptDelegate __OnDeviceSelectionComplete__Delegate;
    FScriptDelegate __OnUnlockAchievementComplete__Delegate;
    FScriptDelegate __OnProfileDataChanged__Delegate;
    FScriptDelegate __OnReadAchievementsComplete__Delegate;
    FScriptDelegate __OnReadOnlineAvatarComplete__Delegate;
    FScriptDelegate __OnGetNumberOfCurrentPlayersComplete__Delegate;
    FScriptDelegate __OnReadCrossTitleProfileSettingsComplete__Delegate;
    FScriptDelegate __OnEnumerateUserFilesComplete__Delegate;
    FScriptDelegate __OnReadUserFileComplete__Delegate;
    FScriptDelegate __OnWriteUserFileComplete__Delegate;
    FScriptDelegate __OnDeleteUserFileComplete__Delegate;
    FScriptDelegate __OnReadSharedFileComplete__Delegate;
    FScriptDelegate __OnWriteSharedFileComplete__Delegate;
    //## END PROPS OnlineSubsystemSteamworks

    virtual UBOOL Init();
    virtual void Exit();
    virtual UBOOL Login(BYTE LocalUserNum,const FString& LoginName,const FString& Password,UBOOL bWantsLocalOnly=FALSE);
    virtual UBOOL AutoLogin();
    virtual BYTE GetLoginStatus(BYTE LocalUserNum);
    virtual BYTE CanPlayOnline(BYTE LocalUserNum);
    virtual BYTE CanCommunicate(BYTE LocalUserNum);
    virtual UBOOL IsFriend(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL AreAnyFriends(BYTE LocalUserNum,TArray<struct FFriendsQuery>& Query);
    virtual UBOOL ReadProfileSettings(BYTE LocalUserNum,class UOnlineProfileSettings* ProfileSettings);
    virtual UBOOL WriteProfileSettings(BYTE LocalUserNum,class UOnlineProfileSettings* ProfileSettings);
    virtual UBOOL ReadFriendsList(BYTE LocalUserNum,INT Count=0,INT StartingAt=0);
    virtual BYTE GetFriendsList(BYTE LocalUserNum,TArray<struct FOnlineFriend>& Friends,INT Count=0,INT StartingAt=0);
    virtual UBOOL RegisterLocalTalker(BYTE LocalUserNum);
    virtual UBOOL UnregisterLocalTalker(BYTE LocalUserNum);
    virtual UBOOL RegisterRemoteTalker(struct FUniqueNetId PlayerID);
    virtual UBOOL UnregisterRemoteTalker(struct FUniqueNetId PlayerID);
    virtual UBOOL IsLocalPlayerTalking(BYTE LocalUserNum);
    virtual UBOOL IsRemotePlayerTalking(struct FUniqueNetId PlayerID);
    virtual UBOOL IsHeadsetPresent(BYTE LocalUserNum);
    virtual UBOOL SetRemoteTalkerPriority(BYTE LocalUserNum,struct FUniqueNetId PlayerID,INT Priority);
    virtual UBOOL MuteRemoteTalker(BYTE LocalUserNum,struct FUniqueNetId PlayerID,UBOOL bIsSystemWide=FALSE);
    virtual UBOOL UnmuteRemoteTalker(BYTE LocalUserNum,struct FUniqueNetId PlayerID,UBOOL bIsSystemWide=FALSE);
    virtual void StartNetworkedVoice(BYTE LocalUserNum);
    virtual void StopNetworkedVoice(BYTE LocalUserNum);
    virtual UBOOL StartSpeechRecognition(BYTE LocalUserNum);
    virtual UBOOL StopSpeechRecognition(BYTE LocalUserNum);
    virtual UBOOL GetRecognitionResults(BYTE LocalUserNum,TArray<FSpeechRecognizedWord>& Words);
    virtual UBOOL SelectVocabulary(BYTE LocalUserNum,INT VocabularyId);
    virtual UBOOL SetSpeechRecognitionObject(BYTE LocalUserNum,class USpeechRecognition* SpeechRecogObj);
    virtual UBOOL ReadOnlineStats(const TArray<struct FUniqueNetId>& Players,class UOnlineStatsRead* StatsRead);
    virtual UBOOL ReadOnlineStatsForFriends(BYTE LocalUserNum,class UOnlineStatsRead* StatsRead);
    virtual UBOOL ReadOnlineStatsByRank(class UOnlineStatsRead* StatsRead,INT StartIndex=1,INT NumToRead=100);
    virtual UBOOL ReadOnlineStatsByRankAroundPlayer(BYTE LocalUserNum,class UOnlineStatsRead* StatsRead,INT NumRows=10);
    virtual void FreeStats(class UOnlineStatsRead* StatsRead);
    virtual UBOOL WriteOnlineStats(FName SessionName,struct FUniqueNetId Player,class UOnlineStatsWrite* StatsWrite);
    virtual UBOOL FlushOnlineStats(FName SessionName);
    virtual UBOOL WriteOnlinePlayerScores(FName SessionName,INT LeaderboardId,const TArray<struct FOnlinePlayerScore>& PlayerScores);
    virtual UBOOL HasLinkConnection();
    virtual void SetNetworkNotificationPosition(BYTE NewPos);
    virtual BYTE GetNATType();
    virtual UBOOL ReadTitleFile(const FString& FileToRead);
    virtual UBOOL GetTitleFileContents(const FString& Filename,TArray<BYTE>& FileContents);
    virtual void SetOnlineStatus(BYTE LocalUserNum,INT StatusId,const TArray<struct FLocalizedStringSetting>& LocalizedStringSettings,const TArray<struct FSettingsProperty>& Properties);
    virtual UBOOL AddFriend(BYTE LocalUserNum,struct FUniqueNetId NewFriend,const FString& Message=TEXT(""));
    virtual UBOOL AddFriendByName(BYTE LocalUserNum,const FString& FriendName,const FString& Message=TEXT(""));
    virtual UBOOL RemoveFriend(BYTE LocalUserNum,struct FUniqueNetId FormerFriend);
    virtual UBOOL AcceptFriendInvite(BYTE LocalUserNum,struct FUniqueNetId RequestingPlayer);
    virtual UBOOL DenyFriendInvite(BYTE LocalUserNum,struct FUniqueNetId RequestingPlayer);
    virtual UBOOL SendMessageToFriend(BYTE LocalUserNum,struct FUniqueNetId Friend,const FString& Message);
    virtual UBOOL SendGameInviteToFriend(BYTE LocalUserNum,struct FUniqueNetId Friend,const FString& Text=TEXT(""));
    virtual UBOOL SendGameInviteToFriends(BYTE LocalUserNum,const TArray<struct FUniqueNetId>& Friends,const FString& Text=TEXT(""));
    virtual UBOOL JoinFriendGame(BYTE LocalUserNum,struct FUniqueNetId Friend);
    virtual UBOOL ShowFeedbackUI(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowGamerCardUI(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowMessagesUI(BYTE LocalUserNum);
    virtual UBOOL ShowAchievementsUI(BYTE LocalUserNum);
    virtual UBOOL ShowInviteUI(BYTE LocalUserNum,const FString& InviteText=TEXT(""));
    virtual UBOOL ShowContentMarketplaceUI(BYTE LocalUserNum,INT CategoryMask=-1,INT OfferId=0);
    virtual UBOOL ShowMembershipMarketplaceUI(BYTE LocalUserNum);
    virtual UBOOL UnlockAchievement(BYTE LocalUserNum,INT AchievementId,FLOAT PercentComplete=100.000000);
    virtual UBOOL ShowFriendsUI(BYTE LocalUserNum);
    virtual UBOOL ShowFriendsInviteUI(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowPlayersUI(BYTE LocalUserNum);
    virtual UBOOL ReadAchievements(BYTE LocalUserNum,INT TitleId=0,UBOOL bShouldReadText=TRUE,UBOOL bShouldReadImages=FALSE);
    virtual BYTE GetAchievements(BYTE LocalUserNum,TArray<struct FAchievementDetails>& Achievements,INT TitleId=0);
    virtual UBOOL ShowCustomPlayersUI(BYTE LocalUserNum,const TArray<struct FUniqueNetId>& Players,const FString& Title,const FString& Description);
    virtual void ReadOnlineAvatar(const struct FUniqueNetId PlayerNetId,INT Size,FScriptDelegate ReadOnlineAvatarCompleteDelegate);
    virtual UBOOL GetNumberOfCurrentPlayers();
    virtual void GetSteamClanData(TArray<struct FSteamPlayerClanData>& Results);
    virtual UBOOL ResetStats(UBOOL bResetAchievements);
    virtual UBOOL CreateLeaderboard(const FString& LeaderboardName,BYTE SortType,BYTE DisplayFormat);
    virtual UBOOL DisplayAchievementProgress(INT AchievementId,INT ProgressCount,INT MaxProgress);
    virtual FString UniqueNetIdToPlayerName(const struct FUniqueNetId& Uid);
    virtual UBOOL ShowProfileUI(BYTE LocalUserNum,const FString& SubURL=TEXT(""),struct FUniqueNetId PlayerUID=FUniqueNetId(EC_EventParm));
    virtual void NotifyVOIPPlaybackFinished(class UAudioComponent* VOIPAudioComponent);
    virtual FString UniqueNetIdToInt64(const struct FUniqueNetId& Uid);
    virtual UBOOL Int64ToUniqueNetId(const FString& UIDString,struct FUniqueNetId& OutUID);
    virtual UBOOL GetCommandlineJoinURL(UBOOL bMarkAsJoined,FString& ServerURL,FString& ServerUID);
    virtual UBOOL GetFriendJoinURL(struct FUniqueNetId FriendUID,FString& ServerURL,FString& ServerUID);
    virtual UBOOL WriteUserFileInternal(const FString& UserId,const FString& Filename,const TArray<BYTE>& FileContents);
    virtual UBOOL GetFileContents(const FString& UserId,const FString& Filename,TArray<BYTE>& FileContents);
    virtual UBOOL ClearFiles(const FString& UserId);
    virtual UBOOL ClearFile(const FString& UserId,const FString& Filename);
    virtual void EnumerateUserFiles(const FString& UserId);
    virtual void GetUserFileList(const FString& UserId,TArray<struct FEmsFile>& UserFiles);
    virtual UBOOL ReadUserFile(const FString& UserId,const FString& Filename);
    virtual UBOOL WriteUserFile(const FString& UserId,const FString& Filename,const TArray<BYTE>& FileContents);
    virtual UBOOL DeleteUserFile(const FString& UserId,const FString& Filename,UBOOL bShouldCloudDelete,UBOOL bShouldLocallyDelete);
    virtual UBOOL GetSharedFileContents(const FString& SharedHandle,TArray<BYTE>& FileContents);
    virtual UBOOL ClearSharedFiles();
    virtual UBOOL ClearSharedFile(const FString& SharedHandle);
    virtual UBOOL ReadSharedFile(const FString& SharedHandle);
    virtual UBOOL WriteSharedFile(const FString& UserId,const FString& Filename,const TArray<BYTE>& Contents);
    DECLARE_FUNCTION(execExit)
    {
        P_FINISH;
        this->Exit();
    }
    DECLARE_FUNCTION(execLogin)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(LoginName);
        P_GET_STR(Password);
        P_GET_UBOOL_OPTX(bWantsLocalOnly,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->Login(LocalUserNum,LoginName,Password,bWantsLocalOnly);
    }
    DECLARE_FUNCTION(execAutoLogin)
    {
        P_FINISH;
        *(UBOOL*)Result=this->AutoLogin();
    }
    DECLARE_FUNCTION(execGetLoginStatus)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->GetLoginStatus(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanPlayOnline)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->CanPlayOnline(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanCommunicate)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=this->CanCommunicate(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->IsFriend(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execAreAnyFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FFriendsQuery,Query);
        P_FINISH;
        *(UBOOL*)Result=this->AreAnyFriends(LocalUserNum,Query);
    }
    DECLARE_FUNCTION(execReadProfileSettings)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineProfileSettings,ProfileSettings);
        P_FINISH;
        *(UBOOL*)Result=this->ReadProfileSettings(LocalUserNum,ProfileSettings);
    }
    DECLARE_FUNCTION(execWriteProfileSettings)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineProfileSettings,ProfileSettings);
        P_FINISH;
        *(UBOOL*)Result=this->WriteProfileSettings(LocalUserNum,ProfileSettings);
    }
    DECLARE_FUNCTION(execReadFriendsList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(Count,0);
        P_GET_INT_OPTX(StartingAt,0);
        P_FINISH;
        *(UBOOL*)Result=this->ReadFriendsList(LocalUserNum,Count,StartingAt);
    }
    DECLARE_FUNCTION(execGetFriendsList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FOnlineFriend,Friends);
        P_GET_INT_OPTX(Count,0);
        P_GET_INT_OPTX(StartingAt,0);
        P_FINISH;
        *(BYTE*)Result=this->GetFriendsList(LocalUserNum,Friends,Count,StartingAt);
    }
    DECLARE_FUNCTION(execRegisterLocalTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterLocalTalker(LocalUserNum);
    }
    DECLARE_FUNCTION(execUnregisterLocalTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->UnregisterLocalTalker(LocalUserNum);
    }
    DECLARE_FUNCTION(execRegisterRemoteTalker)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->RegisterRemoteTalker(PlayerID);
    }
    DECLARE_FUNCTION(execUnregisterRemoteTalker)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->UnregisterRemoteTalker(PlayerID);
    }
    DECLARE_FUNCTION(execIsLocalPlayerTalking)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->IsLocalPlayerTalking(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsRemotePlayerTalking)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->IsRemotePlayerTalking(PlayerID);
    }
    DECLARE_FUNCTION(execIsHeadsetPresent)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->IsHeadsetPresent(LocalUserNum);
    }
    DECLARE_FUNCTION(execSetRemoteTalkerPriority)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_INT(Priority);
        P_FINISH;
        *(UBOOL*)Result=this->SetRemoteTalkerPriority(LocalUserNum,PlayerID,Priority);
    }
    DECLARE_FUNCTION(execMuteRemoteTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_UBOOL_OPTX(bIsSystemWide,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->MuteRemoteTalker(LocalUserNum,PlayerID,bIsSystemWide);
    }
    DECLARE_FUNCTION(execUnmuteRemoteTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_UBOOL_OPTX(bIsSystemWide,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->UnmuteRemoteTalker(LocalUserNum,PlayerID,bIsSystemWide);
    }
    DECLARE_FUNCTION(execStartNetworkedVoice)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        this->StartNetworkedVoice(LocalUserNum);
    }
    DECLARE_FUNCTION(execStopNetworkedVoice)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        this->StopNetworkedVoice(LocalUserNum);
    }
    DECLARE_FUNCTION(execStartSpeechRecognition)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->StartSpeechRecognition(LocalUserNum);
    }
    DECLARE_FUNCTION(execStopSpeechRecognition)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->StopSpeechRecognition(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetRecognitionResults)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(FSpeechRecognizedWord,Words);
        P_FINISH;
        *(UBOOL*)Result=this->GetRecognitionResults(LocalUserNum,Words);
    }
    DECLARE_FUNCTION(execSelectVocabulary)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(VocabularyId);
        P_FINISH;
        *(UBOOL*)Result=this->SelectVocabulary(LocalUserNum,VocabularyId);
    }
    DECLARE_FUNCTION(execSetSpeechRecognitionObject)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(USpeechRecognition,SpeechRecogObj);
        P_FINISH;
        *(UBOOL*)Result=this->SetSpeechRecognitionObject(LocalUserNum,SpeechRecogObj);
    }
    DECLARE_FUNCTION(execReadOnlineStats)
    {
        P_GET_TARRAY_REF(struct FUniqueNetId,Players);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStats(Players,StatsRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsForFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStatsForFriends(LocalUserNum,StatsRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsByRank)
    {
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_GET_INT_OPTX(StartIndex,1);
        P_GET_INT_OPTX(NumToRead,100);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStatsByRank(StatsRead,StartIndex,NumToRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsByRankAroundPlayer)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_GET_INT_OPTX(NumRows,10);
        P_FINISH;
        *(UBOOL*)Result=this->ReadOnlineStatsByRankAroundPlayer(LocalUserNum,StatsRead,NumRows);
    }
    DECLARE_FUNCTION(execFreeStats)
    {
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        this->FreeStats(StatsRead);
    }
    DECLARE_FUNCTION(execWriteOnlineStats)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,Player);
        P_GET_OBJECT(UOnlineStatsWrite,StatsWrite);
        P_FINISH;
        *(UBOOL*)Result=this->WriteOnlineStats(SessionName,Player,StatsWrite);
    }
    DECLARE_FUNCTION(execFlushOnlineStats)
    {
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=this->FlushOnlineStats(SessionName);
    }
    DECLARE_FUNCTION(execWriteOnlinePlayerScores)
    {
        P_GET_NAME(SessionName);
        P_GET_INT(LeaderboardId);
        P_GET_TARRAY_REF(struct FOnlinePlayerScore,PlayerScores);
        P_FINISH;
        *(UBOOL*)Result=this->WriteOnlinePlayerScores(SessionName,LeaderboardId,PlayerScores);
    }
    DECLARE_FUNCTION(execHasLinkConnection)
    {
        P_FINISH;
        *(UBOOL*)Result=this->HasLinkConnection();
    }
    DECLARE_FUNCTION(execSetNetworkNotificationPosition)
    {
        P_GET_BYTE(NewPos);
        P_FINISH;
        this->SetNetworkNotificationPosition(NewPos);
    }
    DECLARE_FUNCTION(execGetNATType)
    {
        P_FINISH;
        *(BYTE*)Result=this->GetNATType();
    }
    DECLARE_FUNCTION(execReadTitleFile)
    {
        P_GET_STR(FileToRead);
        P_FINISH;
        *(UBOOL*)Result=this->ReadTitleFile(FileToRead);
    }
    DECLARE_FUNCTION(execGetTitleFileContents)
    {
        P_GET_STR(Filename);
        P_GET_TARRAY_REF(BYTE,FileContents);
        P_FINISH;
        *(UBOOL*)Result=this->GetTitleFileContents(Filename,FileContents);
    }
    DECLARE_FUNCTION(execSetOnlineStatus)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(StatusId);
        P_GET_TARRAY_REF(struct FLocalizedStringSetting,LocalizedStringSettings);
        P_GET_TARRAY_REF(struct FSettingsProperty,Properties);
        P_FINISH;
        this->SetOnlineStatus(LocalUserNum,StatusId,LocalizedStringSettings,Properties);
    }
    DECLARE_FUNCTION(execAddFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,NewFriend);
        P_GET_STR_OPTX(Message,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->AddFriend(LocalUserNum,NewFriend,Message);
    }
    DECLARE_FUNCTION(execAddFriendByName)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(FriendName);
        P_GET_STR_OPTX(Message,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->AddFriendByName(LocalUserNum,FriendName,Message);
    }
    DECLARE_FUNCTION(execRemoveFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,FormerFriend);
        P_FINISH;
        *(UBOOL*)Result=this->RemoveFriend(LocalUserNum,FormerFriend);
    }
    DECLARE_FUNCTION(execAcceptFriendInvite)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,RequestingPlayer);
        P_FINISH;
        *(UBOOL*)Result=this->AcceptFriendInvite(LocalUserNum,RequestingPlayer);
    }
    DECLARE_FUNCTION(execDenyFriendInvite)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,RequestingPlayer);
        P_FINISH;
        *(UBOOL*)Result=this->DenyFriendInvite(LocalUserNum,RequestingPlayer);
    }
    DECLARE_FUNCTION(execSendMessageToFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_GET_STR(Message);
        P_FINISH;
        *(UBOOL*)Result=this->SendMessageToFriend(LocalUserNum,Friend,Message);
    }
    DECLARE_FUNCTION(execSendGameInviteToFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_GET_STR_OPTX(Text,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->SendGameInviteToFriend(LocalUserNum,Friend,Text);
    }
    DECLARE_FUNCTION(execSendGameInviteToFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY(struct FUniqueNetId,Friends);
        P_GET_STR_OPTX(Text,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->SendGameInviteToFriends(LocalUserNum,Friends,Text);
    }
    DECLARE_FUNCTION(execJoinFriendGame)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_FINISH;
        *(UBOOL*)Result=this->JoinFriendGame(LocalUserNum,Friend);
    }
    DECLARE_FUNCTION(execShowFeedbackUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->ShowFeedbackUI(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowGamerCardUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->ShowGamerCardUI(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowMessagesUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowMessagesUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowAchievementsUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowAchievementsUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowInviteUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR_OPTX(InviteText,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=this->ShowInviteUI(LocalUserNum,InviteText);
    }
    DECLARE_FUNCTION(execShowContentMarketplaceUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(CategoryMask,-1);
        P_GET_INT_OPTX(OfferId,0);
        P_FINISH;
        *(UBOOL*)Result=this->ShowContentMarketplaceUI(LocalUserNum,CategoryMask,OfferId);
    }
    DECLARE_FUNCTION(execShowMembershipMarketplaceUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowMembershipMarketplaceUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execUnlockAchievement)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(AchievementId);
        P_GET_FLOAT_OPTX(PercentComplete,100.000000);
        P_FINISH;
        *(UBOOL*)Result=this->UnlockAchievement(LocalUserNum,AchievementId,PercentComplete);
    }
    DECLARE_FUNCTION(execShowFriendsUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowFriendsUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowFriendsInviteUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=this->ShowFriendsInviteUI(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowPlayersUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=this->ShowPlayersUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execReadAchievements)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(TitleId,0);
        P_GET_UBOOL_OPTX(bShouldReadText,TRUE);
        P_GET_UBOOL_OPTX(bShouldReadImages,FALSE);
        P_FINISH;
        *(UBOOL*)Result=this->ReadAchievements(LocalUserNum,TitleId,bShouldReadText,bShouldReadImages);
    }
    DECLARE_FUNCTION(execGetAchievements)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FAchievementDetails,Achievements);
        P_GET_INT_OPTX(TitleId,0);
        P_FINISH;
        *(BYTE*)Result=this->GetAchievements(LocalUserNum,Achievements,TitleId);
    }
    DECLARE_FUNCTION(execShowCustomPlayersUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FUniqueNetId,Players);
        P_GET_STR(Title);
        P_GET_STR(Description);
        P_FINISH;
        *(UBOOL*)Result=this->ShowCustomPlayersUI(LocalUserNum,Players,Title,Description);
    }
    DECLARE_FUNCTION(execReadOnlineAvatar)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerNetId);
        P_GET_INT(Size);
        P_GET_DELEGATE(ReadOnlineAvatarCompleteDelegate);
        P_FINISH;
        this->ReadOnlineAvatar(PlayerNetId,Size,ReadOnlineAvatarCompleteDelegate);
    }
    DECLARE_FUNCTION(execGetNumberOfCurrentPlayers)
    {
        P_FINISH;
        *(UBOOL*)Result=this->GetNumberOfCurrentPlayers();
    }
    DECLARE_FUNCTION(execGetSteamClanData)
    {
        P_GET_TARRAY_REF(struct FSteamPlayerClanData,Results);
        P_FINISH;
        this->GetSteamClanData(Results);
    }
    DECLARE_FUNCTION(execResetStats)
    {
        P_GET_UBOOL(bResetAchievements);
        P_FINISH;
        *(UBOOL*)Result=this->ResetStats(bResetAchievements);
    }
    DECLARE_FUNCTION(execCreateLeaderboard)
    {
        P_GET_STR(LeaderboardName);
        P_GET_BYTE(SortType);
        P_GET_BYTE(DisplayFormat);
        P_FINISH;
        *(UBOOL*)Result=this->CreateLeaderboard(LeaderboardName,SortType,DisplayFormat);
    }
    DECLARE_FUNCTION(execDisplayAchievementProgress)
    {
        P_GET_INT(AchievementId);
        P_GET_INT(ProgressCount);
        P_GET_INT(MaxProgress);
        P_FINISH;
        *(UBOOL*)Result=this->DisplayAchievementProgress(AchievementId,ProgressCount,MaxProgress);
    }
    DECLARE_FUNCTION(execUniqueNetIdToPlayerName)
    {
        P_GET_STRUCT_REF(struct FUniqueNetId,Uid);
        P_FINISH;
        *(FString*)Result=this->UniqueNetIdToPlayerName(Uid);
    }
    DECLARE_FUNCTION(execShowProfileUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR_OPTX(SubURL,TEXT(""));
        P_GET_STRUCT_OPTX(struct FUniqueNetId,PlayerUID,FUniqueNetId(EC_EventParm));
        P_FINISH;
        *(UBOOL*)Result=this->ShowProfileUI(LocalUserNum,SubURL,PlayerUID);
    }
    DECLARE_FUNCTION(execNotifyVOIPPlaybackFinished)
    {
        P_GET_OBJECT(UAudioComponent,VOIPAudioComponent);
        P_FINISH;
        this->NotifyVOIPPlaybackFinished(VOIPAudioComponent);
    }
    DECLARE_FUNCTION(execUniqueNetIdToInt64)
    {
        P_GET_STRUCT_REF(struct FUniqueNetId,Uid);
        P_FINISH;
        *(FString*)Result=this->UniqueNetIdToInt64(Uid);
    }
    DECLARE_FUNCTION(execInt64ToUniqueNetId)
    {
        P_GET_STR(UIDString);
        P_GET_STRUCT_REF(struct FUniqueNetId,OutUID);
        P_FINISH;
        *(UBOOL*)Result=this->Int64ToUniqueNetId(UIDString,OutUID);
    }
    DECLARE_FUNCTION(execGetCommandlineJoinURL)
    {
        P_GET_UBOOL(bMarkAsJoined);
        P_GET_STR_REF(ServerURL);
        P_GET_STR_REF(ServerUID);
        P_FINISH;
        *(UBOOL*)Result=this->GetCommandlineJoinURL(bMarkAsJoined,ServerURL,ServerUID);
    }
    DECLARE_FUNCTION(execGetFriendJoinURL)
    {
        P_GET_STRUCT(struct FUniqueNetId,FriendUID);
        P_GET_STR_REF(ServerURL);
        P_GET_STR_REF(ServerUID);
        P_FINISH;
        *(UBOOL*)Result=this->GetFriendJoinURL(FriendUID,ServerURL,ServerUID);
    }
    DECLARE_FUNCTION(execWriteUserFileInternal)
    {
        P_GET_STR(UserId);
        P_GET_STR(Filename);
        P_GET_TARRAY_REF(BYTE,FileContents);
        P_FINISH;
        *(UBOOL*)Result=this->WriteUserFileInternal(UserId,Filename,FileContents);
    }
    DECLARE_FUNCTION(execGetFileContents)
    {
        P_GET_STR(UserId);
        P_GET_STR(Filename);
        P_GET_TARRAY_REF(BYTE,FileContents);
        P_FINISH;
        *(UBOOL*)Result=this->GetFileContents(UserId,Filename,FileContents);
    }
    DECLARE_FUNCTION(execClearFiles)
    {
        P_GET_STR(UserId);
        P_FINISH;
        *(UBOOL*)Result=this->ClearFiles(UserId);
    }
    DECLARE_FUNCTION(execClearFile)
    {
        P_GET_STR(UserId);
        P_GET_STR(Filename);
        P_FINISH;
        *(UBOOL*)Result=this->ClearFile(UserId,Filename);
    }
    DECLARE_FUNCTION(execEnumerateUserFiles)
    {
        P_GET_STR(UserId);
        P_FINISH;
        this->EnumerateUserFiles(UserId);
    }
    DECLARE_FUNCTION(execGetUserFileList)
    {
        P_GET_STR(UserId);
        P_GET_TARRAY_REF(struct FEmsFile,UserFiles);
        P_FINISH;
        this->GetUserFileList(UserId,UserFiles);
    }
    DECLARE_FUNCTION(execReadUserFile)
    {
        P_GET_STR(UserId);
        P_GET_STR(Filename);
        P_FINISH;
        *(UBOOL*)Result=this->ReadUserFile(UserId,Filename);
    }
    DECLARE_FUNCTION(execWriteUserFile)
    {
        P_GET_STR(UserId);
        P_GET_STR(Filename);
        P_GET_TARRAY_REF(BYTE,FileContents);
        P_FINISH;
        *(UBOOL*)Result=this->WriteUserFile(UserId,Filename,FileContents);
    }
    DECLARE_FUNCTION(execDeleteUserFile)
    {
        P_GET_STR(UserId);
        P_GET_STR(Filename);
        P_GET_UBOOL(bShouldCloudDelete);
        P_GET_UBOOL(bShouldLocallyDelete);
        P_FINISH;
        *(UBOOL*)Result=this->DeleteUserFile(UserId,Filename,bShouldCloudDelete,bShouldLocallyDelete);
    }
    DECLARE_FUNCTION(execGetSharedFileContents)
    {
        P_GET_STR(SharedHandle);
        P_GET_TARRAY_REF(BYTE,FileContents);
        P_FINISH;
        *(UBOOL*)Result=this->GetSharedFileContents(SharedHandle,FileContents);
    }
    DECLARE_FUNCTION(execClearSharedFiles)
    {
        P_FINISH;
        *(UBOOL*)Result=this->ClearSharedFiles();
    }
    DECLARE_FUNCTION(execClearSharedFile)
    {
        P_GET_STR(SharedHandle);
        P_FINISH;
        *(UBOOL*)Result=this->ClearSharedFile(SharedHandle);
    }
    DECLARE_FUNCTION(execReadSharedFile)
    {
        P_GET_STR(SharedHandle);
        P_FINISH;
        *(UBOOL*)Result=this->ReadSharedFile(SharedHandle);
    }
    DECLARE_FUNCTION(execWriteSharedFile)
    {
        P_GET_STR(UserId);
        P_GET_STR(Filename);
        P_GET_TARRAY_REF(BYTE,Contents);
        P_FINISH;
        *(UBOOL*)Result=this->WriteSharedFile(UserId,Filename,Contents);
    }
    void delegateOnWriteSharedFileComplete(UBOOL bWasSuccessful,const FString& UserId,const FString& Filename,const FString& SharedHandle)
    {
        OnlineSubsystemSteamworks_eventOnWriteSharedFileComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.UserId=UserId;
        Parms.Filename=Filename;
        Parms.SharedHandle=SharedHandle;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnWriteSharedFileComplete,&__OnWriteSharedFileComplete__Delegate,&Parms);
    }
    void delegateOnReadSharedFileComplete(UBOOL bWasSuccessful,const FString& SharedHandle)
    {
        OnlineSubsystemSteamworks_eventOnReadSharedFileComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.SharedHandle=SharedHandle;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadSharedFileComplete,&__OnReadSharedFileComplete__Delegate,&Parms);
    }
    void delegateOnDeleteUserFileComplete(UBOOL bWasSuccessful,const FString& UserId,const FString& Filename)
    {
        OnlineSubsystemSteamworks_eventOnDeleteUserFileComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.UserId=UserId;
        Parms.Filename=Filename;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnDeleteUserFileComplete,&__OnDeleteUserFileComplete__Delegate,&Parms);
    }
    void delegateOnWriteUserFileComplete(UBOOL bWasSuccessful,const FString& UserId,const FString& Filename)
    {
        OnlineSubsystemSteamworks_eventOnWriteUserFileComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.UserId=UserId;
        Parms.Filename=Filename;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnWriteUserFileComplete,&__OnWriteUserFileComplete__Delegate,&Parms);
    }
    void delegateOnReadUserFileComplete(UBOOL bWasSuccessful,const FString& UserId,const FString& Filename)
    {
        OnlineSubsystemSteamworks_eventOnReadUserFileComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.UserId=UserId;
        Parms.Filename=Filename;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadUserFileComplete,&__OnReadUserFileComplete__Delegate,&Parms);
    }
    void delegateOnEnumerateUserFilesComplete(UBOOL bWasSuccessful,const FString& UserId)
    {
        OnlineSubsystemSteamworks_eventOnEnumerateUserFilesComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.UserId=UserId;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnEnumerateUserFilesComplete,&__OnEnumerateUserFilesComplete__Delegate,&Parms);
    }
    void delegateOnReadCrossTitleProfileSettingsComplete(BYTE LocalUserNum,INT TitleId,UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnReadCrossTitleProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.TitleId=TitleId;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadCrossTitleProfileSettingsComplete,&__OnReadCrossTitleProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnGetNumberOfCurrentPlayersComplete(INT TotalPlayers)
    {
        OnlineSubsystemSteamworks_eventOnGetNumberOfCurrentPlayersComplete_Parms Parms(EC_EventParm);
        Parms.TotalPlayers=TotalPlayers;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnGetNumberOfCurrentPlayersComplete,&__OnGetNumberOfCurrentPlayersComplete__Delegate,&Parms);
    }
    void delegateOnReadOnlineAvatarComplete(const struct FUniqueNetId PlayerNetId,class UTexture2D* Avatar)
    {
        OnlineSubsystemSteamworks_eventOnReadOnlineAvatarComplete_Parms Parms(EC_EventParm);
        Parms.PlayerNetId=PlayerNetId;
        Parms.Avatar=Avatar;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadOnlineAvatarComplete,&__OnReadOnlineAvatarComplete__Delegate,&Parms);
    }
    void delegateOnReadAchievementsComplete(INT TitleId)
    {
        OnlineSubsystemSteamworks_eventOnReadAchievementsComplete_Parms Parms(EC_EventParm);
        Parms.TitleId=TitleId;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadAchievementsComplete,&__OnReadAchievementsComplete__Delegate,&Parms);
    }
    void delegateOnProfileDataChanged()
    {
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnProfileDataChanged,&__OnProfileDataChanged__Delegate,NULL);
    }
    void delegateOnUnlockAchievementComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnUnlockAchievementComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnUnlockAchievementComplete,&__OnUnlockAchievementComplete__Delegate,&Parms);
    }
    void delegateOnDeviceSelectionComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnDeviceSelectionComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnDeviceSelectionComplete,&__OnDeviceSelectionComplete__Delegate,&Parms);
    }
    void delegateOnRegisterHostStatGuidComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnRegisterHostStatGuidComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnRegisterHostStatGuidComplete,&__OnRegisterHostStatGuidComplete__Delegate,&Parms);
    }
    void delegateOnFriendMessageReceived(BYTE LocalUserNum,struct FUniqueNetId SendingPlayer,const FString& SendingNick,const FString& Message)
    {
        OnlineSubsystemSteamworks_eventOnFriendMessageReceived_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.SendingPlayer=SendingPlayer;
        Parms.SendingNick=SendingNick;
        Parms.Message=Message;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnFriendMessageReceived,&__OnFriendMessageReceived__Delegate,&Parms);
    }
    void delegateOnJoinFriendGameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnJoinFriendGameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnJoinFriendGameComplete,&__OnJoinFriendGameComplete__Delegate,&Parms);
    }
    void delegateOnReceivedGameInvite(BYTE LocalUserNum,const FString& InviterName)
    {
        OnlineSubsystemSteamworks_eventOnReceivedGameInvite_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.InviterName=InviterName;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReceivedGameInvite,&__OnReceivedGameInvite__Delegate,&Parms);
    }
    void delegateOnFriendInviteReceived(BYTE LocalUserNum,struct FUniqueNetId RequestingPlayer,const FString& RequestingNick,const FString& Message)
    {
        OnlineSubsystemSteamworks_eventOnFriendInviteReceived_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.RequestingPlayer=RequestingPlayer;
        Parms.RequestingNick=RequestingNick;
        Parms.Message=Message;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnFriendInviteReceived,&__OnFriendInviteReceived__Delegate,&Parms);
    }
    void delegateOnAddFriendByNameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnAddFriendByNameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnAddFriendByNameComplete,&__OnAddFriendByNameComplete__Delegate,&Parms);
    }
    void delegateOnKeyboardInputComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnKeyboardInputComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnKeyboardInputComplete,&__OnKeyboardInputComplete__Delegate,&Parms);
    }
    void delegateOnReadTitleFileComplete(UBOOL bWasSuccessful,const FString& Filename)
    {
        OnlineSubsystemSteamworks_eventOnReadTitleFileComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.Filename=Filename;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadTitleFileComplete,&__OnReadTitleFileComplete__Delegate,&Parms);
    }
    void delegateOnStorageDeviceChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnStorageDeviceChange,&__OnStorageDeviceChange__Delegate,NULL);
    }
    void delegateOnConnectionStatusChange(BYTE ConnectionStatus)
    {
        OnlineSubsystemSteamworks_eventOnConnectionStatusChange_Parms Parms(EC_EventParm);
        Parms.ConnectionStatus=ConnectionStatus;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnConnectionStatusChange,&__OnConnectionStatusChange__Delegate,&Parms);
    }
    void delegateOnControllerChange(INT ControllerId,UBOOL bIsConnected)
    {
        OnlineSubsystemSteamworks_eventOnControllerChange_Parms Parms(EC_EventParm);
        Parms.ControllerId=ControllerId;
        Parms.bIsConnected=bIsConnected ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnControllerChange,&__OnControllerChange__Delegate,&Parms);
    }
    void delegateOnExternalUIChange(UBOOL bIsOpening)
    {
        OnlineSubsystemSteamworks_eventOnExternalUIChange_Parms Parms(EC_EventParm);
        Parms.bIsOpening=bIsOpening ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnExternalUIChange,&__OnExternalUIChange__Delegate,&Parms);
    }
    void delegateOnLinkStatusChange(UBOOL bIsConnected)
    {
        OnlineSubsystemSteamworks_eventOnLinkStatusChange_Parms Parms(EC_EventParm);
        Parms.bIsConnected=bIsConnected ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnLinkStatusChange,&__OnLinkStatusChange__Delegate,&Parms);
    }
    void delegateOnFlushOnlineStatsComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnFlushOnlineStatsComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnFlushOnlineStatsComplete,&__OnFlushOnlineStatsComplete__Delegate,&Parms);
    }
    void delegateOnReadOnlineStatsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnReadOnlineStatsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadOnlineStatsComplete,&__OnReadOnlineStatsComplete__Delegate,&Parms);
    }
    void delegateOnRecognitionComplete()
    {
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnRecognitionComplete,&__OnRecognitionComplete__Delegate,NULL);
    }
    void delegateOnPlayerTalkingStateChange(struct FUniqueNetId Player,UBOOL bIsTalking)
    {
        OnlineSubsystemSteamworks_eventOnPlayerTalkingStateChange_Parms Parms(EC_EventParm);
        Parms.Player=Player;
        Parms.bIsTalking=bIsTalking ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnPlayerTalkingStateChange,&__OnPlayerTalkingStateChange__Delegate,&Parms);
    }
    void delegateOnReadFriendsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnReadFriendsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadFriendsComplete,&__OnReadFriendsComplete__Delegate,&Parms);
    }
    void delegateOnWritePlayerStorageComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnWritePlayerStorageComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnWritePlayerStorageComplete,&__OnWritePlayerStorageComplete__Delegate,&Parms);
    }
    void delegateOnReadPlayerStorageForNetIdComplete(struct FUniqueNetId NetId,UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnReadPlayerStorageForNetIdComplete_Parms Parms(EC_EventParm);
        Parms.NetId=NetId;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadPlayerStorageForNetIdComplete,&__OnReadPlayerStorageForNetIdComplete__Delegate,&Parms);
    }
    void delegateOnReadPlayerStorageComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnReadPlayerStorageComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadPlayerStorageComplete,&__OnReadPlayerStorageComplete__Delegate,&Parms);
    }
    void delegateOnWriteProfileSettingsComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnWriteProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnWriteProfileSettingsComplete,&__OnWriteProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnReadProfileSettingsComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnReadProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnReadProfileSettingsComplete,&__OnReadProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnLoginStatusChange(BYTE NewStatus,struct FUniqueNetId NewId)
    {
        OnlineSubsystemSteamworks_eventOnLoginStatusChange_Parms Parms(EC_EventParm);
        Parms.NewStatus=NewStatus;
        Parms.NewId=NewId;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnLoginStatusChange,&__OnLoginStatusChange__Delegate,&Parms);
    }
    void delegateOnLogoutCompleted(UBOOL bWasSuccessful)
    {
        OnlineSubsystemSteamworks_eventOnLogoutCompleted_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnLogoutCompleted,&__OnLogoutCompleted__Delegate,&Parms);
    }
    void delegateOnLoginFailed(BYTE LocalUserNum,BYTE ErrorCode)
    {
        OnlineSubsystemSteamworks_eventOnLoginFailed_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.ErrorCode=ErrorCode;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnLoginFailed,&__OnLoginFailed__Delegate,&Parms);
    }
    void delegateOnFriendsChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnFriendsChange,&__OnFriendsChange__Delegate,NULL);
    }
    void delegateOnMutingChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnMutingChange,&__OnMutingChange__Delegate,NULL);
    }
    void delegateOnLoginCancelled()
    {
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnLoginCancelled,&__OnLoginCancelled__Delegate,NULL);
    }
    void delegateOnLoginChange(BYTE LocalUserNum)
    {
        OnlineSubsystemSteamworks_eventOnLoginChange_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        ProcessDelegate(ONLINESUBSYSTEMSTEAMWORKS_OnLoginChange,&__OnLoginChange__Delegate,&Parms);
    }
    DECLARE_CLASS(UOnlineSubsystemSteamworks,UOnlineSubsystemCommonImpl,0|CLASS_Config,OnlineSubsystemSteamworks)
    #include "UOnlineSubsystemSteamworks.h"
};

#undef DECLARE_CLASS
#undef DECLARE_CASTED_CLASS
#undef DECLARE_ABSTRACT_CLASS
#undef DECLARE_ABSTRACT_CASTED_CLASS
#endif // !INCLUDED_ONLINESUBSYSTEMSTEAMWORKS_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UOnlineAuthInterfaceSteamworks,-1,execGetServerAddr);
AUTOGENERATE_FUNCTION(UOnlineAuthInterfaceSteamworks,-1,execGetServerUniqueId);
AUTOGENERATE_FUNCTION(UOnlineAuthInterfaceSteamworks,-1,execVerifyServerAuthSession);
AUTOGENERATE_FUNCTION(UOnlineAuthInterfaceSteamworks,-1,execCreateServerAuthSession);
AUTOGENERATE_FUNCTION(UOnlineAuthInterfaceSteamworks,-1,execVerifyClientAuthSession);
AUTOGENERATE_FUNCTION(UOnlineAuthInterfaceSteamworks,-1,execCreateClientAuthSession);
AUTOGENERATE_FUNCTION(UOnlineAuthInterfaceSteamworks,-1,execSendServerAuthRequest);
AUTOGENERATE_FUNCTION(UOnlineAuthInterfaceSteamworks,-1,execSendClientAuthRequest);
AUTOGENERATE_FUNCTION(UOnlineGameInterfaceSteamworks,-1,execUnregisterPlayer);
AUTOGENERATE_FUNCTION(UOnlineGameInterfaceSteamworks,-1,execRegisterPlayer);
AUTOGENERATE_FUNCTION(UOnlineGameInterfaceSteamworks,-1,execAcceptGameInvite);
AUTOGENERATE_FUNCTION(UOnlineGameInterfaceSteamworks,-1,execUpdateOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execWriteSharedFile);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadSharedFile);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execClearSharedFile);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execClearSharedFiles);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetSharedFileContents);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execDeleteUserFile);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execWriteUserFile);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadUserFile);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetUserFileList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execEnumerateUserFiles);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execClearFile);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execClearFiles);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetFileContents);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execWriteUserFileInternal);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetFriendJoinURL);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetCommandlineJoinURL);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execInt64ToUniqueNetId);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execUniqueNetIdToInt64);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execNotifyVOIPPlaybackFinished);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowProfileUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execUniqueNetIdToPlayerName);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execDisplayAchievementProgress);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execCreateLeaderboard);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execResetStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetSteamClanData);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetNumberOfCurrentPlayers);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadOnlineAvatar);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowCustomPlayersUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetAchievements);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadAchievements);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowPlayersUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowFriendsInviteUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowFriendsUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execUnlockAchievement);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowMembershipMarketplaceUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowContentMarketplaceUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowInviteUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowAchievementsUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowMessagesUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowGamerCardUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execShowFeedbackUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execJoinFriendGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSendGameInviteToFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSendGameInviteToFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSendMessageToFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execDenyFriendInvite);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execAcceptFriendInvite);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execRemoveFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execAddFriendByName);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execAddFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSetOnlineStatus);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetTitleFileContents);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadTitleFile);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetNATType);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSetNetworkNotificationPosition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execHasLinkConnection);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execWriteOnlinePlayerScores);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execFlushOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execWriteOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execFreeStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadOnlineStatsByRankAroundPlayer);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadOnlineStatsByRank);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadOnlineStatsForFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSetSpeechRecognitionObject);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSelectVocabulary);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetRecognitionResults);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execStopSpeechRecognition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execStartSpeechRecognition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execStopNetworkedVoice);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execStartNetworkedVoice);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execUnmuteRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execMuteRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execSetRemoteTalkerPriority);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execIsHeadsetPresent);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execIsRemotePlayerTalking);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execIsLocalPlayerTalking);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execUnregisterRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execRegisterRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execUnregisterLocalTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execRegisterLocalTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetFriendsList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadFriendsList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execWriteProfileSettings);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execReadProfileSettings);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execAreAnyFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execIsFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execCanCommunicate);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execCanPlayOnline);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execGetLoginStatus);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execAutoLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execExit);
AUTOGENERATE_FUNCTION(UOnlineSubsystemSteamworks,-1,execInit);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef ONLINESUBSYSTEMSTEAMWORKS_NATIVE_DEFS
#define ONLINESUBSYSTEMSTEAMWORKS_NATIVE_DEFS

#define AUTO_INITIALIZE_REGISTRANTS_ONLINESUBSYSTEMSTEAMWORKS \
	UOnlineAuthInterfaceSteamworks::StaticClass(); \
	GNativeLookupFuncs.Set(FName("OnlineAuthInterfaceSteamworks"), GOnlineSubsystemSteamworksUOnlineAuthInterfaceSteamworksNatives); \
	UOnlineGameInterfaceSteamworks::StaticClass(); \
	GNativeLookupFuncs.Set(FName("OnlineGameInterfaceSteamworks"), GOnlineSubsystemSteamworksUOnlineGameInterfaceSteamworksNatives); \
	UOnlineLobbyInterfaceSteamworks::StaticClass(); \
	UOnlineSubsystemSteamworks::StaticClass(); \
	GNativeLookupFuncs.Set(FName("OnlineSubsystemSteamworks"), GOnlineSubsystemSteamworksUOnlineSubsystemSteamworksNatives); \

#endif // ONLINESUBSYSTEMSTEAMWORKS_NATIVE_DEFS

#ifdef NATIVES_ONLY
FNativeFunctionLookup GOnlineSubsystemSteamworksUOnlineAuthInterfaceSteamworksNatives[] = 
{ 
	MAP_NATIVE(UOnlineAuthInterfaceSteamworks, execGetServerAddr)
	MAP_NATIVE(UOnlineAuthInterfaceSteamworks, execGetServerUniqueId)
	MAP_NATIVE(UOnlineAuthInterfaceSteamworks, execVerifyServerAuthSession)
	MAP_NATIVE(UOnlineAuthInterfaceSteamworks, execCreateServerAuthSession)
	MAP_NATIVE(UOnlineAuthInterfaceSteamworks, execVerifyClientAuthSession)
	MAP_NATIVE(UOnlineAuthInterfaceSteamworks, execCreateClientAuthSession)
	MAP_NATIVE(UOnlineAuthInterfaceSteamworks, execSendServerAuthRequest)
	MAP_NATIVE(UOnlineAuthInterfaceSteamworks, execSendClientAuthRequest)
	{NULL, NULL}
};

FNativeFunctionLookup GOnlineSubsystemSteamworksUOnlineGameInterfaceSteamworksNatives[] = 
{ 
	MAP_NATIVE(UOnlineGameInterfaceSteamworks, execUnregisterPlayer)
	MAP_NATIVE(UOnlineGameInterfaceSteamworks, execRegisterPlayer)
	MAP_NATIVE(UOnlineGameInterfaceSteamworks, execAcceptGameInvite)
	MAP_NATIVE(UOnlineGameInterfaceSteamworks, execUpdateOnlineGame)
	{NULL, NULL}
};

FNativeFunctionLookup GOnlineSubsystemSteamworksUOnlineSubsystemSteamworksNatives[] = 
{ 
	MAP_NATIVE(UOnlineSubsystemSteamworks, execWriteSharedFile)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadSharedFile)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execClearSharedFile)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execClearSharedFiles)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetSharedFileContents)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execDeleteUserFile)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execWriteUserFile)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadUserFile)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetUserFileList)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execEnumerateUserFiles)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execClearFile)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execClearFiles)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetFileContents)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execWriteUserFileInternal)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetFriendJoinURL)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetCommandlineJoinURL)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execInt64ToUniqueNetId)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execUniqueNetIdToInt64)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execNotifyVOIPPlaybackFinished)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowProfileUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execUniqueNetIdToPlayerName)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execDisplayAchievementProgress)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execCreateLeaderboard)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execResetStats)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetSteamClanData)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetNumberOfCurrentPlayers)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadOnlineAvatar)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowCustomPlayersUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetAchievements)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadAchievements)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowPlayersUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowFriendsInviteUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowFriendsUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execUnlockAchievement)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowMembershipMarketplaceUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowContentMarketplaceUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowInviteUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowAchievementsUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowMessagesUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowGamerCardUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execShowFeedbackUI)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execJoinFriendGame)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSendGameInviteToFriends)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSendGameInviteToFriend)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSendMessageToFriend)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execDenyFriendInvite)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execAcceptFriendInvite)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execRemoveFriend)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execAddFriendByName)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execAddFriend)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSetOnlineStatus)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetTitleFileContents)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadTitleFile)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetNATType)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSetNetworkNotificationPosition)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execHasLinkConnection)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execWriteOnlinePlayerScores)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execFlushOnlineStats)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execWriteOnlineStats)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execFreeStats)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadOnlineStatsByRankAroundPlayer)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadOnlineStatsByRank)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadOnlineStatsForFriends)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadOnlineStats)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSetSpeechRecognitionObject)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSelectVocabulary)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetRecognitionResults)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execStopSpeechRecognition)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execStartSpeechRecognition)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execStopNetworkedVoice)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execStartNetworkedVoice)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execUnmuteRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execMuteRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execSetRemoteTalkerPriority)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execIsHeadsetPresent)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execIsRemotePlayerTalking)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execIsLocalPlayerTalking)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execUnregisterRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execRegisterRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execUnregisterLocalTalker)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execRegisterLocalTalker)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetFriendsList)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadFriendsList)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execWriteProfileSettings)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execReadProfileSettings)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execAreAnyFriends)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execIsFriend)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execCanCommunicate)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execCanPlayOnline)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execGetLoginStatus)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execAutoLogin)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execLogin)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execExit)
	MAP_NATIVE(UOnlineSubsystemSteamworks, execInit)
	{NULL, NULL}
};

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE_NODIE(UOnlineAuthInterfaceSteamworks)
VERIFY_CLASS_OFFSET_NODIE(UOnlineGameInterfaceSteamworks,OnlineGameInterfaceSteamworks,ServerBrowserSearchQuery)
VERIFY_CLASS_OFFSET_NODIE(UOnlineGameInterfaceSteamworks,OnlineGameInterfaceSteamworks,__OnUnregisterPlayerComplete__Delegate)
VERIFY_CLASS_SIZE_NODIE(UOnlineGameInterfaceSteamworks)
VERIFY_CLASS_SIZE_NODIE(UOnlineLobbyInterfaceSteamworks)
VERIFY_CLASS_OFFSET_NODIE(UOnlineSubsystemSteamworks,OnlineSubsystemSteamworks,TotalGSStatsStoresPending)
VERIFY_CLASS_OFFSET_NODIE(UOnlineSubsystemSteamworks,OnlineSubsystemSteamworks,__OnWriteSharedFileComplete__Delegate)
VERIFY_CLASS_SIZE_NODIE(UOnlineSubsystemSteamworks)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
