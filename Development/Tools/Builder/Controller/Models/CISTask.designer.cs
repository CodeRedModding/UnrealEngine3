#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Controller.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Builder")]
	public partial class CISTaskDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCISJobState(CISJobState instance);
    partial void UpdateCISJobState(CISJobState instance);
    partial void DeleteCISJobState(CISJobState instance);
    partial void InsertCISTask(CISTask instance);
    partial void UpdateCISTask(CISTask instance);
    partial void DeleteCISTask(CISTask instance);
    #endregion
		
		public CISTaskDataContext() : 
				base(global::Controller.Properties.Settings.Default.BuilderConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CISTaskDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CISTaskDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CISTaskDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CISTaskDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CISJobState> CISJobStates
		{
			get
			{
				return this.GetTable<CISJobState>();
			}
		}
		
		public System.Data.Linq.Table<CISTask> CISTasks
		{
			get
			{
				return this.GetTable<CISTask>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CISJobStates")]
	public partial class CISJobState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ChangelistID;
		
		private int _CISTaskID;
		
		private byte _JobState;
		
		private string _Error;
		
		private EntityRef<CISTask> _CISTask;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnChangelistIDChanging(int value);
    partial void OnChangelistIDChanged();
    partial void OnCISTaskIDChanging(int value);
    partial void OnCISTaskIDChanged();
    partial void OnJobStateChanging(byte value);
    partial void OnJobStateChanged();
    partial void OnErrorChanging(string value);
    partial void OnErrorChanged();
    #endregion
		
		public CISJobState()
		{
			this._CISTask = default(EntityRef<CISTask>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangelistID", DbType="Int NOT NULL")]
		public int ChangelistID
		{
			get
			{
				return this._ChangelistID;
			}
			set
			{
				if ((this._ChangelistID != value))
				{
					this.OnChangelistIDChanging(value);
					this.SendPropertyChanging();
					this._ChangelistID = value;
					this.SendPropertyChanged("ChangelistID");
					this.OnChangelistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CISTaskID", DbType="Int NOT NULL")]
		public int CISTaskID
		{
			get
			{
				return this._CISTaskID;
			}
			set
			{
				if ((this._CISTaskID != value))
				{
					if (this._CISTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCISTaskIDChanging(value);
					this.SendPropertyChanging();
					this._CISTaskID = value;
					this.SendPropertyChanged("CISTaskID");
					this.OnCISTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobState", DbType="TinyInt NOT NULL")]
		public byte JobState
		{
			get
			{
				return this._JobState;
			}
			set
			{
				if ((this._JobState != value))
				{
					this.OnJobStateChanging(value);
					this.SendPropertyChanging();
					this._JobState = value;
					this.SendPropertyChanged("JobState");
					this.OnJobStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Error", DbType="VarChar(MAX)")]
		public string Error
		{
			get
			{
				return this._Error;
			}
			set
			{
				if ((this._Error != value))
				{
					this.OnErrorChanging(value);
					this.SendPropertyChanging();
					this._Error = value;
					this.SendPropertyChanged("Error");
					this.OnErrorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CISTask_CISJobState", Storage="_CISTask", ThisKey="CISTaskID", OtherKey="ID", IsForeignKey=true)]
		public CISTask CISTask
		{
			get
			{
				return this._CISTask.Entity;
			}
			set
			{
				CISTask previousValue = this._CISTask.Entity;
				if (((previousValue != value) 
							|| (this._CISTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CISTask.Entity = null;
						previousValue.CISJobStates.Remove(this);
					}
					this._CISTask.Entity = value;
					if ((value != null))
					{
						value.CISJobStates.Add(this);
						this._CISTaskID = value.ID;
					}
					else
					{
						this._CISTaskID = default(int);
					}
					this.SendPropertyChanged("CISTask");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CISTasks")]
	public partial class CISTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _BranchConfigID;
		
		private int _Mask;
		
		private int _LastAttempted;
		
		private int _LastGood;
		
		private int _LastFail;
		
		private bool _GameSpecific;
		
		private bool _PlatformSpecific;
		
		private bool _Remote;
		
		private bool _CompileAllowed;
		
		private string _Folders;
		
		private string _DependentPlatforms;
		
		private string _AlternateFolders;
		
		private EntitySet<CISJobState> _CISJobStates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBranchConfigIDChanging(int value);
    partial void OnBranchConfigIDChanged();
    partial void OnMaskChanging(int value);
    partial void OnMaskChanged();
    partial void OnLastAttemptedChanging(int value);
    partial void OnLastAttemptedChanged();
    partial void OnLastGoodChanging(int value);
    partial void OnLastGoodChanged();
    partial void OnLastFailChanging(int value);
    partial void OnLastFailChanged();
    partial void OnGameSpecificChanging(bool value);
    partial void OnGameSpecificChanged();
    partial void OnPlatformSpecificChanging(bool value);
    partial void OnPlatformSpecificChanged();
    partial void OnRemoteChanging(bool value);
    partial void OnRemoteChanged();
    partial void OnCompileAllowedChanging(bool value);
    partial void OnCompileAllowedChanged();
    partial void OnFoldersChanging(string value);
    partial void OnFoldersChanged();
    partial void OnDependentPlatformsChanging(string value);
    partial void OnDependentPlatformsChanged();
    partial void OnAlternateFoldersChanging(string value);
    partial void OnAlternateFoldersChanged();
    #endregion
		
		public CISTask()
		{
			this._CISJobStates = new EntitySet<CISJobState>(new Action<CISJobState>(this.attach_CISJobStates), new Action<CISJobState>(this.detach_CISJobStates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchConfigID", DbType="Int NOT NULL")]
		public int BranchConfigID
		{
			get
			{
				return this._BranchConfigID;
			}
			set
			{
				if ((this._BranchConfigID != value))
				{
					this.OnBranchConfigIDChanging(value);
					this.SendPropertyChanging();
					this._BranchConfigID = value;
					this.SendPropertyChanged("BranchConfigID");
					this.OnBranchConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mask", DbType="Int NOT NULL")]
		public int Mask
		{
			get
			{
				return this._Mask;
			}
			set
			{
				if ((this._Mask != value))
				{
					this.OnMaskChanging(value);
					this.SendPropertyChanging();
					this._Mask = value;
					this.SendPropertyChanged("Mask");
					this.OnMaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastAttempted", DbType="Int NOT NULL")]
		public int LastAttempted
		{
			get
			{
				return this._LastAttempted;
			}
			set
			{
				if ((this._LastAttempted != value))
				{
					this.OnLastAttemptedChanging(value);
					this.SendPropertyChanging();
					this._LastAttempted = value;
					this.SendPropertyChanged("LastAttempted");
					this.OnLastAttemptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastGood", DbType="Int NOT NULL")]
		public int LastGood
		{
			get
			{
				return this._LastGood;
			}
			set
			{
				if ((this._LastGood != value))
				{
					this.OnLastGoodChanging(value);
					this.SendPropertyChanging();
					this._LastGood = value;
					this.SendPropertyChanged("LastGood");
					this.OnLastGoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastFail", DbType="Int NOT NULL")]
		public int LastFail
		{
			get
			{
				return this._LastFail;
			}
			set
			{
				if ((this._LastFail != value))
				{
					this.OnLastFailChanging(value);
					this.SendPropertyChanging();
					this._LastFail = value;
					this.SendPropertyChanged("LastFail");
					this.OnLastFailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameSpecific", DbType="Bit NOT NULL")]
		public bool GameSpecific
		{
			get
			{
				return this._GameSpecific;
			}
			set
			{
				if ((this._GameSpecific != value))
				{
					this.OnGameSpecificChanging(value);
					this.SendPropertyChanging();
					this._GameSpecific = value;
					this.SendPropertyChanged("GameSpecific");
					this.OnGameSpecificChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlatformSpecific", DbType="Bit NOT NULL")]
		public bool PlatformSpecific
		{
			get
			{
				return this._PlatformSpecific;
			}
			set
			{
				if ((this._PlatformSpecific != value))
				{
					this.OnPlatformSpecificChanging(value);
					this.SendPropertyChanging();
					this._PlatformSpecific = value;
					this.SendPropertyChanged("PlatformSpecific");
					this.OnPlatformSpecificChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remote", DbType="Bit NOT NULL")]
		public bool Remote
		{
			get
			{
				return this._Remote;
			}
			set
			{
				if ((this._Remote != value))
				{
					this.OnRemoteChanging(value);
					this.SendPropertyChanging();
					this._Remote = value;
					this.SendPropertyChanged("Remote");
					this.OnRemoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompileAllowed", DbType="Bit NOT NULL")]
		public bool CompileAllowed
		{
			get
			{
				return this._CompileAllowed;
			}
			set
			{
				if ((this._CompileAllowed != value))
				{
					this.OnCompileAllowedChanging(value);
					this.SendPropertyChanging();
					this._CompileAllowed = value;
					this.SendPropertyChanged("CompileAllowed");
					this.OnCompileAllowedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Folders", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Folders
		{
			get
			{
				return this._Folders;
			}
			set
			{
				if ((this._Folders != value))
				{
					this.OnFoldersChanging(value);
					this.SendPropertyChanging();
					this._Folders = value;
					this.SendPropertyChanged("Folders");
					this.OnFoldersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependentPlatforms", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string DependentPlatforms
		{
			get
			{
				return this._DependentPlatforms;
			}
			set
			{
				if ((this._DependentPlatforms != value))
				{
					this.OnDependentPlatformsChanging(value);
					this.SendPropertyChanging();
					this._DependentPlatforms = value;
					this.SendPropertyChanged("DependentPlatforms");
					this.OnDependentPlatformsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlternateFolders", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AlternateFolders
		{
			get
			{
				return this._AlternateFolders;
			}
			set
			{
				if ((this._AlternateFolders != value))
				{
					this.OnAlternateFoldersChanging(value);
					this.SendPropertyChanging();
					this._AlternateFolders = value;
					this.SendPropertyChanged("AlternateFolders");
					this.OnAlternateFoldersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CISTask_CISJobState", Storage="_CISJobStates", ThisKey="ID", OtherKey="CISTaskID")]
		public EntitySet<CISJobState> CISJobStates
		{
			get
			{
				return this._CISJobStates;
			}
			set
			{
				this._CISJobStates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CISJobStates(CISJobState entity)
		{
			this.SendPropertyChanging();
			entity.CISTask = this;
		}
		
		private void detach_CISJobStates(CISJobState entity)
		{
			this.SendPropertyChanging();
			entity.CISTask = null;
		}
	}
}
#pragma warning restore 1591
