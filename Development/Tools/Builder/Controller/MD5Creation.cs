// Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace Controller
{
	public class MD5Creation
	{
		private BuildState Builder = null;
		private string SourceFolder = ".\\";
		private string WorkFolder = ".\\";
		private List<FileChecksum> FileChecksums = new List<FileChecksum>();

		private class FileChecksum
		{
			public string Filename;
			public string Checksum;

			public FileChecksum( string InName, string InSum )
			{
				Filename = InName;
				Checksum = InSum;
			}
		}

		public MD5Creation( BuildState InBuilder, string InSourceFolder )
		{
			Builder = InBuilder;
			SourceFolder = InSourceFolder;
		}

		private string CalculateMD5( FileInfo Info )
		{
			string HashCodeBuilder = "";
			try
			{
				MD5CryptoServiceProvider Hasher = new MD5CryptoServiceProvider();

				FileStream Stream = Info.Open( FileMode.Open, FileAccess.Read, FileShare.Read );
				byte[] HashData = Hasher.ComputeHash( Stream );
				Stream.Close();

				foreach( byte HashByte in HashData )
				{
					HashCodeBuilder += HashByte.ToString( "x2" );
				}
			}
			catch
			{
				return ( "" );
			}

			return( HashCodeBuilder );
		}

		public COMMANDS CalculateChecksums( string FilePattern )
		{
			// Calculate checksums
			try
			{
				// Get the combined folder name
				string FullPath = Path.Combine( SourceFolder, FilePattern );
				WorkFolder = Path.GetDirectoryName( FullPath );

				// Get the file pattern
				FilePattern = Path.GetFileName( FullPath );

				DirectoryInfo DirInfo = new DirectoryInfo( WorkFolder );
				foreach( FileInfo Info in DirInfo.GetFiles( FilePattern ) )
				{
					Builder.Write( " ... creating md5 for " + Info.FullName );
					string MD5Sum = CalculateMD5( Info );
					if( MD5Sum.Length == 32 )
					{
						FileChecksums.Add( new FileChecksum( Info.Name, MD5Sum ) );
					}
					else
					{
						return ( COMMANDS.MakeMD5 );
					}
				}

				return ( COMMANDS.None );
			}
			catch
			{
			}

			return ( COMMANDS.MakeMD5 );
		}

		public COMMANDS WriteChecksumFile( string ChecksumName )
		{
			// Dump to text file "checksums.md5"
			try
			{
				Builder.Write( " ... creating md5 checkum file " + ChecksumName + ".md5" );
				StreamWriter Writer = new StreamWriter( Path.Combine( WorkFolder, ChecksumName + ".md5" ) );
				Writer.WriteLine( "# MD5 checksums generated by Epic build process" );
				Writer.WriteLine( "# Generated " + DateTime.UtcNow.ToString() + " GMT" );
				Writer.WriteLine( "" );

				foreach( FileChecksum Checksum in FileChecksums )
				{
					Writer.WriteLine( Checksum.Checksum + " *" + Checksum.Filename );
				}

				Writer.Close();
				return ( COMMANDS.None );
			}
			catch
			{
			}

			return ( COMMANDS.MakeMD5 );
		}
	}
}
