dnl Process this file with autoconf to produce a configure script.
AC_REVISION($Id: configure.in,v 1.624.2.37 2003/01/01 18:23:13 GD Exp $)dnl

dnl ---------------------------------------------------------------------------
dnl
dnl Top-level configure.in for wxWindows by Robert Roebling, Phil Blecker,
dnl Vadim Zeitlin and Ron Lee
dnl
dnl This script is under the wxWindows licence.
dnl
dnl Version: $Id: configure.in,v 1.624.2.37 2003/01/01 18:23:13 GD Exp $
dnl ---------------------------------------------------------------------------

dnl ---------------------------------------------------------------------------
dnl initialization
dnl ---------------------------------------------------------------------------

dnl the file passed to AC_INIT should be specific to our package
AC_INIT([wx-config.in])

dnl sets build, host, target variables and the same with _alias
AC_CANONICAL_SYSTEM

dnl When making releases do:
dnl
dnl WX_RELEASE_NUMBER += 1
dnl
dnl ..and update WX_CURRENT, WX_RELEASE and WX_AGE according to the
dnl following rules:
dnl
dnl    If any changes have been made to the public interface, that is if any
dnl    exported class, method, global or global type has been added, removed
dnl    or changed in any way, then do:  WX_CURRENT += 1
dnl
dnl    If source changes have been made that *do not* alter the public
dnl    interface then do:  WX_REVISION += 1
dnl    If WX_CURRENT was incremented (as above) instead do:  WX_REVISION = 0
dnl
dnl    If any public interface was added, do:  WX_AGE += 1
dnl    If any public interface was removed (or altered in a way effectively
dnl    removing the previous definition), instead do:  WX_AGE = 0
dnl
dnl When the major or minor version numbers are incremented, all the above
dnl variables should be reset to 0.
dnl
dnl The resulting library name will be of the form:
dnl   libwx_$(TOOLKIT)-$(WX_RELEASE).so.$(WX_CURRENT).$(WX_REVISION).$(WX_AGE)

WX_MAJOR_VERSION_NUMBER=2
WX_MINOR_VERSION_NUMBER=4
WX_RELEASE_NUMBER=0

WX_VERSION=$WX_MAJOR_VERSION_NUMBER.$WX_MINOR_VERSION_NUMBER.$WX_RELEASE_NUMBER
WX_RELEASE=$WX_MAJOR_VERSION_NUMBER.$WX_MINOR_VERSION_NUMBER

WX_MSW_VERSION=$WX_MAJOR_VERSION_NUMBER$WX_MINOR_VERSION_NUMBER$WX_RELEASE_NUMBER

WX_CURRENT=0
WX_REVISION=0
WX_AGE=0


dnl ------------------------------------------------------------------------
dnl Check platform (host system)
dnl ------------------------------------------------------------------------

dnl assume Unix
USE_UNIX=1
USE_WIN32=0
USE_DOS=0
USE_BEOS=0
USE_MAC=0

USE_LINUX=
USE_SGI=
USE_HPUX=
USE_SYSV=
USE_SVR4=
USE_AIX=
USE_SUN=
USE_SOLARIS=
USE_SUNOS=
USE_ALPHA=
USE_OSF=
USE_BSD=
USE_DARWIN=
USE_FREEBSD=
USE_OPENBSD=
USE_NETBSD=
USE_VMS=
USE_ULTRIX=
USE_DATA_GENERAL=

dnl on some platforms xxx_r() functions are declared inside "#ifdef
dnl _REENTRANT" and it's easier to just define this symbol for these platforms
dnl than checking it during run-time
NEEDS_D_REENTRANT_FOR_R_FUNCS=0

dnl the list of all available toolkits
dnl
dnl update NUM_TOOLKITS calculation below when adding a new toolkit here!
ALL_TOOLKITS="GTK MAC MGL MICROWIN MOTIF MSW PM WINE X11"

dnl NB: these wxUSE_XXX constants have value of 0 or 1 unlike all the other ones
dnl     which are either yes or no
DEFAULT_wxUSE_GTK=0
DEFAULT_wxUSE_MAC=0
DEFAULT_wxUSE_MGL=0
DEFAULT_wxUSE_MICROWIN=0
DEFAULT_wxUSE_MOTIF=0
DEFAULT_wxUSE_MSW=0
DEFAULT_wxUSE_PM=0
DEFAULT_wxUSE_WINE=0
DEFAULT_wxUSE_X11=0

dnl these are the values which are really default for the given platform -
dnl they're not cached and are only used if no --with-toolkit was given *and*
dnl nothing was found in the cache
DEFAULT_DEFAULT_wxUSE_GTK=0
DEFAULT_DEFAULT_wxUSE_MAC=0
DEFAULT_DEFAULT_wxUSE_MGL=0
DEFAULT_DEFAULT_wxUSE_MICROWIN=0
DEFAULT_DEFAULT_wxUSE_MOTIF=0
DEFAULT_DEFAULT_wxUSE_MSW=0
DEFAULT_DEFAULT_wxUSE_PM=0
DEFAULT_DEFAULT_wxUSE_WINE=0
DEFAULT_DEFAULT_wxUSE_X11=0

PROGRAM_EXT=
SO_SUFFIX=so

dnl to support a new system, you need to add its canonical name (as determined
dnl by config.sub or specified by the configure command line) to this "case"
dnl and also define the shared library flags below - search for
dnl SHARED_LIB_SETUP to find the exact place
case "${host}" in
  *-hp-hpux* )
    USE_HPUX=1
    DEFAULT_DEFAULT_wxUSE_MOTIF=1
    NEEDS_D_REENTRANT_FOR_R_FUNCS=1
    SO_SUFFIX=sl
    AC_DEFINE(__HPUX__)
  ;;
  *-*-linux* )
    USE_LINUX=1
    AC_DEFINE(__LINUX__)
    TMP=`uname -m`
    if test "x$TMP" = "xalpha"; then
      USE_ALPHA=1
      AC_DEFINE(__ALPHA__)
    fi
    DEFAULT_DEFAULT_wxUSE_GTK=1
  ;;
  *-*-irix5* | *-*-irix6* )
    USE_SGI=1
    USE_SVR4=1
    AC_DEFINE(__SGI__)
    AC_DEFINE(__SVR4__)
    DEFAULT_DEFAULT_wxUSE_MOTIF=1
  ;;
  *-*-solaris2* )
    USE_SUN=1
    USE_SOLARIS=1
    USE_SVR4=1
    AC_DEFINE(__SUN__)
    AC_DEFINE(__SOLARIS__)
    AC_DEFINE(__SVR4__)
    DEFAULT_DEFAULT_wxUSE_MOTIF=1
    NEEDS_D_REENTRANT_FOR_R_FUNCS=1
  ;;
  *-*-sunos4* )
    USE_SUN=1
    USE_SUNOS=1
    USE_BSD=1
    AC_DEFINE(__SUN__)
    AC_DEFINE(__SUNOS__)
    AC_DEFINE(__BSD__)
    DEFAULT_DEFAULT_wxUSE_MOTIF=1
  ;;
  *-*-freebsd*)
    USE_BSD=1
    USE_FREEBSD=1
    AC_DEFINE(__FREEBSD__)
    AC_DEFINE(__BSD__)
    DEFAULT_DEFAULT_wxUSE_GTK=1
  ;;
  *-*-openbsd*)
    USE_BSD=1
    USE_OPENBSD=1
    AC_DEFINE(__OPENBSD__)
    AC_DEFINE(__BSD__)
    DEFAULT_DEFAULT_wxUSE_GTK=1
  ;;
  *-*-netbsd*)
    USE_BSD=1
    USE_NETBSD=1
    AC_DEFINE(__NETBSD__)
    AC_DEFINE(__BSD__)
    DEFAULT_DEFAULT_wxUSE_GTK=1
  ;;
  *-*-osf* )
    USE_ALPHA=1
    USE_OSF=1
    AC_DEFINE(__ALPHA__)
    AC_DEFINE(__OSF__)
    DEFAULT_DEFAULT_wxUSE_MOTIF=1
    NEEDS_D_REENTRANT_FOR_R_FUNCS=1
  ;;
  *-*-dgux5* )
    USE_ALPHA=1
    USE_SVR4=1
    AC_DEFINE(__ALPHA__)
    AC_DEFINE(__SVR4__)
    DEFAULT_DEFAULT_wxUSE_MOTIF=1
  ;;
  *-*-sysv5* )
    USE_SYSV=1
    USE_SVR4=1
    AC_DEFINE(__SYSV__)
    AC_DEFINE(__SVR4__)
    DEFAULT_DEFAULT_wxUSE_MOTIF=1
  ;;
  *-*-aix* )
    USE_AIX=1
    USE_SYSV=1
    USE_SVR4=1
    dnl quoting from http://www-1.ibm.com/servers/esdd/articles/gnu.html:
    dnl
    dnl     Both archive libraries and shared libraries on AIX have an .a
    dnl     extension. This will explain why you can't link with an .so and
    dnl     why it works with the name changed to .a. 
    SO_SUFFIX=a
    AC_DEFINE(__AIX__)
    AC_DEFINE(__SYSV__)
    AC_DEFINE(__SVR4__)
    DEFAULT_DEFAULT_wxUSE_MOTIF=1
  ;;

  *-*-cygwin* | *-*-mingw32* )
    dnl MBN: some of the defines have been moved after toolkit detection
    dnl      because for wxMotif/wxGTK/wxX11 to build on Cygwin
    dnl      USE_UNIX  must be set and not USE_WIN32
    SO_SUFFIX=dll
    PROGRAM_EXT=".exe"
    RESCOMP=windres
    DEFAULT_DEFAULT_wxUSE_MSW=1
  ;;

  *-pc-msdosdjgpp )
    USE_UNIX=0
    USE_DOS=1
    AC_DEFINE(__DOS__)
    PROGRAM_EXT=".exe"
    DEFAULT_DEFAULT_wxUSE_MGL=1
    dnl DJGPP needs explicit -lstdc++ for some reason (VS: mayb some versions only?)
    LIBS="$LIBS -lstdc++"
  ;;

  *-pc-os2_emx | *-pc-os2-emx )
    AC_DEFINE(__EMX__)
    PROGRAM_EXT=".exe"
    DEFAULT_DEFAULT_wxUSE_PM=1
  ;;

  powerpc-*-darwin* )
    dnl PowerPC Darwin based distributions (including Mac OS X)
    USE_BSD=1
    USE_DARWIN=1
    SO_SUFFIX=dylib
    AC_DEFINE(__BSD__)
    AC_DEFINE(__DARWIN__)
    AC_DEFINE(__POWERPC__)
    DEFAULT_DEFAULT_wxUSE_MAC=1
  ;;

  *-*-beos* )
    dnl leave USE_UNIX on - BeOS is sufficiently Unix-like for this
    USE_BEOS=1
    AC_DEFINE(__BEOS__)
  ;;

  *)
    AC_MSG_ERROR(unknown system type ${host}.)
esac

dnl ---------------------------------------------------------------------------
dnl command line options for configure
dnl ---------------------------------------------------------------------------

dnl the default values for all options - we collect them all here to simplify
dnl modification of the default values (for example, if the defaults for some
dnl platform should be changed, it can be done here too)
dnl
dnl NB: see also DEFAULT_wxUSE<toolkit> variables defined above

WX_ARG_CACHE_INIT

dnl useful to test the compilation with minimum options, define as 0 for normal
dnl usage
DEBUG_CONFIGURE=0
if test $DEBUG_CONFIGURE = 1; then
  DEFAULT_wxUSE_UNIVERSAL=no

  DEFAULT_wxUSE_NANOX=no

  DEFAULT_wxUSE_THREADS=yes

  DEFAULT_wxUSE_SHARED=yes
  DEFAULT_wxUSE_SONAME=no
  DEFAULT_wxUSE_OPTIMISE=no
  DEFAULT_wxUSE_PROFILE=no
  DEFAULT_wxUSE_NO_DEPS=no
  DEFAULT_wxUSE_NO_RTTI=no
  DEFAULT_wxUSE_NO_EXCEPTIONS=no
  DEFAULT_wxUSE_PERMISSIVE=no
  DEFAULT_wxUSE_DEBUG_FLAG=yes
  DEFAULT_wxUSE_DEBUG_INFO=yes
  DEFAULT_wxUSE_DEBUG_GDB=yes
  DEFAULT_wxUSE_MEM_TRACING=no
  DEFAULT_wxUSE_DEBUG_CONTEXT=no
  DEFAULT_wxUSE_DMALLOC=no
  DEFAULT_wxUSE_PRECOMP=no
  DEFAULT_wxUSE_APPLE_IEEE=no

  DEFAULT_wxUSE_LOG=yes
  DEFAULT_wxUSE_LOGWINDOW=no
  DEFAULT_wxUSE_LOGGUI=no
  DEFAULT_wxUSE_LOGDIALOG=no

  DEFAULT_wxUSE_GUI=yes
  DEFAULT_wxUSE_CONTROLS=no

  DEFAULT_wxUSE_REGEX=no
  DEFAULT_wxUSE_ZLIB=no
  DEFAULT_wxUSE_LIBPNG=no
  DEFAULT_wxUSE_LIBJPEG=no
  DEFAULT_wxUSE_LIBTIFF=no
  DEFAULT_wxUSE_ODBC=no
  DEFAULT_wxUSE_OPENGL=no

  DEFAULT_wxUSE_ON_FATAL_EXCEPTION=no
  DEFAULT_wxUSE_SNGLINST_CHECKER=no
  DEFAULT_wxUSE_STD_IOSTREAM=no
  DEFAULT_wxUSE_CMDLINE_PARSER=no
  DEFAULT_wxUSE_DATETIME=no
  DEFAULT_wxUSE_TIMEDATE=no
  DEFAULT_wxUSE_TIMER=no
  DEFAULT_wxUSE_STOPWATCH=no
  DEFAULT_wxUSE_FILE=no
  DEFAULT_wxUSE_FFILE=no
  DEFAULT_wxUSE_TEXTBUFFER=no
  DEFAULT_wxUSE_TEXTFILE=no
  DEFAULT_wxUSE_WAVE=no
  DEFAULT_wxUSE_INTL=no
  DEFAULT_wxUSE_CONFIG=no
  DEFAULT_wxUSE_FONTMAP=no
  DEFAULT_wxUSE_STREAMS=no
  DEFAULT_wxUSE_SOCKETS=no
  DEFAULT_wxUSE_OLE=no
  DEFAULT_wxUSE_DATAOBJ=no
  DEFAULT_wxUSE_DIALUP_MANAGER=no
  DEFAULT_wxUSE_JOYSTICK=no
  DEFAULT_wxUSE_DYNLIB_CLASS=no
  DEFAULT_wxUSE_DYNAMIC_LOADER=no
  DEFAULT_wxUSE_LONGLONG=no
  DEFAULT_wxUSE_GEOMETRY=no

  DEFAULT_wxUSE_AFM_FOR_POSTSCRIPT=no
  DEFAULT_wxUSE_NORMALIZED_PS_FONTS=no
  DEFAULT_wxUSE_POSTSCRIPT=no

  DEFAULT_wxUSE_X_RESOURCES=no
  DEFAULT_wxUSE_CLIPBOARD=no
  DEFAULT_wxUSE_TOOLTIPS=no
  DEFAULT_wxUSE_DRAG_AND_DROP=no
  DEFAULT_wxUSE_DRAGIMAGE=no
  DEFAULT_wxUSE_SPLINES=no

  DEFAULT_wxUSE_MDI_ARCHITECTURE=no
  DEFAULT_wxUSE_DOC_VIEW_ARCHITECTURE=no
  DEFAULT_wxUSE_PRINTING_ARCHITECTURE=no

  DEFAULT_wxUSE_PROLOGIO=no
  DEFAULT_wxUSE_RESOURCES=no
  DEFAULT_wxUSE_CONSTRAINTS=no
  DEFAULT_wxUSE_IPC=no
  DEFAULT_wxUSE_HELP=no
  DEFAULT_wxUSE_MS_HTML_HELP=no
  DEFAULT_wxUSE_WXHTML_HELP=no
  DEFAULT_wxUSE_TREELAYOUT=no
  DEFAULT_wxUSE_METAFILE=no
  DEFAULT_wxUSE_MIMETYPE=no
  DEFAULT_wxUSE_SYSTEM_OPTIONS=no
  DEFAULT_wxUSE_PROTOCOL=no
  DEFAULT_wxUSE_PROTOCOL_HTTP=no
  DEFAULT_wxUSE_PROTOCOL_FTP=no
  DEFAULT_wxUSE_PROTOCOL_FILE=no
  DEFAULT_wxUSE_URL=no

  DEFAULT_wxUSE_COMMONDLGS=no
  DEFAULT_wxUSE_CHOICEDLG=no
  DEFAULT_wxUSE_COLOURDLG=no
  DEFAULT_wxUSE_DIRDLG=no
  DEFAULT_wxUSE_FILEDLG=no
  DEFAULT_wxUSE_FINDREPLDLG=no
  DEFAULT_wxUSE_FONTDLG=no
  DEFAULT_wxUSE_MSGDLG=no
  DEFAULT_wxUSE_NUMBERDLG=no
  DEFAULT_wxUSE_TEXTDLG=no
  DEFAULT_wxUSE_SPLASH=no
  DEFAULT_wxUSE_STARTUP_TIPS=no
  DEFAULT_wxUSE_PROGRESSDLG=no
  DEFAULT_wxUSE_WIZARDDLG=no

  DEFAULT_wxUSE_MENUS=no
  DEFAULT_wxUSE_MINIFRAME=no
  DEFAULT_wxUSE_HTML=no
  DEFAULT_wxUSE_FILESYSTEM=no
  DEFAULT_wxUSE_FS_INET=no
  DEFAULT_wxUSE_FS_ZIP=no
  DEFAULT_wxUSE_BUSYINFO=no
  DEFAULT_wxUSE_ZIPSTREAM=no
  DEFAULT_wxUSE_VALIDATORS=no

  DEFAULT_wxUSE_ACCEL=no
  DEFAULT_wxUSE_BUTTON=no
  DEFAULT_wxUSE_BMPBUTTON=no
  DEFAULT_wxUSE_CALCTRL=no
  DEFAULT_wxUSE_CARET=no
  DEFAULT_wxUSE_CHECKBOX=no
  DEFAULT_wxUSE_CHECKLST=no
  DEFAULT_wxUSE_CHOICE=no
  DEFAULT_wxUSE_COMBOBOX=no
  DEFAULT_wxUSE_GAUGE=no
  DEFAULT_wxUSE_GRID=no
  DEFAULT_wxUSE_NEW_GRID=no
  DEFAULT_wxUSE_IMAGLIST=no
  DEFAULT_wxUSE_LISTBOX=no
  DEFAULT_wxUSE_LISTCTRL=no
  DEFAULT_wxUSE_NOTEBOOK=no
  DEFAULT_wxUSE_PROPSHEET=no
  DEFAULT_wxUSE_RADIOBOX=no
  DEFAULT_wxUSE_RADIOBTN=no
  DEFAULT_wxUSE_SASH=no
  DEFAULT_wxUSE_SCROLLBAR=no
  DEFAULT_wxUSE_SLIDER=no
  DEFAULT_wxUSE_SPINBTN=no
  DEFAULT_wxUSE_SPINCTRL=no
  DEFAULT_wxUSE_SPLITTER=no
  DEFAULT_wxUSE_STATBMP=no
  DEFAULT_wxUSE_STATBOX=no
  DEFAULT_wxUSE_STATLINE=no
  DEFAULT_wxUSE_STATTEXT=no
  DEFAULT_wxUSE_STATUSBAR=yes
  DEFAULT_wxUSE_TABDIALOG=no
  DEFAULT_wxUSE_TEXTCTRL=no
  DEFAULT_wxUSE_TOGGLEBTN=no
  DEFAULT_wxUSE_TOOLBAR=no
  DEFAULT_wxUSE_TOOLBAR_NATIVE=no
  DEFAULT_wxUSE_TOOLBAR_SIMPLE=no
  DEFAULT_wxUSE_TREECTRL=no
  DEFAULT_wxUSE_POPUPWIN=no
  DEFAULT_wxUSE_TIPWINDOW=no

  DEFAULT_wxUSE_UNICODE=no
  DEFAULT_wxUSE_UNICODE_MSLU=no
  DEFAULT_wxUSE_WCSRTOMBS=no

  DEFAULT_wxUSE_PALETTE=no
  DEFAULT_wxUSE_IMAGE=no
  DEFAULT_wxUSE_GIF=no
  DEFAULT_wxUSE_PCX=no
  DEFAULT_wxUSE_PNM=no
  DEFAULT_wxUSE_IFF=no
  DEFAULT_wxUSE_XPM=no
  DEFAULT_wxUSE_ICO_CUR=no
else
  DEFAULT_wxUSE_UNIVERSAL=no

  DEFAULT_wxUSE_NANOX=no

  DEFAULT_wxUSE_THREADS=yes

  DEFAULT_wxUSE_SHARED=yes
  DEFAULT_wxUSE_SONAME=no
  DEFAULT_wxUSE_OPTIMISE=yes
  DEFAULT_wxUSE_PROFILE=no
  DEFAULT_wxUSE_NO_DEPS=no
  DEFAULT_wxUSE_NO_RTTI=no
  DEFAULT_wxUSE_NO_EXCEPTIONS=no
  DEFAULT_wxUSE_PERMISSIVE=no
  DEFAULT_wxUSE_DEBUG_FLAG=no
  DEFAULT_wxUSE_DEBUG_INFO=no
  DEFAULT_wxUSE_DEBUG_GDB=no
  DEFAULT_wxUSE_MEM_TRACING=no
  DEFAULT_wxUSE_DEBUG_CONTEXT=no
  DEFAULT_wxUSE_DMALLOC=no
  DEFAULT_wxUSE_PRECOMP=no
  DEFAULT_wxUSE_APPLE_IEEE=yes

  DEFAULT_wxUSE_LOG=yes
  DEFAULT_wxUSE_LOGWINDOW=yes
  DEFAULT_wxUSE_LOGGUI=yes
  DEFAULT_wxUSE_LOGDIALOG=yes

  DEFAULT_wxUSE_GUI=yes

  DEFAULT_wxUSE_REGEX=yes
  DEFAULT_wxUSE_ZLIB=yes
  DEFAULT_wxUSE_LIBPNG=yes
  DEFAULT_wxUSE_LIBJPEG=yes
  DEFAULT_wxUSE_LIBTIFF=yes
  DEFAULT_wxUSE_ODBC=no
  DEFAULT_wxUSE_OPENGL=no

  DEFAULT_wxUSE_ON_FATAL_EXCEPTION=yes
  DEFAULT_wxUSE_SNGLINST_CHECKER=yes
  DEFAULT_wxUSE_STD_IOSTREAM=no
  DEFAULT_wxUSE_CMDLINE_PARSER=yes
  DEFAULT_wxUSE_DATETIME=yes
  DEFAULT_wxUSE_TIMEDATE=no
  DEFAULT_wxUSE_TIMER=yes
  DEFAULT_wxUSE_STOPWATCH=yes
  DEFAULT_wxUSE_FILE=yes
  DEFAULT_wxUSE_FFILE=yes
  DEFAULT_wxUSE_TEXTBUFFER=yes
  DEFAULT_wxUSE_TEXTFILE=yes
  DEFAULT_wxUSE_WAVE=no
  DEFAULT_wxUSE_INTL=yes
  DEFAULT_wxUSE_CONFIG=yes
  DEFAULT_wxUSE_FONTMAP=yes
  DEFAULT_wxUSE_STREAMS=yes
  DEFAULT_wxUSE_SOCKETS=yes
  DEFAULT_wxUSE_OLE=yes
  DEFAULT_wxUSE_DATAOBJ=yes
  DEFAULT_wxUSE_DIALUP_MANAGER=yes
  DEFAULT_wxUSE_JOYSTICK=yes
  DEFAULT_wxUSE_DYNLIB_CLASS=yes
  DEFAULT_wxUSE_DYNAMIC_LOADER=yes
  DEFAULT_wxUSE_LONGLONG=yes
  DEFAULT_wxUSE_GEOMETRY=yes

  DEFAULT_wxUSE_AFM_FOR_POSTSCRIPT=yes
  DEFAULT_wxUSE_NORMALIZED_PS_FONTS=yes
  DEFAULT_wxUSE_POSTSCRIPT=yes

  DEFAULT_wxUSE_X_RESOURCES=no
  DEFAULT_wxUSE_CLIPBOARD=yes
  DEFAULT_wxUSE_TOOLTIPS=yes
  DEFAULT_wxUSE_DRAG_AND_DROP=yes
  DEFAULT_wxUSE_DRAGIMAGE=yes
  DEFAULT_wxUSE_SPLINES=yes

  DEFAULT_wxUSE_MDI_ARCHITECTURE=yes
  DEFAULT_wxUSE_DOC_VIEW_ARCHITECTURE=yes
  DEFAULT_wxUSE_PRINTING_ARCHITECTURE=yes

  DEFAULT_wxUSE_PROLOGIO=no
  DEFAULT_wxUSE_RESOURCES=no
  DEFAULT_wxUSE_CONSTRAINTS=yes
  DEFAULT_wxUSE_IPC=yes
  DEFAULT_wxUSE_HELP=yes
  DEFAULT_wxUSE_MS_HTML_HELP=yes
  DEFAULT_wxUSE_WXHTML_HELP=yes
  DEFAULT_wxUSE_TREELAYOUT=yes
  DEFAULT_wxUSE_METAFILE=yes
  DEFAULT_wxUSE_MIMETYPE=yes
  DEFAULT_wxUSE_SYSTEM_OPTIONS=yes
  DEFAULT_wxUSE_PROTOCOL=yes
  DEFAULT_wxUSE_PROTOCOL_HTTP=yes
  DEFAULT_wxUSE_PROTOCOL_FTP=yes
  DEFAULT_wxUSE_PROTOCOL_FILE=yes
  DEFAULT_wxUSE_URL=yes

  DEFAULT_wxUSE_COMMONDLGS=yes
  DEFAULT_wxUSE_CHOICEDLG=yes
  DEFAULT_wxUSE_COLOURDLG=yes
  DEFAULT_wxUSE_DIRDLG=yes
  DEFAULT_wxUSE_FILEDLG=yes
  DEFAULT_wxUSE_FINDREPLDLG=yes
  DEFAULT_wxUSE_FONTDLG=yes
  DEFAULT_wxUSE_MSGDLG=yes
  DEFAULT_wxUSE_NUMBERDLG=yes
  DEFAULT_wxUSE_TEXTDLG=yes
  DEFAULT_wxUSE_SPLASH=yes
  DEFAULT_wxUSE_STARTUP_TIPS=yes
  DEFAULT_wxUSE_PROGRESSDLG=yes
  DEFAULT_wxUSE_WIZARDDLG=yes

  DEFAULT_wxUSE_MENUS=yes
  DEFAULT_wxUSE_MINIFRAME=yes
  DEFAULT_wxUSE_HTML=yes
  DEFAULT_wxUSE_FILESYSTEM=yes
  DEFAULT_wxUSE_FS_INET=yes
  DEFAULT_wxUSE_FS_ZIP=yes
  DEFAULT_wxUSE_BUSYINFO=yes
  DEFAULT_wxUSE_ZIPSTREAM=yes
  DEFAULT_wxUSE_VALIDATORS=yes

  DEFAULT_wxUSE_ACCEL=yes
  DEFAULT_wxUSE_BUTTON=yes
  DEFAULT_wxUSE_BMPBUTTON=yes
  DEFAULT_wxUSE_CALCTRL=yes
  DEFAULT_wxUSE_CARET=yes
  DEFAULT_wxUSE_CHECKBOX=yes
  DEFAULT_wxUSE_CHECKLST=yes
  DEFAULT_wxUSE_CHOICE=yes
  DEFAULT_wxUSE_COMBOBOX=yes
  DEFAULT_wxUSE_GAUGE=yes
  DEFAULT_wxUSE_GRID=yes
  DEFAULT_wxUSE_NEW_GRID=yes
  DEFAULT_wxUSE_IMAGLIST=yes
  DEFAULT_wxUSE_LISTBOX=yes
  DEFAULT_wxUSE_LISTCTRL=yes
  DEFAULT_wxUSE_NOTEBOOK=yes
  DEFAULT_wxUSE_PROPSHEET=yes
  DEFAULT_wxUSE_RADIOBOX=yes
  DEFAULT_wxUSE_RADIOBTN=yes
  DEFAULT_wxUSE_SASH=yes
  DEFAULT_wxUSE_SCROLLBAR=yes
  DEFAULT_wxUSE_SLIDER=yes
  DEFAULT_wxUSE_SPINBTN=yes
  DEFAULT_wxUSE_SPINCTRL=yes
  DEFAULT_wxUSE_SPLITTER=yes
  DEFAULT_wxUSE_STATBMP=yes
  DEFAULT_wxUSE_STATBOX=yes
  DEFAULT_wxUSE_STATLINE=yes
  DEFAULT_wxUSE_STATTEXT=yes
  DEFAULT_wxUSE_STATUSBAR=yes
  DEFAULT_wxUSE_TABDIALOG=no
  DEFAULT_wxUSE_TEXTCTRL=yes
  DEFAULT_wxUSE_TOGGLEBTN=yes
  DEFAULT_wxUSE_TOOLBAR=yes
  DEFAULT_wxUSE_TOOLBAR_NATIVE=yes
  DEFAULT_wxUSE_TOOLBAR_SIMPLE=yes
  DEFAULT_wxUSE_TREECTRL=yes
  DEFAULT_wxUSE_POPUPWIN=yes
  DEFAULT_wxUSE_TIPWINDOW=yes

  DEFAULT_wxUSE_UNICODE=no
  DEFAULT_wxUSE_UNICODE_MSLU=yes
  DEFAULT_wxUSE_WCSRTOMBS=no

  DEFAULT_wxUSE_PALETTE=yes
  DEFAULT_wxUSE_IMAGE=yes
  DEFAULT_wxUSE_GIF=yes
  DEFAULT_wxUSE_PCX=yes
  DEFAULT_wxUSE_IFF=no
  DEFAULT_wxUSE_PNM=yes
  DEFAULT_wxUSE_XPM=yes
  DEFAULT_wxUSE_ICO_CUR=yes
fi

dnl WX_ARG_WITH should be used to select whether an external package will be
dnl used or not, to configure compile-time features of this package itself,
dnl use WX_ARG_ENABLE instead

dnl ============================
dnl external package dependecies
dnl ============================

dnl these options use AC_ARG_WITH and not WX_ARG_WITH on purpose - we cache
dnl these values manually
for toolkit in `echo $ALL_TOOLKITS`; do
  LINE=`grep "wxUSE_$toolkit=" ${wx_arg_cache_file}`
  if test "x$LINE" != "x" ; then
    has_toolkit_in_cache=1
    eval "DEFAULT_$LINE"
    eval "CACHE_$toolkit=1"
  fi
done

dnl ---------------------------------------------------------------------------
dnl --disable-gui will build only non-GUI part of wxWindows: check for this
dnl first to disable many other switches if it's given
dnl
dnl NB: this is still in testing stage, don't use if you don't know what you're
dnl     doing
dnl ---------------------------------------------------------------------------

WX_ARG_ENABLE(gui,         [  --enable-gui            use GUI classes], wxUSE_GUI)

if test "$wxUSE_GUI" = "yes"; then

WX_ARG_ENABLE(universal,   [  --enable-universal      use wxWindows GUI controls instead of native ones], wxUSE_UNIVERSAL)
AC_ARG_WITH(gtk,           [  --with-gtk              use GTK+], [wxUSE_GTK="$withval" CACHE_GTK=1 TOOLKIT_GIVEN=1])
AC_ARG_WITH(motif,         [  --with-motif            use Motif/Lesstif], [wxUSE_MOTIF="$withval" CACHE_MOTIF=1 TOOLKIT_GIVEN=1])
AC_ARG_WITH(mac,           [  --with-mac              use Mac OS X], [wxUSE_MAC="$withval" TOOLKIT_GIVEN=1])
AC_ARG_WITH(wine,          [  --with-wine             use WINE], [wxUSE_WINE="$withval" CACHE_WINE=1 TOOLKIT_GIVEN=1])
AC_ARG_WITH(msw,           [  --with-msw              use MS-Windows], [wxUSE_MSW="$withval" CACHE_MSW=1 TOOLKIT_GIVEN=1])
AC_ARG_WITH(pm,            [  --with-pm               use OS/2 Presentation Manager], [wxUSE_PM="$withval" CACHE_PM=1 TOOLKIT_GIVEN=1])
AC_ARG_WITH(mgl,           [  --with-mgl              use SciTech MGL], [wxUSE_MGL="$withval" wxUSE_UNIVERSAL="yes" CACHE_MGL=1 TOOLKIT_GIVEN=1])
AC_ARG_WITH(microwin,      [  --with-microwin         use MicroWindows], [wxUSE_MICROWIN="$withval" CACHE_MICROWIN=1 TOOLKIT_GIVEN=1])
AC_ARG_WITH(x11,           [  --with-x11              use X11], [wxUSE_X11="$withval" wxUSE_UNIVERSAL="yes" CACHE_X11=1 TOOLKIT_GIVEN=1])
WX_ARG_ENABLE(nanox,       [  --enable-nanox          use NanoX], wxUSE_NANOX)

WX_ARG_ENABLE(gtk2,        [  --enable-gtk2           use GTK+ 2.0 if available (EXPERIMENTAL)], wxUSE_GTK2)

WX_ARG_SYS_WITH(libpng,    [  --with-libpng           use libpng (PNG image format)], wxUSE_LIBPNG)
WX_ARG_SYS_WITH(libjpeg,   [  --with-libjpeg          use libjpeg (JPEG file format)], wxUSE_LIBJPEG)
WX_ARG_SYS_WITH(libtiff,   [  --with-libtiff          use libtiff (TIFF file format)], wxUSE_LIBTIFF)
WX_ARG_WITH(opengl,        [  --with-opengl           use OpenGL (or Mesa)], wxUSE_OPENGL)

fi
dnl for GUI only

WX_ARG_WITH(dmalloc,       [  --with-dmalloc          use dmalloc library (http://dmalloc.com/)], wxUSE_DMALLOC)
WX_ARG_SYS_WITH(regex,     [  --with-regex            enable support for wxRegEx class], wxUSE_REGEX)
WX_ARG_SYS_WITH(zlib,      [  --with-zlib             use zlib for LZW compression], wxUSE_ZLIB)
WX_ARG_WITH(odbc,          [  --with-odbc             use the IODBC and wxODBC classes], wxUSE_ODBC)

dnl ---------------------------------------------------------------------------
dnl compile options
dnl ---------------------------------------------------------------------------

WX_ARG_ENABLE(shared,      [  --enable-shared         create shared library code], wxUSE_SHARED)
WX_ARG_ENABLE(soname,      [  --enable-soname         set the DT_SONAME field in ELF shared libraries], wxUSE_SONAME)
WX_ARG_ENABLE(optimise,    [  --enable-optimise       create optimised code], wxUSE_OPTIMISE)
WX_ARG_ENABLE(debug,       [  --enable-debug          same as debug_flag and debug_info], wxUSE_DEBUG)

dnl allow the precompiled header option to be disabled under Mac OS X/Darwin
WX_ARG_ENABLE(precomp,     [  --enable-precomp        enable use of precompiled headers (Mac OS X/Darwin)], wxUSE_PRECOMP)

if test "$wxUSE_DEBUG" = "yes"; then
  DEFAULT_wxUSE_DEBUG_FLAG=yes
  DEFAULT_wxUSE_DEBUG_INFO=yes
elif test "$wxUSE_DEBUG" = "no"; then
  DEFAULT_wxUSE_DEBUG_FLAG=no
  DEFAULT_wxUSE_DEBUG_INFO=no
fi

WX_ARG_ENABLE(debug_flag,    [  --enable-debug_flag     set __WXDEBUG__ flag (recommended for developers!)], wxUSE_DEBUG_FLAG)
WX_ARG_ENABLE(debug_info,    [  --enable-debug_info     create code with debugging information], wxUSE_DEBUG_INFO)
WX_ARG_ENABLE(debug_gdb,     [  --enable-debug_gdb      create code with extra GDB debugging information], wxUSE_DEBUG_GDB)
WX_ARG_ENABLE(debug_cntxt,   [  --enable-debug_cntxt    use wxDebugContext], wxUSE_DEBUG_CONTEXT)
WX_ARG_ENABLE(mem_tracing,   [  --enable-mem_tracing    create code with memory tracing], wxUSE_MEM_TRACING)
WX_ARG_ENABLE(profile,       [  --enable-profile        create code with profiling information], wxUSE_PROFILE)
WX_ARG_ENABLE(no_rtti,       [  --enable-no_rtti        create code without RTTI information], wxUSE_NO_RTTI)
WX_ARG_ENABLE(no_exceptions, [  --enable-no_exceptions  create code without C++ exceptions handling], wxUSE_NO_EXCEPTIONS)
WX_ARG_ENABLE(permissive,    [  --enable-permissive     compile code disregarding strict ANSI], wxUSE_PERMISSIVE)
WX_ARG_ENABLE(no_deps,       [  --enable-no_deps        create code without dependency information], wxUSE_NO_DEPS)

WX_ARG_ENABLE(compat20,      [  --enable-compat20       enable wxWindows 2.0 compatibility], WXWIN_COMPATIBILITY_2)
WX_ARG_ENABLE(compat22,      [  --disable-compat22      disable wxWindows 2.2 compatibility], WXWIN_COMPATIBILITY_2_2, disable)

AC_ARG_ENABLE(rpath,         [  --enable-rpath=DIR      output the rpath flag from wx-config], [wxRPATH_DIR="$enableval"])

if test "$wxRPATH_DIR" != "" -a "$wxRPATH_DIR" != "disable"; then
   WXCONFIG_RPATH="-Wl,-rpath -Wl,$wxRPATH_DIR"
fi


dnl ---------------------------------------------------------------------------
dnl (small) optional non GUI classes
dnl ---------------------------------------------------------------------------

WX_ARG_ENABLE(intl,          [  --enable-intl           use internationalization system], wxUSE_INTL)
WX_ARG_ENABLE(config,        [  --enable-config         use wxConfig (and derived) classes], wxUSE_CONFIG)

WX_ARG_ENABLE(protocols,     [  --enable-protocols      use wxProtocol and derived classes], wxUSE_PROTOCOL)
WX_ARG_ENABLE(ftp,           [  --enable-ftp            use wxFTP (requires wxProtocol], wxUSE_PROTOCOL_FTP)
WX_ARG_ENABLE(http,          [  --enable-http           use wxHTTP (requires wxProtocol], wxUSE_PROTOCOL_HTTP)
WX_ARG_ENABLE(fileproto,     [  --enable-fileproto      use wxFileProto class (requires wxProtocol], wxUSE_PROTOCOL_FILE)
WX_ARG_ENABLE(sockets,       [  --enable-sockets        use socket/network classes], wxUSE_SOCKETS)
WX_ARG_ENABLE(ole,           [  --enable-ole            use OLE classes], wxUSE_OLE)
WX_ARG_ENABLE(dataobj,       [  --enable-dataobj        use data object classes], wxUSE_DATAOBJ)

WX_ARG_ENABLE(ipc,           [  --enable-ipc            use interprocess communication (wxSocket etc.)], wxUSE_IPC)

WX_ARG_ENABLE(cmdline,       [  --enable-cmdline        use wxCmdLineParser class], wxUSE_CMDLINE_PARSER)
WX_ARG_ENABLE(datetime,      [  --enable-datetime       use wxDateTime class], wxUSE_DATETIME)
WX_ARG_ENABLE(timedate,      [  --enable-timedate       use obsolete wxDate/wxTime classes], wxUSE_TIMEDATE)
WX_ARG_ENABLE(stopwatch,     [  --enable-stopwatch      use wxStopWatch class], wxUSE_STOPWATCH)
WX_ARG_ENABLE(dialupman,     [  --enable-dialupman      use dialup network classes], wxUSE_DIALUP_MANAGER)
WX_ARG_ENABLE(apple_ieee,    [  --enable-apple_ieee     use the Apple IEEE codec], wxUSE_APPLE_IEEE)
WX_ARG_ENABLE(timer,         [  --enable-timer          use wxTimer class], wxUSE_TIMER)
WX_ARG_ENABLE(wave,          [  --enable-wave           use wxWave class], wxUSE_WAVE)
WX_ARG_ENABLE(fraction,      [  --enable-fraction       use wxFraction class], wxUSE_FRACTION)
WX_ARG_ENABLE(dynlib,        [  --enable-dynlib         use wxLibrary class for DLL loading], wxUSE_DYNLIB_CLASS)
WX_ARG_ENABLE(dynamicloader, [  --enable-dynamicloader  use (new) wxDynamicLibrary class], wxUSE_DYNAMIC_LOADER)
WX_ARG_ENABLE(longlong,      [  --enable-longlong       use wxLongLong class], wxUSE_LONGLONG)
WX_ARG_ENABLE(geometry,      [  --enable-geometry       use geometry class], wxUSE_GEOMETRY)
WX_ARG_ENABLE(log,           [  --enable-log            use logging system], wxUSE_LOG)
WX_ARG_ENABLE(streams,       [  --enable-streams        use wxStream etc classes], wxUSE_STREAMS)
WX_ARG_ENABLE(file,          [  --enable-file           use wxFile classes], wxUSE_FILE)
WX_ARG_ENABLE(ffile,         [  --enable-ffile          use wxFFile classes], wxUSE_FFILE)
WX_ARG_ENABLE(textbuf,       [  --enable-textbuf        use wxTextBuffer class], wxUSE_TEXTBUFFER)
WX_ARG_ENABLE(textfile,      [  --enable-textfile       use wxTextFile class], wxUSE_TEXTFILE)
WX_ARG_ENABLE(fontmap,       [  --enable-fontmap        use font encodings conversion classes], wxUSE_FONTMAP)
WX_ARG_ENABLE(unicode,       [  --enable-unicode        compile wxString with Unicode support], wxUSE_UNICODE)
WX_ARG_ENABLE(mslu,          [  --enable-mslu           use MS Layer for Unicode on Windows 9x (win32 only)], wxUSE_UNICODE_MSLU)
WX_ARG_ENABLE(wxprintfv,     [  --enable-wxprintfv      use wxWindows implementation of vprintf()], wxUSE_EXPERIMENTAL_PRINTF)
WX_ARG_ENABLE(std_iostreams, [  --enable-std_iostreams  use standard C++ stream classes], wxUSE_STD_IOSTREAM)
WX_ARG_ENABLE(filesystem,    [  --enable-filesystem     use virtual file systems classes], wxUSE_FILESYSTEM)
WX_ARG_ENABLE(fs_inet,       [  --enable-fs_inet        use virtual HTTP/FTP filesystems], wxUSE_FS_INET)
WX_ARG_ENABLE(fs_zip,        [  --enable-fs_zip         use virtual ZIP filesystems], wxUSE_FS_ZIP)
WX_ARG_ENABLE(zipstream,     [  --enable-zipstream      use wxZipInputStream], wxUSE_ZIPSTREAM)

WX_ARG_ENABLE(catch_segvs,   [  --enable-catch_segvs    catch signals and pass them to wxApp::OnFatalException], wxUSE_ON_FATAL_EXCEPTION)
WX_ARG_ENABLE(snglinst,      [  --enable-snglinst       use wxSingleInstanceChecker class], wxUSE_SNGLINST_CHECKER)

WX_ARG_ENABLE(mimetype,      [  --enable-mimetype       use wxMimeTypesManager], wxUSE_MIMETYPE)
WX_ARG_ENABLE(system_options,[  --enable-sysoptions     use wxSystemOptions], wxUSE_SYSTEM_OPTIONS)

WX_ARG_ENABLE(url,           [  --enable-url            use wxURL class], wxUSE_URL)
WX_ARG_ENABLE(protocol,      [  --enable-protocol       use wxProtocol class], wxUSE_PROTOCOL)
WX_ARG_ENABLE(protocol_http, [  --enable-protocol-http  HTTP support in wxProtocol], wxUSE_PROTOCOL_HTTP)
WX_ARG_ENABLE(protocol_ftp,  [  --enable-protocol-ftp   FTP support in wxProtocol], wxUSE_PROTOCOL_FTP)
WX_ARG_ENABLE(protocol_file, [  --enable-protocol-file  FILE support in wxProtocol], wxUSE_PROTOCOL_FILE)


dnl ---------------------------------------------------------------------------
dnl "big" options (i.e. those which change a lot of things throughout the library)
dnl ---------------------------------------------------------------------------

WX_ARG_ENABLE(threads,     [  --enable-threads        use threads], wxUSE_THREADS)

if test "$wxUSE_GUI" = "yes"; then

dnl ---------------------------------------------------------------------------
dnl "big" GUI options
dnl ---------------------------------------------------------------------------

WX_ARG_ENABLE(docview,     [  --enable-docview        use document view architecture], wxUSE_DOC_VIEW_ARCHITECTURE)
WX_ARG_ENABLE(help,        [  --enable-help           use help subsystem], wxUSE_HELP)
WX_ARG_ENABLE(mshtmlhelp,  [  --enable-mshtmlhelp     use MS HTML Help (win32)], wxUSE_MS_HTML_HELP)
WX_ARG_ENABLE(html,        [  --enable-html           use wxHTML sub-library], wxUSE_HTML)
WX_ARG_ENABLE(htmlhelp,    [  --enable-htmlhelp       use wxHTML-based help], wxUSE_WXHTML_HELP)
WX_ARG_ENABLE(constraints, [  --enable-constraints    use layout-constraints system], wxUSE_CONSTRAINTS)
WX_ARG_ENABLE(printarch,   [  --enable-printarch      use printing architecture], wxUSE_PRINTING_ARCHITECTURE)
WX_ARG_ENABLE(mdi,         [  --enable-mdi            use multiple document interface architecture], wxUSE_MDI_ARCHITECTURE)
WX_ARG_ENABLE(loggui,      [  --enable-loggui         use standard GUI logger], wxUSE_LOGGUI)
WX_ARG_ENABLE(logwin,      [  --enable-logwin         use wxLogWindow], wxUSE_LOGWINDOW)
WX_ARG_ENABLE(logdialog,   [  --enable-logdialog      use wxLogDialog], wxUSE_LOGDIALOG)

dnl ---------------------------------------------------------------------------
dnl PostScript options
dnl ---------------------------------------------------------------------------
WX_ARG_ENABLE(postscript,  [  --enable-postscript     use wxPostscriptDC device context (default for gtk+)], wxUSE_POSTSCRIPT)

dnl VZ: these options seem to be always on, if someone wants to change it please do
dnl WX_ARG_ENABLE(PS-normalized,    [  --enable-PS-normalized  use normalized PS fonts], dnl             wxUSE_NORMALIZED_PS_FONTS)
dnl WX_ARG_ENABLE(afmfonts,        [  --enable-afmfonts       use Adobe Font Metric Font table], dnl             wxUSE_AFM_FOR_POSTSCRIPT)

dnl ---------------------------------------------------------------------------
dnl resources
dnl ---------------------------------------------------------------------------

WX_ARG_ENABLE(prologio,    [  --enable-prologio       use Prolog IO library], wxUSE_PROLOGIO)
WX_ARG_ENABLE(resources,   [  --enable-resources      use wxWindows resources], wxUSE_RESOURCES)

WX_ARG_ENABLE(xresources,  [  --enable-xresources     use X resources for save (default for gtk+)], wxUSE_X_RESOURCES)

dnl ---------------------------------------------------------------------------
dnl IPC &c
dnl ---------------------------------------------------------------------------

WX_ARG_ENABLE(clipboard,   [  --enable-clipboard      use wxClipboard classes], wxUSE_CLIPBOARD)
WX_ARG_ENABLE(dnd,         [  --enable-dnd            use Drag'n'Drop classes], wxUSE_DRAG_AND_DROP)
WX_ARG_ENABLE(metafile,    [  --enable-metafile       use win32 metafiles], wxUSE_METAFILE)

WX_ARG_ENABLE(treelayout,  [  --enable-treelayout     use wxTreeLayout classes], wxUSE_TREELAYOUT)

dnl ---------------------------------------------------------------------------
dnl optional GUI controls (in alphabetical order except the first one)
dnl ---------------------------------------------------------------------------

WX_ARG_ENABLE(controls,    [  --enable-controls       use all usual controls], wxUSE_CONTROLS)

dnl even with --enable-controls, some may be disabled by giving
dnl --disable-<control> later on the command line - but by default all will be
dnl used (and vice versa)
if test "$wxUSE_CONTROLS" = "yes"; then
  DEFAULT_wxUSE_ACCEL=yes
  DEFAULT_wxUSE_BMPBUTTON=yes
  DEFAULT_wxUSE_BUTTON=yes
  DEFAULT_wxUSE_CALCTRL=no
  DEFAULT_wxUSE_CARET=yes
  DEFAULT_wxUSE_COMBOBOX=yes
  DEFAULT_wxUSE_CHECKBOX=yes
  DEFAULT_wxUSE_CHECKLISTBOX=yes
  DEFAULT_wxUSE_CHOICE=yes
  DEFAULT_wxUSE_GAUGE=yes
  DEFAULT_wxUSE_GRID=yes
  DEFAULT_wxUSE_NEW_GRID=yes
  DEFAULT_wxUSE_IMAGLIST=yes
  DEFAULT_wxUSE_LISTBOX=yes
  DEFAULT_wxUSE_LISTCTRL=yes
  DEFAULT_wxUSE_NOTEBOOK=yes
  DEFAULT_wxUSE_PROPSHEET=yes
  DEFAULT_wxUSE_RADIOBOX=yes
  DEFAULT_wxUSE_RADIOBTN=yes
  DEFAULT_wxUSE_SASH=yes
  DEFAULT_wxUSE_SCROLLBAR=yes
  DEFAULT_wxUSE_SLIDER=yes
  DEFAULT_wxUSE_SPINBTN=yes
  DEFAULT_wxUSE_SPINCTRL=yes
  DEFAULT_wxUSE_SPLITTER=yes
  DEFAULT_wxUSE_STATBMP=yes
  DEFAULT_wxUSE_STATBOX=yes
  DEFAULT_wxUSE_STATLINE=yes
  DEFAULT_wxUSE_STATUSBAR=yes
  DEFAULT_wxUSE_TAB_DIALOG=yes
  DEFAULT_wxUSE_TOGGLEBTN=yes
  DEFAULT_wxUSE_TOOLBAR=yes
  DEFAULT_wxUSE_TOOLBAR_NATIVE=yes
  DEFAULT_wxUSE_TOOLBAR_SIMPLE=yes
  DEFAULT_wxUSE_TOOLTIPS=yes
  DEFAULT_wxUSE_TREECTRL=yes
  DEFAULT_wxUSE_POPUPWIN=yes
  DEFAULT_wxUSE_TIPWINDOW=yes
elif test "$wxUSE_CONTROLS" = "no"; then
  DEFAULT_wxUSE_ACCEL=no
  DEFAULT_wxUSE_BMPBUTTON=no
  DEFAULT_wxUSE_BUTTON=no
  DEFAULT_wxUSE_CALCTRL=no
  DEFAULT_wxUSE_CARET=no
  DEFAULT_wxUSE_COMBOBOX=no
  DEFAULT_wxUSE_CHECKBOX=no
  DEFAULT_wxUSE_CHECKLISTBOX=no
  DEFAULT_wxUSE_CHOICE=no
  DEFAULT_wxUSE_GAUGE=no
  DEFAULT_wxUSE_GRID=no
  DEFAULT_wxUSE_NEW_GRID=no
  DEFAULT_wxUSE_IMAGLIST=no
  DEFAULT_wxUSE_LISTBOX=no
  DEFAULT_wxUSE_LISTCTRL=no
  DEFAULT_wxUSE_NOTEBOOK=no
  DEFAULT_wxUSE_PROPSHEET=no
  DEFAULT_wxUSE_RADIOBOX=no
  DEFAULT_wxUSE_RADIOBTN=no
  DEFAULT_wxUSE_SASH=no
  DEFAULT_wxUSE_SCROLLBAR=no
  DEFAULT_wxUSE_SLIDER=no
  DEFAULT_wxUSE_SPINBTN=no
  DEFAULT_wxUSE_SPINCTRL=no
  DEFAULT_wxUSE_SPLITTER=no
  DEFAULT_wxUSE_STATBMP=no
  DEFAULT_wxUSE_STATBOX=no
  DEFAULT_wxUSE_STATLINE=no
  DEFAULT_wxUSE_STATUSBAR=no
  DEFAULT_wxUSE_TAB_DIALOG=no
  DEFAULT_wxUSE_TOGGLEBTN=no
  DEFAULT_wxUSE_TOOLBAR=no
  DEFAULT_wxUSE_TOOLBAR_NATIVE=no
  DEFAULT_wxUSE_TOOLBAR_SIMPLE=no
  DEFAULT_wxUSE_TOOLTIPS=no
  DEFAULT_wxUSE_TREECTRL=no
  DEFAULT_wxUSE_POPUPWIN=no
  DEFAULT_wxUSE_TIPWINDOW=no
fi

WX_ARG_ENABLE(accel,       [  --enable-accel          use accelerators], wxUSE_ACCEL)
WX_ARG_ENABLE(button,      [  --enable-button         use wxButton class], wxUSE_BUTTON)
WX_ARG_ENABLE(bmpbutton,   [  --enable-bmpbutton      use wxBitmapButton class], wxUSE_BMPBUTTON)
WX_ARG_ENABLE(calendar,    [  --enable-calendar       use wxCalendarCtrl class], wxUSE_CALCTRL)
WX_ARG_ENABLE(caret,       [  --enable-caret          use wxCaret class], wxUSE_CARET)
WX_ARG_ENABLE(checkbox,    [  --enable-checkbox       use wxCheckBox class], wxUSE_CHECKBOX)
WX_ARG_ENABLE(checklst,    [  --enable-checklst       use wxCheckListBox (listbox with checkboxes) class], wxUSE_CHECKLST)
WX_ARG_ENABLE(choice,      [  --enable-choice         use wxChoice class], wxUSE_CHOICE)
WX_ARG_ENABLE(combobox,    [  --enable-combobox       use wxComboBox classes], wxUSE_COMBOBOX)
WX_ARG_ENABLE(gauge,       [  --enable-gauge          use wxGauge class], wxUSE_GAUGE)
WX_ARG_ENABLE(grid,        [  --enable-grid           use wxGrid class], wxUSE_GRID)
WX_ARG_ENABLE(newgrid,     [  --enable-newgrid        use new wxGrid class], wxUSE_NEW_GRID)
WX_ARG_ENABLE(imaglist,    [  --enable-imaglist       use wxImageList class], wxUSE_IMAGLIST)
WX_ARG_ENABLE(listbox,     [  --enable-listbox        use wxListBox class], wxUSE_LISTBOX)
WX_ARG_ENABLE(listctrl,    [  --enable-listctrl       use wxListCtrl class], wxUSE_LISTCTRL)
WX_ARG_ENABLE(notebook,    [  --enable-notebook       use wxNotebook class], wxUSE_NOTEBOOK)
WX_ARG_ENABLE(propsheet,   [  --enable-propsheet      use wxPropertySheet class], wxUSE_PROPSHEET)
WX_ARG_ENABLE(radiobox,    [  --enable-radiobox       use wxRadioBox class], wxUSE_RADIOBOX)
WX_ARG_ENABLE(radiobtn,    [  --enable-radiobtn       use wxRadioButton class], wxUSE_RADIOBTN)
WX_ARG_ENABLE(sash,        [  --enable-sash           use wxSashWindow class], wxUSE_SASH)
WX_ARG_ENABLE(scrollbar,   [  --enable-scrollbar      use wxScrollBar class and scrollable windows], wxUSE_SCROLLBAR)
WX_ARG_ENABLE(slider,      [  --enable-slider         use wxSlider class], wxUSE_SLIDER)
WX_ARG_ENABLE(spinbtn,     [  --enable-spinbtn        use wxSpinButton class], wxUSE_SPINBTN)
WX_ARG_ENABLE(spinctrl,    [  --enable-spinctrl       use wxSpinCtrl class], wxUSE_SPINCTRL)
WX_ARG_ENABLE(splitter,    [  --enable-splitter       use wxSplitterWindow class], wxUSE_SPLITTER)
WX_ARG_ENABLE(statbmp,     [  --enable-statbmp        use wxStaticBitmap class], wxUSE_STATBMP)
WX_ARG_ENABLE(statbox,     [  --enable-statbox        use wxStaticBox class], wxUSE_STATBOX)
WX_ARG_ENABLE(statline,    [  --enable-statline       use wxStaticLine class], wxUSE_STATLINE)
WX_ARG_ENABLE(stattext,    [  --enable-stattext       use wxStaticText class], wxUSE_STATTEXT)
WX_ARG_ENABLE(statusbar,   [  --enable-statusbar      use wxStatusBar class], wxUSE_STATUSBAR)
WX_ARG_ENABLE(tabdialog,   [  --enable-tabdialog      use wxTabControl class], wxUSE_TABDIALOG)
WX_ARG_ENABLE(textctrl,    [  --enable-textctrl       use wxTextCtrl class], wxUSE_TEXTCTRL)
WX_ARG_ENABLE(togglebtn,   [  --enable-togglebtn      use wxToggleButton class], wxUSE_TOGGLEBTN)
WX_ARG_ENABLE(toolbar,     [  --enable-toolbar        use wxToolBar class], wxUSE_TOOLBAR)
WX_ARG_ENABLE(tbarnative,  [  --enable-tbarnative     use native wxToolBar class], wxUSE_TOOLBAR_NATIVE)
WX_ARG_ENABLE(tbarsmpl,    [  --enable-tbarsmpl       use wxToolBarSimple class], wxUSE_TOOLBAR_SIMPLE)
WX_ARG_ENABLE(treectrl,    [  --enable-treectrl       use wxTreeCtrl class], wxUSE_TREECTRL)
WX_ARG_ENABLE(tipwindow,   [  --enable-tipwindow      use wxTipWindow class], wxUSE_TIPWINDOW)
WX_ARG_ENABLE(popupwin,    [  --enable-popupwin       use wxPopUpWindow class], wxUSE_POPUPWIN)

dnl ---------------------------------------------------------------------------
dnl common dialogs
dnl ---------------------------------------------------------------------------

WX_ARG_ENABLE(commondlg,   [  --enable-commondlg      use all common dialogs], wxUSE_COMMONDLGS)
WX_ARG_ENABLE(choicedlg,   [  --enable-choicedlg      use wxChoiceDialog], wxUSE_CHOICEDLG)
WX_ARG_ENABLE(coldlg,      [  --enable-coldlg         use wxColourDialog], wxUSE_COLOURDLG)
WX_ARG_ENABLE(filedlg,     [  --enable-filedlg        use wxFileDialog], wxUSE_FILEDLG)
WX_ARG_ENABLE(finddlg,     [  --enable-finddlg        use wxFindReplaceDialog], wxUSE_FINDREPLDLG)
WX_ARG_ENABLE(fontdlg,     [  --enable-fontdlg        use wxFontDialog], wxUSE_FONTDLG)
WX_ARG_ENABLE(dirdlg,      [  --enable-dirdlg         use wxDirDialog], wxUSE_DIRDLG)
WX_ARG_ENABLE(msgdlg,      [  --enable-msgdlg         use wxMessageDialog], wxUSE_MSGDLG)
WX_ARG_ENABLE(numberdlg,   [  --enable-numberdlg      use wxNumberEntryDialog], wxUSE_NUMBERDLG)
WX_ARG_ENABLE(splash,      [  --enable-splash         use wxSplashScreen], wxUSE_SPLASH)
WX_ARG_ENABLE(textdlg,     [  --enable-textdlg        use wxTextDialog], wxUSE_TEXTDLG)
WX_ARG_ENABLE(tipdlg,      [  --enable-tipdlg         use startup tips], wxUSE_STARTUP_TIPS)
WX_ARG_ENABLE(progressdlg, [  --enable-progressdlg    use wxProgressDialog], wxUSE_PROGRESSDLG)
WX_ARG_ENABLE(wizarddlg,   [  --enable-wizarddlg      use wxWizard], wxUSE_WIZARDDLG)

dnl ---------------------------------------------------------------------------
dnl misc GUI options
dnl ---------------------------------------------------------------------------

WX_ARG_ENABLE(menus,       [  --enable-menus          use wxMenu/wxMenuBar/wxMenuItem classes], wxUSE_MENUS)
WX_ARG_ENABLE(miniframe,   [  --enable-miniframe      use wxMiniFrame class], wxUSE_MINIFRAME)
WX_ARG_ENABLE(tooltips,    [  --enable-tooltips       use wxToolTip class], wxUSE_TOOLTIPS)
WX_ARG_ENABLE(splines,     [  --enable-splines        use spline drawing code], wxUSE_SPLINES)
WX_ARG_ENABLE(validators,  [  --enable-validators     use wxValidator and derived classes], wxUSE_VALIDATORS)
WX_ARG_ENABLE(busyinfo,    [  --enable-busyinfo       use wxBusyInfo], wxUSE_BUSYINFO)
WX_ARG_ENABLE(joystick,    [  --enable-joystick       use wxJoystick (Linux only)], wxUSE_JOYSTICK)
WX_ARG_ENABLE(metafile,    [  --enable-metafiles      use wxMetaFile (Windows only)], wxUSE_METAFILE)
WX_ARG_ENABLE(dragimage,   [  --enable-dragimage      use wxDragImage], wxUSE_DRAGIMAGE)

dnl ---------------------------------------------------------------------------
dnl support for image formats that do not rely on external library
dnl ---------------------------------------------------------------------------

WX_ARG_ENABLE(palette,     [  --enable-palette        use wxPalette class], wxUSE_PALETTE)
WX_ARG_ENABLE(image,       [  --enable-image          use wxImage class], wxUSE_IMAGE)
WX_ARG_ENABLE(gif,         [  --enable-gif            use gif images (GIF file format)], wxUSE_GIF)
WX_ARG_ENABLE(pcx,         [  --enable-pcx            use pcx images (PCX file format)], wxUSE_PCX)
WX_ARG_ENABLE(iff,         [  --enable-iff            use iff images (IFF file format)], wxUSE_IFF)
WX_ARG_ENABLE(pnm,         [  --enable-pnm            use pnm images (PNM file format)], wxUSE_PNM)
WX_ARG_ENABLE(xpm,         [  --enable-xpm            use xpm images (XPM file format)], wxUSE_XPM)
WX_ARG_ENABLE(ico_cur,     [  --enable-icocur         use Windows ICO and CUR formats], wxUSE_ICO_CUR)

fi

dnl General settings (needed for GUI and non-GUI compilations alike).
dnl Path separator; ':' for unix, ';' for OS/2
dnl Stem for flex output; lexyy for OS/2, lex.yy otherwise
case "${host}" in
  *-pc-os2_emx | *-pc-os2-emx )
    PATH_IFS=';'
dnl Really ought to text for this as meanwhile there are flex versions using
dnl lex.yy as well due to FAT support being more and more dropped...
    LEX_STEM="lexyy"
  ;;
  *)
    PATH_IFS=':'
    LEX_STEM="lex.yy"
  ;;
esac

dnl for GUI only

dnl cache the options values before (may be) aborting below
WX_ARG_CACHE_FLUSH

dnl check that no more than one toolkit is given and that if none are given that
dnl we have a default one

AC_MSG_CHECKING(for toolkit)

if test "$wxUSE_GUI" = "yes"; then

    if test "$USE_BEOS" = 1; then
        AC_MSG_ERROR([BeOS GUI is not supported yet, use --disable-gui])
    fi

    if test "$TOOLKIT_GIVEN" = 1; then
      dnl convert "yes" to 1 and "no" to 0
      for toolkit in `echo $ALL_TOOLKITS`; do
        var=wxUSE_$toolkit
        eval "value=\$${var}"
        eval "$var=`echo \$value | sed -e "s/yes/1/" -e "s/no/0/"`"
      done
    else
      dnl try to guess the most apropriate toolkit for this platform
      for toolkit in `echo $ALL_TOOLKITS`; do
        if test "$has_toolkit_in_cache" != 1; then
          var=DEFAULT_DEFAULT_wxUSE_$toolkit
        else
          var=DEFAULT_wxUSE_$toolkit
        fi
        eval "wxUSE_$toolkit=\$${var}"
      done
    fi

    dnl we suppose that expr is available (maybe there is a better way to do
    dnl this? what about using ALL_TOOLKITS? TODO)
    NUM_TOOLKITS=`expr ${wxUSE_GTK:-0} + ${wxUSE_MOTIF:-0} + ${wxUSE_MAC:-0}  \
                  + ${wxUSE_WINE:-0} + ${wxUSE_MSW:-0} + ${wxUSE_MGL:-0} + ${wxUSE_MICROWIN:-0} + ${wxUSE_X11:-0}`

    dnl Allow wxUSE_PM only for OS/2 with EMX.
    case "${host}" in
      *-pc-os2_emx | *-pc-os2-emx )
        NUM_TOOLKITS=`expr ${NUM_TOOLKITS} + ${wxUSE_PM:-0}`
    esac

    case "$NUM_TOOLKITS" in
      1)
      ;;
      0)
        AC_MSG_ERROR(Please specify a toolkit -- cannot determine the default for ${host})
      ;;
      *)
        AC_MSG_ERROR(Please specify at most one toolkit (maybe some are cached in configarg.cache?))
    esac

    dnl cache the wxUSE_<TOOLKIT> values too
    for toolkit in `echo $ALL_TOOLKITS`; do
      var=wxUSE_$toolkit
      eval "value=\$${var}"
      if test "x$value" != x; then
        cache_var=CACHE_$toolkit
        eval "cache=\$${cache_var}"
        if test "$cache" = 1; then
          echo "$var=$value" >> ${wx_arg_cache_file}
        fi
        if test "$value" = 1; then
          toolkit_echo=`echo $toolkit | tr [[A-Z]] [[a-z]]`
          AC_MSG_RESULT($toolkit_echo)
        fi
      fi
    done
else
    AC_MSG_RESULT(base ($host_alias hosted) only)
fi

dnl ---------------------------------------------------------------------------
dnl When we are using Cygwin with Motif/GTK+, we want it to appear like
dnl 'just' a POSIX platform, so the Win32 API must not be available
dnl ---------------------------------------------------------------------------
dnl (Windows-only piece)
wants_win32=0
doesnt_want_win32=0
case "${host}" in
  *-*-cygwin*)
      if test "$wxUSE_MSW" = 1 ; then
        wants_win32=1
      else
        doesnt_want_win32=1
      fi
  ;;
  *-*-mingw*)
      wants_win32=1
  ;;
esac

dnl NB: The two tests bellow are *NOT* mutually exclusive! They should only
dnl     take effect on Cygwin/Mingw and not other platforms.
if test "$wants_win32" = 1 ; then
    USE_UNIX=0
    USE_WIN32=1
    AC_DEFINE(__WIN32__)
    AC_DEFINE(__WIN95__)
    AC_DEFINE(__WINDOWS__)
    AC_DEFINE(__GNUWIN32__)
    AC_DEFINE(STRICT)
    AC_DEFINE(WINVER, 0x0400)
fi
if test "$doesnt_want_win32" = 1 ; then
    USE_UNIX=1
    USE_WIN32=0
fi
dnl (end of Windows-only piece)

if test "$USE_UNIX" = 1 ; then
    wxUSE_UNIX=yes
    AC_DEFINE(__UNIX__)
fi

dnl ---------------------------------------------------------------------------
dnl Checks for programs
dnl ---------------------------------------------------------------------------

dnl flush the cache because checking for programs might abort
AC_CACHE_SAVE

dnl cross-compiling support: we're cross compiling if the build system is
dnl different from the target one (assume host and target be always the same)
if test "$build" != "$host" ; then
    if test "$USE_WIN32" = 1 -o "$USE_DOS" = 1 -o "$USE_UNIX"; then
        CC=$host_alias-gcc
        CXX=$host_alias-c++
        AR=$host_alias-ar
        RANLIB=$host_alias-ranlib
        DLLTOOL=$host_alias-dlltool
        RESCOMP=$host_alias-windres
        LD=$host_alias-ld
        NM=$host_alias-nm
        STRIP=$host_alias-strip
    else
        AC_MSG_ERROR($build_alias -> $host_alias cross compilation not supported yet.)
    fi
fi

dnl C-compiler checks
dnl   defines CC with the compiler to use
dnl   defines GCC with yes if using gcc
dnl   defines GCC empty if not using gcc
dnl   defines CFLAGS
dnl
dnl this magic incantation is needed to prevent AC_PROG_CC from setting the
dnl default CFLAGS (something like "-g -O2") -- we don't need this as we add
dnl -g and -O flags ourselves below
CFLAGS=${CFLAGS:=}
AC_PROG_CC

dnl is -traditional needed for correct compilations
dnl   adds -traditional for gcc if needed
AC_PROG_GCC_TRADITIONAL

AC_LANG_SAVE
AC_LANG_CPLUSPLUS

dnl C++-compiler checks
dnl   defines CXX with the compiler to use
dnl   defines GXX with yes if using gxx
dnl   defines GXX empty if not using gxx
dnl   defines CXXFLAGS
dnl
dnl see CFLAGS line above
CXXFLAGS=${CXXFLAGS:=}
AC_PROG_CXX

AC_LANG_RESTORE

dnl ranlib command
dnl   defines RANLIB with the appropriate command
AC_PROG_RANLIB

dnl ar command
dnl   defines AR with the appropriate command
AC_CHECK_PROG(AR, ar, ar, ar)

dnl install checks
dnl   defines INSTALL with the appropriate command
AC_PROG_INSTALL

dnl   make install path absolute (if not already); will fail with MSDOS paths
case ${INSTALL} in
  /* ) # Absolute
     ;;
  *)
     INSTALL=`pwd`/${INSTALL} ;;
esac


case "${host}" in

    dnl The other BSD's should probably go in here too, since this is
    dnl to workaround a strange static lib BSDism.
    dnl Mac OS X install seems to ignore -p option...
    powerpc-*-darwin* )
        INSTALL_PROGRAM="cp -fp"
        INSTALL_DATA="cp -fp"
        ;;
    *)
        ;;
esac

dnl strip command
dnl   defines STRIP as strip or nothing if not found
AC_CHECK_PROG(STRIP, strip, strip, true)

dnl does make support "-include" (only GNU make does AFAIK)?
AC_CACHE_CHECK([if make is GNU make], wx_cv_prog_makeisgnu,
[
    if ( ${SHELL-sh} -c "${MAKE-make} --version" 2> /dev/null |
            egrep -s GNU > /dev/null); then
        wx_cv_prog_makeisgnu="yes"
    else
        wx_cv_prog_makeisgnu="no"
    fi
])

if test "x$wx_cv_prog_makeisgnu" = "xyes"; then
    IF_GNU_MAKE=""
else
    IF_GNU_MAKE="#"
fi

AC_SUBST(IF_GNU_MAKE)

dnl we don't need to check for VPATH support in GNU make - it does have it
if test "x$wx_cv_prog_makeisgnu" != "xyes"; then
dnl check if VPATH works
AC_CACHE_CHECK([if make supports VPATH], wx_cv_prog_makevpath, [
dnl create Makefile
cat - << EOF > confMake
check : file
	cp \$? \$@
	cp \$? final_file
EOF

if test ! -d sub ; then
  mkdir sub
fi
echo dummy > sub/file
${MAKE-make} -f confMake VPATH=sub 2>&5 > /dev/null
RESULT=$?
rm -f sub/file check final_file confMake
rmdir sub
if test "$RESULT" = 0; then
  wx_cv_prog_makevpath="yes"
else
  wx_cv_prog_makevpath="no"
fi
])

if test "x$wx_cv_prog_makevpath" != "xyes"; then
AC_MSG_ERROR([
You need a make-utility that is able to use the variable
VPATH correctly.
If your version of make does not support VPATH correctly,
please install GNU-make (possibly as gmake), and start
configure with the following command:
export MAKE=gmake; ./configure  for sh-type shells
setenv MAKE gmake; ./configure  for csh-type shells
Also please do remember to use gmake in this case every time
you are trying to compile.
])
fi dnl make without VPATH
fi dnl not GNU make

dnl YACC checks
dnl   defines YACC with the appropriate command
AC_PROG_YACC

dnl LEX checks
dnl   defines LEX with the appropriate command
dnl   defines LEXLIB with the appropriate library
AC_PROG_LEX

dnl needed for making link to setup.h
AC_PROG_LN_S

dnl ---------------------------------------------------------------------------
dnl When we are using gcc on OS/2, we want to be either using resources (PM)
dnl or a more complete POSIX emulation for Motif/GTK+/X11
dnl ---------------------------------------------------------------------------
dnl (OS/2-only piece)
case "${host}" in
  *-pc-os2_emx | *-pc-os2-emx )
      dnl Explicitly link -lstdcpp, since we are using "gcc" not "g++"/"c++".
      LIBS="$LIBS -lstdcpp"
      if test "$wxUSE_MOTIF" = 1 -o "$wxUSE_GTK" = 1 -o "$wxUSE_X11" = 1; then
          dnl More complete Unix emulation for unix-like ports
          dnl by linking in POSIX/2's cExt (if available).
          AC_CHECK_LIB(cExt, drand48, LIBS="$LIBS -lcExt")
      else
          dnl Include resources for the "native" port (wxPM).
          RESPROGRAMOBJ="\${top_srcdir}/include/wx/os2/wx.res"
      fi
  ;;
esac
dnl (end of OS/2-only piece)

dnl ------------------------------------------------------------------------
dnl Check for headers
dnl ------------------------------------------------------------------------

dnl test for strings.h needed under AIX, but do not check for it wxMac as
dnl it exists but is only a simple redirection to string.h and it is in
dnl conflict with Strings.h in FlatCarbon headers
if test "$wxUSE_MAC" != 1; then
  dnl defines HAVE_STRINGS_H
  AC_CHECK_HEADERS(strings.h)
fi

dnl defines HAVE_STDLIB_H
AC_CHECK_HEADERS(stdlib.h)
dnl defines HAVE_MALLOC_H
AC_CHECK_HEADERS(malloc.h)
dnl defines HAVE_UNISTD_H
AC_CHECK_HEADERS(unistd.h)
dnl defines HAVE_WCHAR_H
AC_CHECK_HEADERS(wchar.h)

dnl maybe wchar_t is in wcstr.h if we don't have wchar.h?
if test "$ac_cv_header_wchar_h" != "yes"; then
    dnl defines HAVE_WCSTR_H
    AC_CHECK_HEADERS(wcstr.h)
fi

dnl defines HAVE_FNMATCH_H
AC_CHECK_HEADERS(fnmatch.h)

if test "x$ac_cv_header_fnmatch_h" = "xyes"; then
    AC_CHECK_FUNCS(fnmatch)
fi

dnl defines HAVE_LANGINFO_H (GNU libc locale parameters)
AC_CHECK_HEADERS(langinfo.h)

if test "$wxUSE_GUI" = "yes"; then
    if test "$wxUSE_UNIX" = "yes"; then
        dnl defines HAVE_X11_XKBLIB_H
        AC_CHECK_HEADERS(X11/XKBlib.h)
    fi
fi

dnl ---------------------------------------------------------------------------
dnl Checks for compiler characteristics
dnl ---------------------------------------------------------------------------

dnl defines const to be empty if c-compiler does not support const fully
AC_C_CONST
dnl defines inline to a sensible value for the c-compiler
AC_C_INLINE

dnl check the sizes of integral types (give some reasonable default values for
dnl cross-compiling)
dnl   defines the size of certain types of variables in SIZEOF_<TYPE>
AC_CHECK_SIZEOF(char, 1)
AC_CHECK_SIZEOF(short, 2)
AC_CHECK_SIZEOF(void *, 4)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)

case "${host}" in
    arm-*-linux* )
        AC_CHECK_SIZEOF(long long, 8)
    ;;
    *-hp-hpux* )
        AC_CHECK_SIZEOF(long long, 0)
        if test "$ac_cv_sizeof_long_long" != "0"; then
            dnl HPUX 10.20 headers need this define in order to use long long definitions
            CPPFLAGS="$CPPFLAGS -D_INCLUDE_LONGLONG"
        fi
    ;;
    * )
        AC_CHECK_SIZEOF(long long, 0)
esac

dnl we have to do it ourselves because SGI/Irix's stdio.h does not include
dnl wchar_t and AC_CHECK_SIZEOF only includes stdio.h
dnl Mac OS X does not provide wchar.h and wchar_t is defined by stdlib.h (GD)
AC_CACHE_CHECK([size of wchar_t], wx_cv_sizeof_wchar_t,
[
    AC_TRY_RUN(
        [
            /* DJGPP only has fake wchar_t: */
            #ifdef __DJGPP__
            #  error "fake wchar_t"
            #endif
            #ifdef HAVE_WCHAR_H
            #  ifdef __CYGWIN__
            #    include <stddef.h>
            #  endif
            #  include <wchar.h>
            #endif
            #ifdef HAVE_STDLIB_H
            #  include <stdlib.h>
            #endif
            #include <stdio.h>
            int main()
            {
                FILE *f=fopen("conftestval", "w");
                if (!f) exit(1);
                fprintf(f, "%i", sizeof(wchar_t));
                exit(0);
            }
        ],
        wx_cv_sizeof_wchar_t=`cat conftestval`,
        wx_cv_sizeof_wchar_t=0,
        [
            case "${host}" in
              *-pc-msdosdjgpp )
                wx_cv_sizeof_wchar_t=0
                ;;
              * )
                wx_cv_sizeof_wchar_t=4
                ;;
            esac
        ]
    )
])

AC_DEFINE_UNQUOTED(SIZEOF_WCHAR_T, $wx_cv_sizeof_wchar_t)

dnl check for large file support
AC_SYS_LARGEFILE

dnl we need to define _FILE_OFFSET_BITS or _LARGE_FILES on the compiler command
dnl line because otherwise the system headers risk being included before
dnl wx/defs.h which defines these constants leading to inconsistent
dnl sizeof(off_t) in different source files of the same program and linking
dnl problems
if test "x$wx_largefile" = "xyes"; then
    if test "x$ac_cv_sys_file_offset_bits" = "x64"; then
        WX_LARGEFILE_FLAGS="-D_FILE_OFFSET_BITS=64 -D_LARGE_FILES"
    else
        WX_LARGEFILE_FLAGS="-D_LARGE_FILES"
    fi
    CPPFLAGS="$CPPFLAGS $WX_LARGEFILE_FLAGS"
fi

dnl check for bytesex stuff (don't use AC_C_BIGENDIAN to allow cross-compiling)
WX_C_BIGENDIAN

dnl check for iostream (as opposed to iostream.h) standard header
WX_CPP_NEW_HEADERS(, AC_DEFINE(wxUSE_IOSTREAMH))

dnl check whether C++ compiler supports bool built-in type
WX_CPP_BOOL

dnl check whether C++ compiler supports explicit keyword
WX_CPP_EXPLICIT

dnl ---------------------------------------------------------------------------
dnl Define search path for includes and libraries: all headers and libs will be
dnl looked for in all directories of this path
dnl ---------------------------------------------------------------------------

dnl Notice that /usr/include should *not* be in this list, otherwise it breaks
dnl compilation on Solaris/AIX/... with gcc because standard (non ANSI C)
dnl headers are included instead of the "fixed" (ANSI-fied) gcc ones.
dnl
dnl Also try to put all directories which may contain X11R6 before those which
dnl may contain X11R5/4 - we want to use R6 on machines which have both!
SEARCH_INCLUDE="\
    /usr/local/include        \
                              \
    /usr/Motif-1.2/include    \
    /usr/Motif-2.1/include    \
                              \
    /usr/include/Motif1.2     \
    /opt/xpm/include/X11      \
    /opt/GBxpm/include/       \
    /opt/GBxpm/X11/include/   \
                              \
    /usr/Motif1.2/include     \
    /usr/dt/include           \
    /usr/openwin/include      \
                              \
    /usr/include/Xm           \
                              \
    /usr/X11R6/include        \
    /usr/X11R6.4/include      \
    /usr/X11R5/include        \
    /usr/X11R4/include        \
                              \
    /usr/include/X11R6        \
    /usr/include/X11R5        \
    /usr/include/X11R4        \
                              \
    /usr/local/X11R6/include  \
    /usr/local/X11R5/include  \
    /usr/local/X11R4/include  \
                              \
    /usr/local/include/X11R6  \
    /usr/local/include/X11R5  \
    /usr/local/include/X11R4  \
                              \
    /usr/X11/include          \
    /usr/include/X11          \
    /usr/local/X11/include    \
    /usr/local/include/X11    \
                              \
    /usr/X386/include         \
    /usr/x386/include         \
    /usr/XFree86/include/X11  \
                              \
    X:/XFree86/include        \
    X:/XFree86/include/X11    \
                              \
    /usr/include/gtk          \
    /usr/local/include/gtk    \
    /usr/include/glib         \
    /usr/local/include/glib   \
                              \
    /usr/include/qt           \
    /usr/local/include/qt     \
                              \
    /usr/include/windows      \
    /usr/include/wine         \
    /usr/local/include/wine   \
                              \
    /usr/unsupported/include  \
    /usr/athena/include       \
    /usr/local/x11r5/include  \
    /usr/lpp/Xamples/include  \
                              \
    /usr/openwin/share/include"

SEARCH_LIB="`echo "$SEARCH_INCLUDE" | sed s/include/lib/g` "

dnl ------------------------------------------------------------------------
dnl Check for libraries
dnl ------------------------------------------------------------------------

dnl flush the cache because checking for libraries below might abort
AC_CACHE_SAVE

dnl check for glibc version
dnl
dnl VZ: I have no idea why had this check been there originally, but now
dnl     we could probably do without it by just always adding _GNU_SOURCE
if test "$USE_LINUX" = 1; then
    AC_CACHE_CHECK([for glibc 2.1 or later], wx_cv_lib_glibc21,[
        AC_TRY_COMPILE([#include <features.h>],
            [
                #if (__GLIBC__ < 2) || (__GLIBC_MINOR__ < 1)
                    #error not glibc2.1
                #endif
            ],
            [
                wx_cv_lib_glibc21=yes
            ],
            [
                wx_cv_lib_glibc21=no
            ]
        )
    ])
    if test "$wx_cv_lib_glibc21" = "yes"; then
        AC_DEFINE(wxHAVE_GLIBC2)
    fi
fi

dnl we may need _GNU_SOURCE for 2 things:
dnl
dnl  1. to get PTHREAD_MUTEX_RECURSIVE with glibc 2.1+ (strictly speaking we
dnl  only need _XOPEN_SOURCE=500 but just defining this disables _BSD_SOURCE
dnl  which breaks libtiff compilation, so it is simpler to just define
dnl  _GNU_SOURCE to get everything)
dnl
dnl  2. for Unicode functions
if test "x$wx_cv_lib_glibc21" = "xyes"; then
    if test "$wxUSE_UNICODE" = "yes" -o "$wxUSE_THREADS" = "yes"; then
        AC_DEFINE(_GNU_SOURCE)
    fi
fi

dnl ---------------------------------------------------------------------------
dnl Optional libraries
dnl
dnl   --with-<lib>=sys
dnl       looks for system library and fails if not found
dnl
dnl   --with-<lib>
dnl   --with-<lib>=yes
dnl       looks for system library and, if not found, prints a warning,
dnl       falls back to the builtin wx version, and continues configuration
dnl
dnl   --with-<lib>=builtin
dnl       uses builtin wx version without searching for system library
dnl
dnl   --with-<lib>=no
dnl   --without-<lib>
dnl       do not use library (neither system nor builtin wx version)
dnl
dnl ---------------------------------------------------------------------------

dnl ------------------------------------------------------------------------
dnl Check for regex libraries
dnl ------------------------------------------------------------------------

REGEX_INCLUDE=
if test "$wxUSE_REGEX" != "no"; then
    AC_DEFINE(wxUSE_REGEX)

    if test "$wxUSE_REGEX" = "sys" -o "$wxUSE_REGEX" = "yes" ; then
        dnl according to Unix 98 specs, regcomp() is in libc but I believe that
        dnl on some old systems it may be in libregex - check for it too?
        AC_CHECK_HEADER(regex.h, AC_CHECK_FUNCS(regcomp))

        if test "x$ac_cv_func_regcomp" != "xyes"; then
            if test "$wxUSE_REGEX" = "sys" ; then
                AC_MSG_ERROR([system regex library not found! Use --with-regex to use built-in version])
            else
                AC_MSG_WARN([system regex library not found, will use built-in instead])
                wxUSE_REGEX=builtin
            fi
        else
            dnl we are using the system library
            wxUSE_REGEX=sys
        fi
    fi

    if test "$wxUSE_REGEX" = "builtin" ; then
        REGEX_INCLUDE="-I\${top_srcdir}/src/regex"
    fi
fi

dnl ------------------------------------------------------------------------
dnl Check for zlib compression library
dnl ------------------------------------------------------------------------

ZLIB_INCLUDE=
ZLIB_LINK=
if test "$wxUSE_ZLIB" != "no" ; then
    AC_DEFINE(wxUSE_ZLIB)

    if test "$wxUSE_ZLIB" = "sys" -o "$wxUSE_ZLIB" = "yes" ; then
        dnl don't test for zlib under Mac -- its verson there is 1.1.3 but we
        dnl should still use it because hopefully (can someone confirm this?)
        dnl Apple did fix the security problem in it and not using the system
        dnl library results in a whole bunch of warnings when linking with
        dnl Carbon framework
        if test "$USE_DARWIN" = 1; then
            system_zlib_h_ok="yes"
        else
            dnl we have troubles with ancient zlib versions (e.g. 1.0.4 is
            dnl known to not work) and although I don't know which is
            dnl the minimal required version it's safer to test for 1.1.4 as
            dnl it fixes a security problem in 1.1.3 -- and hopefully nobody
            dnl has anything more ancient (1.1.3 was released in July 1998)
            dnl anyhow
            AC_CACHE_CHECK([for zlib.h >= 1.1.4], ac_cv_header_zlib_h,
                AC_TRY_RUN(
                    [
                        dnl zlib.h defines ZLIB_VERSION="x.y.z"
                        #include <zlib.h>
                        #include <stdio.h>

                        dnl don't use the brackets as quotes, we need them
                        changequote(,)
                        int main()
                        {
                            FILE *f=fopen("conftestval", "w");
                            if (!f) exit(1);
                            fprintf(f, "%s",
                                    ZLIB_VERSION[0] == '1' &&
                                    (ZLIB_VERSION[2] > '1' ||
                                    (ZLIB_VERSION[2] == '1' &&
                                     ZLIB_VERSION[4] >= '4')) ? "yes" : "no");
                            exit(0);
                        }
                        changequote([,])
                    ],
                    ac_cv_header_zlib_h=`cat conftestval`,
                    ac_cv_header_zlib_h=no,
                    dnl cross-compiling: test if we have any zlib.h
                    AC_CHECK_HEADER(zlib.h)
                )
            )

            system_zlib_h_ok=$ac_cv_header_zlib_h
        fi

        if test "$system_zlib_h_ok" = "yes"; then
            AC_CHECK_LIB(z, deflate, ZLIB_LINK=" -lz")
        fi

        if test "x$ZLIB_LINK" = "x" ; then
            if test "$wxUSE_ZLIB" = "sys" ; then
                AC_MSG_ERROR([zlib library not found or too old! Use --with-zlib=builtin to use built-in version])
            else
                AC_MSG_WARN([zlib library not found or too old, will use built-in instead])
                wxUSE_ZLIB=builtin
            fi
        else
            dnl we are using the system library
            wxUSE_ZLIB=sys
        fi
    fi

    if test "$wxUSE_ZLIB" = "builtin" ; then
        ZLIB_INCLUDE="-I\${top_srcdir}/src/zlib"
    fi
fi

dnl ------------------------------------------------------------------------
dnl Check for png library
dnl ------------------------------------------------------------------------

PNG_INCLUDE=
PNG_LINK=
if test "$wxUSE_LIBPNG" != "no" ; then
    AC_DEFINE(wxUSE_LIBPNG)

    if test "$wxUSE_MGL" = 1 -a "$wxUSE_LIBPNG" = "builtin" ; then
        AC_MSG_WARN([wxMGL doesn't work with builtin png library, will use MGL one instead])
        wxUSE_LIBPNG=sys
    fi

    dnl for the check below to have a chance to succeed, we must already have
    dnl libz somewhere (don't do this when bulding wxMGL since its libpng
    dnl doesn't depend on zlib)
    if test "$wxUSE_MGL" != 1 -a "$wxUSE_LIBPNG" = "sys" -a "$wxUSE_ZLIB" != "sys" ; then
        AC_MSG_WARN([system png library doesn't work without system zlib, will use built-in instead])
        wxUSE_LIBPNG=builtin
    fi

    if test "$wxUSE_MGL" != 1 ; then
        dnl Don't check for libpng when building wxMGL, libmgl contains it
        if test "$wxUSE_LIBPNG" = "sys" -o "$wxUSE_LIBPNG" = "yes" ; then
            dnl libpng version 0.9 is known to not work, if an even newer
            dnl version is required, just bump it up in the test below
            AC_CACHE_CHECK([for png.h > 0.90], ac_cv_header_png_h,
                AC_TRY_RUN(
                    [
                        dnl png.h defines PNG_LIBPNG_VER=number
                        #include <png.h>
                        #include <stdio.h>

                        int main()
                        {
                            FILE *f=fopen("conftestval", "w");
                            if (!f) exit(1);
                            fprintf(f, "%s",
                                     PNG_LIBPNG_VER > 90 ? "yes" : "no");
                            exit(0);
                        }
                    ],
                    ac_cv_header_png_h=`cat conftestval`,
                    ac_cv_header_png_h=no,
                    dnl cross-compiling: test if we have any png.h
                    AC_CHECK_HEADER(png.h)
                )
            )

            if test "$ac_cv_header_png_h" = "yes"; then
                AC_CHECK_LIB(png, png_check_sig, PNG_LINK=" -lpng", , [-lz -lm])
            fi

            if test "x$PNG_LINK" = "x" ; then
                if test "$wxUSE_LIBPNG" = "sys" ; then
                    AC_MSG_ERROR([system png library not found or too old! Use --with-libpng=builtin to use built-in version])
                else
                    AC_MSG_WARN([system png library not found or too old, will use built-in instead])
                    wxUSE_LIBPNG=builtin
                fi
            else
                dnl we are using the system library
                wxUSE_LIBPNG=sys
            fi
        fi
    fi

    if test "$wxUSE_LIBPNG" = "builtin" ; then
        PNG_INCLUDE="-I\${top_srcdir}/src/png"
    fi

    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS png"
fi

dnl ------------------------------------------------------------------------
dnl Check for jpeg library
dnl ------------------------------------------------------------------------

JPEG_INCLUDE=
JPEG_LINK=
if test "$wxUSE_LIBJPEG" != "no" ; then
    AC_DEFINE(wxUSE_LIBJPEG)

    if test "$wxUSE_MGL" = 1 -a "$wxUSE_LIBJPEG" = "builtin" ; then
        AC_MSG_WARN([wxMGL doesn't work with builtin jpeg library, will use MGL one instead])
        wxUSE_LIBJPEG=sys
    fi

    if test "$wxUSE_MGL" != 1 ; then
        dnl Don't check for libjpeg when building wxMGL, libmgl contains it
        if test "$wxUSE_LIBJPEG" = "sys" -o "$wxUSE_LIBJPEG" = "yes" ; then
            dnl can't use AC_CHECK_HEADER as jconfig.h defines things like
            dnl HAVE_STDLIB_H which are already defined and this provokes
            dnl a compiler warning which configure considers as an error...
            AC_MSG_CHECKING(for jpeglib.h)
            AC_CACHE_VAL(ac_cv_header_jpeglib_h,
                AC_TRY_COMPILE(
                    [
                        #undef HAVE_STDLIB_H
                        #include <stdio.h>
                        #include <jpeglib.h>
                    ],
                    [
                    ],
                    ac_cv_header_jpeglib_h=yes,
                    ac_cv_header_jpeglib_h=no
                )
            )
            AC_MSG_RESULT($ac_cv_header_jpeglib_h)

            if test "$ac_cv_header_jpeglib_h" = "yes"; then
                AC_CHECK_LIB(jpeg, jpeg_read_header, JPEG_LINK=" -ljpeg")
            fi

            if test "x$JPEG_LINK" = "x" ; then
                if test "$wxUSE_LIBJPEG" = "sys" ; then
                    AC_MSG_ERROR([system jpeg library not found! Use --with-libjpeg=builtin to use built-in version])
                else
                    AC_MSG_WARN([system jpeg library not found, will use built-in instead])
                    wxUSE_LIBJPEG=builtin
                fi
            else
                dnl we are using the system library
                wxUSE_LIBJPEG=sys
            fi
        fi
    fi

    if test "$wxUSE_LIBJPEG" = "builtin" ; then
        JPEG_INCLUDE="-I\${top_srcdir}/src/jpeg"
    fi
fi

dnl ------------------------------------------------------------------------
dnl Check for tiff library
dnl ------------------------------------------------------------------------

TIFF_INCLUDE=
TIFF_LINK=
TIFF_PREREQ_LINKS=-lm
if test "$wxUSE_LIBTIFF" != "no" ; then
    AC_DEFINE(wxUSE_LIBTIFF)

    if test "$wxUSE_LIBTIFF" = "sys" -o "$wxUSE_LIBTIFF" = "yes" ; then
        dnl libtiff may depend on libjpeg and libz so use them in the test
        dnl below or it would fail
        if test "$wxUSE_LIBJPEG" = "sys"; then
            TIFF_PREREQ_LINKS="$TIFF_PREREQ_LINKS $JPEG_LINK"
        fi
        if test "$wxUSE_ZLIB" = "sys"; then
            TIFF_PREREQ_LINKS="$TIFF_PREREQ_LINKS $ZLIB_LINK"
        fi
        AC_CHECK_HEADER(tiffio.h,
                        AC_CHECK_LIB(tiff, TIFFError,
                                     TIFF_LINK=" -ltiff",
                                     ,
                                     $TIFF_PREREQ_LINKS)
                       )

        if test "x$TIFF_LINK" = "x" ; then
            if test "$wxUSE_LIBTIFF" = "sys" ; then
                AC_MSG_ERROR([system tiff library not found! Use --with-libtiff=builtin to use built-in version])
            else
                AC_MSG_WARN([system tiff library not found, will use built-in instead])
                wxUSE_LIBTIFF=builtin
            fi
        else
            dnl we are using the system library
            wxUSE_LIBTIFF=sys
        fi
    fi

    if test "$wxUSE_LIBTIFF" = "builtin" ; then
        TIFF_INCLUDE="-I\${top_srcdir}/src/tiff"
    fi
fi

dnl ----------------------------------------------------------------
dnl search for toolkit (widget sets)
dnl ----------------------------------------------------------------

AFMINSTALL=
WIN32INSTALL=

TOOLKIT=
TOOLKIT_INCLUDE=
WIDGET_SET=

dnl are we building for a win32 target environment?
dnl If so, setup common stuff needed for both GUI and Base libs.
if test "$USE_WIN32" = 1 ; then
    AC_CHECK_HEADERS(w32api.h)
    AC_CHECK_HEADER(windows.h, [],
    [
        AC_MSG_ERROR(please set CFLAGS to contain the location of windows.h)
    ])

    dnl check if can use _WIN32_IE macro
    AC_CACHE_CHECK([if w32api has good enough MSIE support], wx_cv_w32api_win32_ie,
    [
      AC_TRY_COMPILE([#include <w32api.h>],
                     [
                       #define wxCHECK_W32API_VERSION( major, minor ) \
                       ( defined( __W32API_MAJOR_VERSION ) && defined( __W32API_MINOR_VERSION ) \
                       && ( ( __W32API_MAJOR_VERSION > (major) ) \
                       || ( __W32API_MAJOR_VERSION == (major) && __W32API_MINOR_VERSION >= (minor))))

                       #if !wxCHECK_W32API_VERSION(1,1)
                       #error You need w32api 1.1 or newer
                       #endif
                     ], [
                        wx_cv_w32api_win32_ie=yes
                     ], [
                        wx_cv_w32api_win32_ie=no
                     ])
    ])
    if test "$wx_cv_w32api_win32_ie" = "yes" ; then
        CPPFLAGS="$CPPFLAGS -D_WIN32_IE=0x400"
    fi

    dnl --- FIXME: This is still a somewhat random list of libs,
    dnl ---        some of them should probably be included conditionally.
    LIBS="$LIBS -lwinspool -lwinmm -lshell32 -lcomctl32 -lctl3d32 -ladvapi32 -lwsock32"

    case "${host}" in
        *-*-cygwin* )
            dnl Cygwin doesn't include these by default
            LIBS="$LIBS -lkernel32 -luser32 -lgdi32 -lcomdlg32"
            TOOLCHAIN_DEFS="${TOOLCHAIN_DEFS} -D__WIN95__"
    esac

    dnl add extra odbc libs if we have compiled in odbc
    if test "$wxUSE_ODBC" = "yes" ; then
        LIBS=" -lodbc32 -lole32 -loleaut32 $LIBS"
    fi

    RESFLAGS="--include-dir \$(top_srcdir)/include --include-dir \$(top_srcdir)/\$(program_dir) --define __WIN32__ --define __WIN95__ --define __GNUWIN32__"
    RESPROGRAMOBJ="\$(PROGRAM)_resources.o"

    dnl install Win32-specific files in "make install"
    WIN32INSTALL=win32install
fi

if test "$USE_DARWIN" = 1; then
    dnl Mac OS X/Darwin GCC uses precompiled headers by default
    dnl this can cause problems both when compiling wxMac and wxBase
    if test "$wxUSE_PRECOMP" = "yes"; then
        CPPFLAGS="$CPPFLAGS -cpp-precomp"
    else
        CPPFLAGS="$CPPFLAGS -no-cpp-precomp"
    fi
fi

if test "$wxUSE_GUI" = "yes"; then
    USE_GUI=1

    GUI_TK_LIBRARY=

    WXGTK12=
    WXGTK127=
    WXGTK20=

    if test "$wxUSE_MSW" = 1 ; then
        TOOLKIT=MSW
        GUIDIST=MSW_DIST

        dnl -mwindows causes a heap of other default gui libs to be linked in.
        dnl FIXME: If cygwin needs this, please push it above, if not, please
        dnl        remove this comment :-)
        case "${host}" in
            *-*-mingw32* )
                LDFLAGS="$LDFLAGS -Wl,--subsystem,windows -mwindows"
        esac
    fi

    if test "$wxUSE_GTK" = 1; then
        AC_MSG_CHECKING([for GTK+ version])

        gtk_version_cached=1
        AC_CACHE_VAL(wx_cv_lib_gtk,
            [
                dnl stupid GTK+ AM macros produce their own messages, so we
                dnl have to pass to the next line
                gtk_version_cached=0
                AC_MSG_RESULT()

                dnl we must link against lgthread unless the user
                dnl used --disable-threads
                GTK_MODULES=
                if test "$wxUSE_THREADS" = "yes"; then
                    GTK_MODULES=gthread
                fi

                dnl note that if we fail to find GTK2 we abort and don't fall
                dnl back to GTK1.x
                wx_cv_lib_gtk=
                if test "x$wxUSE_GTK2" = "xyes"; then
                    AM_PATH_GTK_2_0(2.0.0, wx_cv_lib_gtk=2.0, , $GTK_MODULES)
                else
                    AM_PATH_GTK(1.2.7, wx_cv_lib_gtk=1.2.7, , $GTK_MODULES)

                    if test -z "$wx_cv_lib_gtk"; then
                        AM_PATH_GTK(1.2.3, wx_cv_lib_gtk=1.2.3, , $GTK_MODULES)
                    fi
                fi

                if test -z "$wx_cv_lib_gtk"; then
                    dnl looks better in AC_MSG_RESULT
                    wx_cv_lib_gtk=none
                else
                    dnl we need to cache GTK_CFLAGS and GTK_LIBS for the
                    dnl subsequent runs
                    wx_cv_cflags_gtk=$GTK_CFLAGS
                    wx_cv_libs_gtk=$GTK_LIBS
                fi
            ]
        )

        dnl if it wasn't cached, the messages from AM_PATH_GTK() above are
        dnl enough
        if test "$gtk_version_cached" = 1; then
            AC_MSG_RESULT($wx_cv_lib_gtk)
        fi

        case "$wx_cv_lib_gtk" in
            2.0)    WXGTK20=1
                    TOOLKIT_VERSION=2
                    ;;
            1.2.7)  WXGTK127=1
                    WXGTK12=1
                    ;;
            1.2.3)  WXGTK12=1
                    ;;
            *)      AC_MSG_ERROR([
Please check that gtk-config is in path, the directory
where GTK+ libraries are installed (returned by
'gtk-config --libs' command) is in LD_LIBRARY_PATH or
equivalent variable and GTK+ is version 1.2.3 or above.
                            ])
                    ;;
        esac

        if test "$WXGTK20" = 1; then
            if test "$wxUSE_PRINTING_ARCHITECTURE" = "yes" ; then
                PKG_CHECK_MODULES(PANGOFT2, pangoft2,
                    [
                        CXXFLAGS="$CXXFLAGS $PANGOFT2_CFLAGS"
                        LIBS="$LIBS $PANGOFT2_LIBS"
                    ],
                    [
                        AC_MSG_WARN([pangoft2 library not found, library will be compiled without printing support])
                        wxUSE_PRINTING_ARCHITECTURE="no"
                    ]
                )
            fi
        else
            if test "$wxUSE_UNICODE" = "yes"; then
                AC_MSG_WARN([Unicode configuration not supported with GTK+ 1.x])
                wxUSE_UNICODE=no
            fi
        fi

        dnl we need poll() in src/gtk/app.cpp (we know that Darwin doesn't
        dnl have it but we do the check for the others)
        if test "$USE_DARWIN" != 1; then
            AC_CHECK_FUNCS(poll)
        fi

        TOOLKIT_INCLUDE="$wx_cv_cflags_gtk"
        GUI_TK_LIBRARY="$wx_cv_libs_gtk"

        AFMINSTALL=afminstall
        TOOLKIT=GTK
        GUIDIST=GTK_DIST

        dnl test for XIM support in libgdk
        AC_CHECK_LIB(gdk, gdk_im_open, AC_DEFINE(HAVE_XIM))
    fi

    if test "$wxUSE_MGL" = 1; then
        AC_MSG_CHECKING(for SciTech MGL library)
        if test "x$MGL_ROOT" = x ; then
            AC_MSG_RESULT(not found)
            AC_MSG_ERROR([Cannot find MGL library. Make sure MGL_ROOT is set.])
        else
            AC_MSG_RESULT($MGL_ROOT)
        fi

        dnl Find MGL library that we want
        dnl FIXME_MGL - test for MGL variants for freebsd etc.
        case "${host}" in
            *-*-linux* )
              mgl_os="linux/gcc/glibc*"
              ;;
            *-pc-msdosdjgpp )
              mgl_os=dos32/dj2
              ;;
            *)
              AC_MSG_ERROR(This system type ${host} is not yet supported by wxMGL.)
        esac

        mgl_lib_type=""

        if test "$wxUSE_DEBUG_FLAG" = yes ; then
            if test -f $MGL_ROOT/lib/debug/$mgl_os/libmgl.a -o \
                    -f $MGL_ROOT/lib/debug/$mgl_os/libmgl.so; then
                mgl_lib_type=debug
            fi
        fi
        if test "x$mgl_lib_type" = x ; then
            if test -f $MGL_ROOT/lib/release/$mgl_os/libmgl.a -o \
                    -f $MGL_ROOT/lib/release/$mgl_os/libmgl.so; then
                mgl_lib_type=release
            else
                AC_MSG_ERROR([Cannot find MGL libraries, make sure they are compiled.])
            fi
        fi

        wxUSE_UNIVERSAL="yes"

        TOOLKIT_INCLUDE="-I$MGL_ROOT/include"
        GUI_TK_LIBRARY="-L$MGL_ROOT/lib/$mgl_lib_type/$mgl_os -lmgl -lmglcpp -lpm"

        AFMINSTALL=afminstall
        TOOLKIT=MGL
        GUIDIST=MGL_DIST
    fi

    if test "$wxUSE_MICROWIN" = 1; then
        AC_MSG_CHECKING(for MicroWindows)
        if test "x$MICROWINDOWS" = x ; then
            AC_MSG_RESULT(not found)
            AC_MSG_ERROR([Cannot find MicroWindows library. Make sure MICROWINDOWS is set.])
        else
            AC_MSG_RESULT($MICROWINDOWS)
        fi

        if test -f $MICROWINDOWS/lib/libmwin.a; then
            AC_MSG_RESULT(MicroWindows' libraries found.)
        else
            AC_MSG_ERROR([Cannot find MicroWindows libraries, make sure they are compiled.])
        fi

        TOOLKIT_INCLUDE="-I$MICROWINDOWS/include"
        GUI_TK_LIBRARY="-L$MICROWINDOWS/lib -lmwin -lmwengine -mwfonts -mwdrivers -mwinlib"

        wxUSE_UNIVERSAL="yes"

        AFMINSTALL=afminstall
        TOOLKIT=MICROWIN
        GUIDIST=MICROWIN_DIST

        TOOLCHAIN_DEFS="${TOOLCHAIN_DEFS} -D__WXMSW__ -D__WIN95__ -D__WIN32__ -DMWIN -DMICROWIN_NOCONTROLS -DMICROWIN_TODO=1"
    fi

    if test "$wxUSE_X11" = 1; then
        dnl use standard macros to check for X headers/libs, this brings support
        dnl for the standard configure options --x-includes and --x-libraries
        AC_PATH_XTRA

        if test "$no_x" = "yes"; then
          AC_MSG_ERROR(X11 not found, please use --x-includes and/or --x-libraries options)
        fi

        GUI_TK_LIBRARY="$X_LIBS"
        TOOLKIT_INCLUDE="$X_CFLAGS"
        AFMINSTALL=afminstall
        COMPILED_X_PROGRAM=0

        if test "$wxUSE_NANOX" = "yes"; then
            AC_MSG_CHECKING(for MicroWindows/NanoX distribution)
            if test "x$MICROWIN" = x ; then
                AC_MSG_RESULT(not found)
                AC_MSG_ERROR([Cannot find MicroWindows library. Make sure MICROWIN is set.])
            else
                AC_MSG_RESULT($MICROWIN)
                AC_DEFINE(wxUSE_NANOX)
            fi
        fi

        xpm_link=
        AC_MSG_CHECKING(for Xpm library)
        WX_PATH_FIND_LIBRARIES($SEARCH_LIB,Xpm)
        if test "$ac_find_libraries" != "" ; then
            WX_LINK_PATH_EXIST($ac_find_libraries,$GUI_TK_LIBRARY)
            GUI_TK_LIBRARY="$GUI_TK_LIBRARY$ac_path_to_link"
            xpm_link=" -lXpm"
            AC_DEFINE(wxHAVE_LIB_XPM)
            AC_MSG_RESULT(found at $ac_find_libraries)
        else
            AC_TRY_COMPILE(
                [
                    #include <X11/xpm.h>
                ],
                [
                    int version;
                    version = XpmLibraryVersion();
                ],
                [
                    xpm_link=" -lXpm"
                    AC_DEFINE(wxHAVE_LIB_XPM)
                    AC_MSG_RESULT(found in default search path)
                    COMPILED_X_PROGRAM=0
                ],
                [
                    AC_MSG_RESULT(no)
                    AC_MSG_WARN(library will be compiled without support for images in XPM format)
                ]
            )
        fi

        if test "$wxUSE_UNICODE" = "yes"; then
                PKG_CHECK_MODULES(PANGOX, pangox,
                    [
                        CXXFLAGS="$CXXFLAGS $PANGOX_CFLAGS"
                        LIBS="$LIBS $PANGOX_LIBS"
                    ],
                    [
                        AC_MSG_ERROR([pangox library not found, library cannot be compiled in Unicode mode])
                    ]
                )
                PKG_CHECK_MODULES(PANGOFT2, pangoft2,
                    [
                        CXXFLAGS="$CXXFLAGS $PANGOFT2_CFLAGS"
                        LIBS="$LIBS $PANGOFT2_LIBS"
                    ],
                    [
                        AC_MSG_WARN([pangoft2 library not found, library will be compiled without printing support])
                        wxUSE_PRINTING_ARCHITECTURE="no"
                    ]
                )
                PKG_CHECK_MODULES(PANGOXFT, pangoxft,
                    [
                        CXXFLAGS="$CXXFLAGS $PANGOXFT_CFLAGS"
                        LIBS="$LIBS $PANGOXFT_LIBS"
                    ],
                    [
                        AC_MSG_WARN([pangoxft library not found, library will be compiled without anti-aliasing support])
                    ]
                )
        fi

        wxUSE_UNIVERSAL="yes"

        if test "$wxUSE_NANOX" = "yes"; then
            TOOLKIT_INCLUDE="-I\$(top_srcdir)/include/wx/x11/nanox -I\$(MICROWIN)/src/include $TOOLKIT_INCLUDE"
            TOOLCHAIN_DEFS="${TOOLCHAIN_DEFS} -D__NANOX__ -DMWPIXEL_FORMAT=MWPF_TRUECOLOR0888 -DHAVE_FILEIO -DHAVE_BMP_SUPPORT=1 -DHAVE_GIF_SUPPORT=1 -DHAVE_PNM_SUPPORT=1 -DHAVE_XPM_SUPPORT=1 -DLINUX=1 -DUNIX=1 -DUSE_EXPOSURE -DSCREEN_HEIGHT=480 -DSCREEN_WIDTH=640 -DSCREEN_DEPTH=4 -DX11=1"
            GUI_TK_LIBRARY="$GUI_TK_LIBRARY \$(MICROWIN)/src/lib/libnano-X.a"
        else
            GUI_TK_LIBRARY="$GUI_TK_LIBRARY -lX11$xpm_link"
        fi

        TOOLKIT_VPATH="\${top_srcdir}/src/x11"
        TOOLKIT=X11
        GUIDIST=X11_DIST
    fi

    if test "$wxUSE_WINE" = 1; then
        AC_CHECK_HEADER(windows.h, [],
        [
            AC_MSG_ERROR(please set CFLAGS to contain the location of windows.h)
        ])

        xpm_link=
        AC_MSG_CHECKING(for Xpm library)
        WX_PATH_FIND_LIBRARIES($SEARCH_LIB,Xpm)
        if test "$ac_find_libraries" != "" ; then
            GUI_TK_LIBRARY="-L$ac_find_libraries"
            xpm_link=" -lXpm"
            AC_DEFINE(wxHAVE_LIB_XPM)
            AC_MSG_RESULT(found at $ac_find_libraries)
        else
            AC_MSG_RESULT(no)
            AC_MSG_WARN(library will be compiled without support for images in XPM format)
        fi

        mesa_link=
        AC_MSG_CHECKING(for Mesa library)
        WX_PATH_FIND_LIBRARIES($SEARCH_LIB,MesaGL)
        if test "$ac_find_libraries" != "" ; then
            GUI_TK_LIBRARY="$GUI_TK_LIBRARY -L$ac_find_libraries"
            mesa_link=" -lMesaGL"
            AC_MSG_RESULT(found at $ac_find_libraries)
        else
            mesa_link=""
            AC_MSG_RESULT(no)
            AC_MSG_WARN(library will be compiled without Mesa support)
        fi

        GUI_TK_LIBRARY="$GUI_TK_LIBRARY -lwine$mesa_link$xpm_link -lXxf86dga -lXxf86vm -lSM -lICE -lXext -lXmu -lX11 -lncurses"
        TOOLKIT=MSW
        GUIDIST=MSW_DIST
        TOOLCHAIN_DEFS="${TOOLCHAIN_DEFS} -D__WXWINE__"
    fi

    if test "$wxUSE_MOTIF" = 1; then
        dnl use standard macros to check for X headers/libs, this brings support
        dnl for the standard configure options --x-includes and --x-libraries
        AC_PATH_XTRA

        if test "$no_x" = "yes"; then
          AC_MSG_ERROR(X11 not found, please use --x-includes and/or --x-libraries options)
        fi

        dnl for some reason AC_PATH_XTRA seems to add -INONE and -LNONE to
        dnl X_LIBS and X_CFLAGS respectively -- what for??
        GUI_TK_LIBRARY=`echo $X_LIBS | sed 's/ -LNONE//'`
        TOOLKIT_INCLUDE=`echo $X_CFLAGS | sed 's/ -INONE//'`
        AFMINSTALL=afminstall
        COMPILED_X_PROGRAM=0

        AC_MSG_CHECKING(for Motif/Lesstif headers)
        WX_PATH_FIND_INCLUDES($SEARCH_INCLUDE, Xm/Xm.h)
        if test "$ac_find_includes" != "" ; then
            AC_MSG_RESULT(found in $ac_find_includes)
            WX_INCLUDE_PATH_EXIST($ac_find_includes, $TOOLKIT_INCLUDE)
            TOOLKIT_INCLUDE="$TOOLKIT_INCLUDE$ac_path_to_include"
        else
            AC_TRY_COMPILE(
                [
                    #include <Xm/Xm.h>
                ],
                [
                    int version;
                    version = xmUseVersion;
                ],
                [
                    AC_MSG_RESULT(found in default search path)
                    COMPILED_X_PROGRAM=1
                ],
                [
                    AC_MSG_RESULT(no)
                    AC_MSG_ERROR(please set CFLAGS to contain the location of Xm/Xm.h)
                ]
            )
        fi

        if test "$COMPILED_X_PROGRAM" = 0; then
            AC_MSG_CHECKING(for Motif/Lesstif library)
            WX_PATH_FIND_LIBRARIES($SEARCH_LIB, Xm)
            if test "$ac_find_libraries" != "" ; then
                AC_MSG_RESULT(found at $ac_find_libraries)

                WX_LINK_PATH_EXIST($ac_find_libraries, $GUI_TK_LIBRARY)
                GUI_TK_LIBRARY="$GUI_TK_LIBRARY$ac_path_to_link"
            else
                dnl it might happen that we found headers in one of the
                dnl standard paths but the libs are elsewhere - we do need to
                dnl try to compile a sample program then here
                save_CFLAGS=$CFLAGS
                CFLAGS="$CFLAGS $TOOLKIT_INCLUDE"

                AC_TRY_COMPILE(
                    [
                        #include <Xm/Xm.h>
                    ],
                    [
                        int version;
                        version = xmUseVersion;
                    ],
                    [
                        AC_MSG_RESULT(found in default search path)
                        COMPILED_X_PROGRAM=1
                    ],
                    [
                        AC_MSG_RESULT(no)
                        AC_MSG_ERROR(please set LDFLAGS to contain the location of libXm)
                    ]
                )

                CFLAGS=$save_CFLAGS
            fi
        fi

        xpm_link=
        AC_MSG_CHECKING(for Xpm library)
        WX_PATH_FIND_LIBRARIES($SEARCH_LIB,Xpm)
        if test "$ac_find_libraries" != "" ; then
            WX_LINK_PATH_EXIST($ac_find_libraries,$GUI_TK_LIBRARY)
            GUI_TK_LIBRARY="$GUI_TK_LIBRARY$ac_path_to_link"

            xpm_link=" -lXpm"
            AC_DEFINE(wxHAVE_LIB_XPM)
            AC_MSG_RESULT(found at $ac_find_libraries)
        else
            save_CFLAGS=$CFLAGS
            CFLAGS="$CFLAGS $TOOLKIT_INCLUDE"

            AC_TRY_COMPILE(
                [
                    #include <X11/xpm.h>
                ],
                [
                    int version;
                    version = XpmLibraryVersion();
                ],
                [
                    xpm_link=" -lXpm"
                    AC_DEFINE(wxHAVE_LIB_XPM)
                    AC_MSG_RESULT(found in default search path)
                    COMPILED_X_PROGRAM=0
                ],
                [
                    AC_MSG_RESULT(no)
                    AC_MSG_WARN(library will be compiled without support for images in XPM format)
                ]
            )

            CFLAGS=$save_CFLAGS
        fi

        AC_MSG_CHECKING([if we need -lXp and/or -lSM -lICE])
        libp_link=""
        libsm_ice_link=""
        libs_found=0
        for libp in "" " -lXp"; do
            if test "$libs_found" = "0"; then
                for libsm_ice in " -lSM -lICE"; do
                    if test "$libs_found" = "0"; then
                        save_LIBS="$LIBS"
                        LIBS="$GUI_TK_LIBRARY -lXm${xpm_link} ${libp} -lXmu -lXext -lXt${libsm_ice} -lX11"
                        save_CFLAGS=$CFLAGS
                        CFLAGS="$CFLAGS $TOOLKIT_INCLUDE"

                        AC_TRY_LINK(
                            [
                                #include <Xm/Xm.h>
                                #include <Xm/List.h>
                            ],
                            [
                                XmString string = NULL;
                                Widget w = NULL;
                                int position = 0;
                                XmListAddItem(w, string, position);
                            ],
                            [
                                libp_link="$libp"
                                libsm_ice_link="$libsm_ice"
                                AC_MSG_RESULT(
                                    [need${libp_link}${libsm_ice_link}])
                                libs_found=1
                            ], []
                        )

                        LIBS="$save_LIBS"
                        CFLAGS=$save_CFLAGS
                    fi
                done
            fi
        done

        if test "$libs_found" = "0"; then
            AC_MSG_RESULT([can't find the right libraries])
            AC_MSG_ERROR([can't link a simple motif program])
        fi

        GUI_TK_LIBRARY="$GUI_TK_LIBRARY -lXm$xpm_link${libp_link} -lXmu -lXext -lXt${libsm_ice_link} -lX11"
        TOOLKIT_VPATH="\${top_srcdir}/src/motif${PATH_IFS}\${top_srcdir}/src/motif/xmcombo"
        TOOLKIT=MOTIF
        GUIDIST=MOTIF_DIST
    fi

    if test "$wxUSE_MAC" = 1; then
        CPPFLAGS="$CPPFLAGS -fpascal-strings -I\${top_srcdir}/src/mac/morefile -I/Developer/Headers/FlatCarbon"

        TOOLKIT_VPATH="\${top_srcdir}/src/mac${PATH_IFS}\${top_srcdir}/src/mac/morefile"
        TOOLKIT=MAC
        dnl we can't call this MAC_DIST or autoconf thinks its a macro
        GUIDIST=MACX_DIST
    fi

    if test "$wxUSE_PM" = 1; then
        TOOLKIT=PM
        GUIDIST=GTK_DIST
        AC_MSG_WARN([OS/2 PM requires old resource format, re-enabled])
        wxUSE_PROLOGIO="yes"
        wxUSE_RESOURCES="yes"
        AC_MSG_WARN([OS/2 threads are not yet supported... disabled])
        wxUSE_THREADS="no"
    fi

    dnl the name of the directory where the files for this toolkit live
    if test "$TOOLKIT" = "PM" ; then
        TOOLKIT_DIR="os2"
    else
        TOOLKIT_DIR=`echo ${TOOLKIT} | tr "[[A-Z]]" "[[a-z]]"`
    fi

    dnl misc other files depending on the port
    PORT_FILES="\${top_srcdir}/src/\$(TOOLKITDIR)/files.lst"

    if test "$wxUSE_UNIVERSAL" = "yes"; then
        ALL_OBJECTS="\$(GUI_LOWLEVEL_OBJS) \${UNIVOBJS}"

        dnl ALL_SOURCES and ALL_HEADERS shouldn't include really all sources
        dnl and headers as some/most are not needed for wxUniv but I don't
        dnl have time to add GUI_LOWLEVEL_SOURCES/HEADERS stuff now (TODO!)
        ALL_SOURCES="\$(ALL_SOURCES) \${UNIV_SOURCES}"
        ALL_HEADERS="\$(ALL_HEADERS) \${UNIV_HEADERS}"

        PORT_FILES="${PORT_FILES} \${top_srcdir}/src/univ/files.lst"
        if test "$wxUSE_X11" = 1; then
            TOOLKIT_VPATH="\${top_srcdir}/src/${TOOLKIT_DIR}${PATH_IFS}\${top_srcdir}/src/univ${PATH_IFS}\${top_srcdir}/src/univ/themes"
        else
            TOOLKIT_VPATH="\${top_srcdir}/src/univ${PATH_IFS}\${top_srcdir}/src/univ/themes${PATH_IFS}\${top_srcdir}/src/${TOOLKIT_DIR}"
        fi
        TOOLCHAIN_DEFS="${TOOLCHAIN_DEFS} -D__WXUNIVERSAL__"
        WIDGET_SET=univ
    else
        ALL_OBJECTS="\$(GUIOBJS)"
        ALL_SOURCES="\$(ALL_SOURCES)"
        ALL_HEADERS="\$(ALL_HEADERS)"
    fi

    ALL_OBJECTS="${ALL_OBJECTS} \$(COMMONOBJS) \$(GENERICOBJS)"

    if test "$TOOLKIT" != "MSW" -a "$USE_DOS" != 1; then
        ALL_OBJECTS="${ALL_OBJECTS} \$(UNIXOBJS)"
    fi

    if test "$wxUSE_HTML" = "yes"; then
        ALL_OBJECTS="${ALL_OBJECTS} \$(HTMLOBJS)"
    fi

    if test "$wxUSE_LIBJPEG" = "builtin" ; then
        ALL_OBJECTS="${ALL_OBJECTS} \$(JPEGOBJS)"
    fi
    if test "$wxUSE_LIBTIFF" = "builtin" ; then
        ALL_OBJECTS="${ALL_OBJECTS} \$(TIFFOBJS)"
    fi
    if test "$wxUSE_LIBPNG" = "builtin" ; then
        ALL_OBJECTS="${ALL_OBJECTS} \$(PNGOBJS)"
    fi

    dnl distribute samples/demos/utils with GUI versions
    GUIDIST="${GUIDIST} SAMPLES_DIST DEMOS_DIST UTILS_DIST MISC_DIST"
    DISTDIR="wx\$(TOOLKIT)"
else
    USE_GUI=0

    dnl this doesn't quite work right for wxBase, but the places
    dnl where it is wrong aren't fatal (yet) though.
    TOOLKIT_DIR="base"

    dnl the sources, their dependenices and the headers
    if test "$USE_WIN32" = 1 ; then
        ALL_OBJECTS="\${BASE_OBJS} \${BASE_MSW_OBJS}"
        TOOLKIT_VPATH="\${top_srcdir}/src/msw"

        dnl yes, the toolkit for wxBase on win32 is actually MSW
        dnl wxBase on unix does not need a 'TOOLKIT' defined.
        TOOLKIT="MSW"
    else
        ALL_OBJECTS="\${BASE_OBJS} \${BASE_UNIX_OBJS}"
        TOOLKIT_VPATH="\${top_srcdir}/src/unix"
    fi

    ALL_SOURCES="\$(ALL_SOURCES)"
    ALL_HEADERS="\$(ALL_HEADERS)"

    PORT_FILES="\${top_srcdir}/src/files.lst"

    dnl distribute only wxBase sources/headers
    GUIDIST="BASE_DIST"
    DISTDIR="wxBase"
fi

dnl ---------------------------------------------------------------------------
dnl Optional libraries included when system library is not used
dnl ---------------------------------------------------------------------------

dnl ODBC objects are Unix only
if test "$TOOLKIT" != "MSW" -a "$wxUSE_ODBC" = "yes" ; then
    ALL_OBJECTS="${ALL_OBJECTS} \$(IODBCOBJS)"
fi

if test "$wxUSE_REGEX" = "builtin" ; then
    ALL_OBJECTS="${ALL_OBJECTS} \$(REGEXOBJS)"
fi
if test "$wxUSE_ZLIB" = "builtin" ; then
    ALL_OBJECTS="${ALL_OBJECTS} \$(ZLIBOBJS)"
fi

dnl ---------------------------------------------------------------------------
dnl OpenGL libraries
dnl ---------------------------------------------------------------------------

if test "$wxUSE_OPENGL" = "yes"; then
    if test "$wxUSE_MAC" = 1; then
        OPENGL_LIBS="-framework OpenGL -framework AGL"
    elif test "$wxUSE_MSW" = 1; then
        OPENGL_LIBS="-lopengl32 -lglu32"
    else
        AC_CHECK_HEADER(GL/gl.h,
            [
                AC_MSG_CHECKING([for -lGL])
                WX_PATH_FIND_LIBRARIES([$SEARCH_LIB],[GL])
                if test "$ac_find_libraries" != "" ; then
                    WX_LINK_PATH_EXIST([$ac_find_libraries],[$LDFLAGS])
                    if test "$ac_path_to_link" = " -L/usr/lib" ; then
                        LDFLAGS_GL="$LDFLAGS"
                    else
                        LDFLAGS_GL="$LDFLAGS$ac_path_to_link"
                    fi
                    OPENGL_LIBS="-lGL -lGLU"
                    AC_MSG_RESULT([yes])
                else
                    AC_MSG_RESULT([no])
                    AC_MSG_CHECKING([for -lMesaGL])
                    WX_PATH_FIND_LIBRARIES([$SEARCH_LIB],[MesaGL])
                    if test "$ac_find_libraries" != "" ; then
                        WX_LINK_PATH_EXIST([$ac_find_libraries],[$LDFLAGS])
                        LDFLAGS_GL="$LDFLAGS$ac_path_to_link"
                        OPENGL_LIBS="-lMesaGL -lMesaGLU"
                        AC_MSG_RESULT([yes])
                    else
                        AC_MSG_RESULT([no])
                    fi
                fi
            ])

        if test "x$OPENGL_LIBS" = "x"; then
            dnl it should be an error and not a warning because OpenGL is not on
            dnl by default and so if it had been explicitely requested, we
            dnl shouldn't just fall back to compiling the library without it
            AC_MSG_ERROR(OpenGL libraries not available)
        fi
    fi

    if test "$wxUSE_OPENGL" = "yes"; then
        AC_DEFINE(wxUSE_OPENGL)
        AC_DEFINE(wxUSE_GLCANVAS)
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS opengl"
    fi
fi

if test -z "$TOOLKIT_VPATH" ; then
    TOOLKIT_VPATH="\${top_srcdir}/src/${TOOLKIT_DIR}"
fi

dnl the symbol which allows conditional compilation for the given toolkit
if test -n "$TOOLKIT" ; then
    TOOLCHAIN_DEFS="${TOOLCHAIN_DEFS} -D__WX${TOOLKIT}__"
fi

lib_unicode_suffix=
if test "$wxUSE_UNICODE" = "yes"; then
    lib_unicode_suffix=u
fi

lib_debug_suffix=
if test "$wxUSE_DEBUG_FLAG" = "yes"; then
    lib_debug_suffix=d
fi

WX_VERSION_TAG=`echo WX${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}${lib_unicode_suffix}${lib_debug_suffix}_${WX_RELEASE} | tr "[[a-z]]" "[[A-Z]]"`

TOOLCHAIN_NAME="${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}${lib_unicode_suffix}${lib_debug_suffix}-${WX_RELEASE}"
TOOLCHAIN_NAME_GL="${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}${lib_unicode_suffix}${lib_debug_suffix}_gl-${WX_RELEASE}"

if test "$cross_compiling" = "yes"; then
    TOOLCHAIN_NAME="${TOOLCHAIN_NAME}-${host_alias}"
    TOOLCHAIN_NAME_GL="${TOOLCHAIN_NAME_GL}-${host_alias}"
fi

dnl library link name
WX_LIBRARY="wx_${TOOLCHAIN_NAME}"
WX_LIBRARY_GL="wx_${TOOLCHAIN_NAME_GL}"
WX_LIBRARY_BASENAME="wx_${TOOLKIT_DIR}${TOOLKIT_VERSION}${WIDGET_SET}${lib_unicode_suffix}${lib_debug_suffix}"

dnl the name of the shared library
WX_LIBRARY_NAME_SHARED="lib${WX_LIBRARY}.${SO_SUFFIX}.${WX_CURRENT}.${WX_REVISION}.${WX_AGE}"
WX_LIBRARY_NAME_SHARED_GL="lib${WX_LIBRARY_GL}.${SO_SUFFIX}.${WX_CURRENT}.${WX_REVISION}.${WX_AGE}"

dnl the name of the links to the shared library
WX_LIBRARY_LINK1="lib${WX_LIBRARY}.${SO_SUFFIX}.${WX_CURRENT}"
WX_LIBRARY_LINK2="lib${WX_LIBRARY}.${SO_SUFFIX}"
WX_LIBRARY_LINK1_GL="lib${WX_LIBRARY_GL}.${SO_SUFFIX}.${WX_CURRENT}"
WX_LIBRARY_LINK2_GL="lib${WX_LIBRARY_GL}.${SO_SUFFIX}"

case "${host}" in
    *-*-cygwin* | *-*-mingw32* )

        dnl If we are cross compiling we want to use the 'full' unix type name for the
        dnl lib, but for a native install use the windows style naming convention.
        dnl (excepting again that we strip the ELF style version numbers off it).

        dnl FIXME: is this GL stuff actually even used for wxMSW?  should it be??

        if test "$cross_compiling" != "yes" -a "$TOOLKIT_DIR" = "msw"; then
            WX_LIBRARY="wxmsw${WX_MSW_VERSION}${lib_unicode_suffix}${lib_debug_suffix}"
            WX_LIBRARY_GL="wxmsw_gl${WX_MSW_VERSION}${lib_unicode_suffix}${lib_debug_suffix}"
            WX_LIBRARY_NAME_SHARED="${WX_LIBRARY}.${SO_SUFFIX}"
            WX_LIBRARY_NAME_SHARED_GL="${WX_LIBRARY_GL}.${SO_SUFFIX}"
        else
            WX_LIBRARY_NAME_SHARED="lib${WX_LIBRARY}.${SO_SUFFIX}"
            WX_LIBRARY_NAME_SHARED_GL="lib${WX_LIBRARY_GL}.${SO_SUFFIX}"
        fi
        ;;

    *-*-darwin* )
        dnl Under Mac OS X, the naming conventions for shared libraries
        dnl are different: the number precedes the suffix.
        
        WX_LIBRARY_NAME_SHARED="lib${WX_LIBRARY}.${WX_CURRENT}.${WX_REVISION}.${WX_AGE}.${SO_SUFFIX}"
        WX_LIBRARY_NAME_SHARED_GL="lib${WX_LIBRARY_GL}.${WX_CURRENT}.${WX_REVISION}.${WX_AGE}.${SO_SUFFIX}"

        WX_LIBRARY_LINK1="lib${WX_LIBRARY}.${WX_CURRENT}.${SO_SUFFIX}"
        WX_LIBRARY_LINK2="lib${WX_LIBRARY}.${SO_SUFFIX}"
        WX_LIBRARY_LINK1_GL="lib${WX_LIBRARY_GL}.${WX_CURRENT}.${SO_SUFFIX}"
        WX_LIBRARY_LINK2_GL="lib${WX_LIBRARY_GL}.${SO_SUFFIX}"

        dnl Under Mac OS X, we should build real frameworks instead of simple
        dnl dynamic shared libraries (in order to embed the resources)
        if test "$wxUSE_MAC" = 1; then
            dnl the name of the resources file for wxMac
            WX_RESOURCES_MACOSX_ASCII="lib${WX_LIBRARY}.r"
            WX_RESOURCES_MACOSX_DATA="lib${WX_LIBRARY}.rsrc"
        fi
        ;;
esac

dnl the name of the static library
WX_LIBRARY_NAME_STATIC="lib${WX_LIBRARY}.a"
WX_LIBRARY_NAME_STATIC_GL="lib${WX_LIBRARY_GL}.a"

dnl define which libs wx-config should link.
WXCONFIG_LIBS="-l${WX_LIBRARY}"
WXCONFIG_LIBS_STATIC="lib${WX_LIBRARY}.a"

if test "$wxUSE_OPENGL" = "yes"; then
    WXCONFIG_LIBS_GL="-l${WX_LIBRARY_GL} ${OPENGL_LIBS}"
    WXCONFIG_LIBS_STATIC_GL="lib${WX_LIBRARY_GL}.a ${OPENGL_LIBS}"
fi


dnl --- the marker for quick search, leave it here: SHARED_LIB_SETUP ---

if test "$wxUSE_SHARED" = "yes"; then
    case "${host}" in
      *-pc-os2_emx | *-pc-os2-emx | \
      *-pc-msdosdjgpp )
        dnl only static for now
        wxUSE_SHARED=no
        AC_MSG_WARN([Host system doesn't support shared libraries, disabling])
      ;;
    esac
fi

if test "$wxUSE_SHARED" = "yes"; then

    dnl install targets
    if test "$wxUSE_OPENGL" = "yes"; then
        WX_ALL_INSTALLED="CREATE_INSTALLED_LINKS CREATE_INSTALLED_LINKS_GL"
        WX_ALL="\$(build_libdir)/${WX_LIBRARY_LINK1} \$(build_libdir)/${WX_LIBRARY_LINK1_GL}"
    else
        WX_ALL_INSTALLED="CREATE_INSTALLED_LINKS"
        WX_ALL="\$(build_libdir)/${WX_LIBRARY_LINK1}"
    fi

    dnl the extra compiler flags needed for compilation of shared library
    if test "$GCC" = "yes"; then
        dnl the switch for gcc is the same under all platforms
        PIC_FLAG="-fPIC"
    fi


    dnl use versioned symbols if available on the platform
    WX_VERSIONED_SYMBOLS([\$(top_builddir)/version-script])

    dnl the command to use for creating the shared library
    SHARED_LD="${CXX} -shared -o"

    case "${host}" in
      *-hp-hpux* )
        dnl default settings are good for gcc but not for the native HP-UX
        if test "$GCC" = "yes"; then
            dnl -o flag must be after PIC flag
            SHARED_LD="${CXX} -shared ${PIC_FLAG} -o"
        else
            dnl no idea why it wants it, but it does
            LDFLAGS="$LDFLAGS -L/usr/lib"

            SHARED_LD="${CXX} -b -o"
            PIC_FLAG="+Z"
        fi

        dnl install shared libs without symlinks
        if test "$wxUSE_OPENGL" = "yes"; then
            WX_ALL_INSTALLED="preinstall_gl"
            WX_ALL="\$(build_libdir)/${WX_LIBRARY_NAME_SHARED} \$(build_libdir)/${WX_LIBRARY_NAME_SHARED_GL}"
        else
            WX_ALL="\$(build_libdir)/${WX_LIBRARY_NAME_SHARED}"
        fi
      ;;

      *-*-linux* )
        if test "$GCC" != "yes"; then
            AC_CACHE_CHECK([for Intel compiler], wx_cv_prog_icc,
            [
                AC_TRY_COMPILE([],
                    [
                        #ifndef __INTEL_COMPILER
                        #error Not icc
                        #endif
                    ],
                    wx_cv_prog_icc=yes,
                    wx_cv_prog_icc=no
                )
            ])
            if test "$wx_cv_prog_icc" = "yes"; then
                PIC_FLAG="-KPIC"
            fi
        fi

        if test "$wxUSE_SONAME" = "yes" ; then
            SONAME_FLAGS="-Wl,-soname,${WX_LIBRARY_LINK1}"
            SONAME_FLAGS_GL="-Wl,-soname,${WX_LIBRARY_LINK1_GL}"
            dnl substitute this in makelib.env for the contrib libs
            WX_TARGET_LIBRARY_SONAME="-Wl,-soname,\$(TARGETLIB_LINK1)"
        fi
      ;;

      *-*-solaris2* )
        if test "$GCC" = yes ; then
            dnl newer versions of gcc need -isystem to compile X headers on
            dnl Solaris (which use old style C syntax)
            CPPFLAGS="$CPPFLAGS -isystem /usr/openwin/include"
        else
            SHARED_LD="${CXX} -G -o"
            PIC_FLAG="-KPIC"
            SONAME_FLAGS="-h ${WX_LIBRARY_NAME_SHARED}"
            SONAME_FLAGS_GL="-h ${WX_LIBRARY_NAME_SHARED_GL}"
        fi
      ;;

      *-*-darwin* )
        dnl For Unix to MacOS X porting instructions, see:
        dnl http://fink.sourceforge.net/doc/porting/porting.html
        TOOLCHAIN_DEFS="${TOOLCHAIN_DEFS} -DWXMAKINGDLL"
        CFLAGS="$CFLAGS -fno-common"
        CXXFLAGS="$CXXFLAGS -fno-common"
        dnl wxWindows must be fully binded (lazy binding breaks RTTI classinfo)
        dnl this can be done either with the exe linker flag -Wl,-bind_at_load
        dnl or with a double stage link in order to create a single module
        dnl "-init _wxWindowsDylibInit" not useful with lazy linking solved
        SHARED_LD="\${top_srcdir}/distrib/mac/shared-ld-sh -undefined suppress -flat_namespace -o"
        PIC_FLAG="-dynamic -fPIC"
        SONAME_FLAGS="-compatibility_version ${WX_RELEASE} -current_version ${WX_VERSION} -install_name \$(libdir)/${WX_LIBRARY_LINK1}"
        SONAME_FLAGS_GL="-compatibility_version ${WX_RELEASE} -current_version ${WX_VERSION} -install_name \$(libdir)/${WX_LIBRARY_LINK1_GL}"
      ;;

      *-*-aix* )
        dnl default settings are ok for gcc
        if test "$GCC" != "yes"; then
            dnl the abs path below used to be hardcoded here so I guess it must
            dnl be some sort of standard location under AIX?
            AC_CHECK_PROG(AIX_CXX_LD, makeC++SharedLib,
                          makeC++SharedLib, /usr/lpp/xlC/bin/makeC++SharedLib)

            SHARED_LD="$(AIX_CXX_LD) -p 0 -o"
        fi
      ;;

      *-*-cygwin* | *-*-mingw32* )
        WX_LIBRARY_IMPORTLIB="${WX_LIBRARY_NAME_SHARED}.a"

        SHARED_LD="${CXX} -shared -Wl,--out-implib,lib/${WX_LIBRARY_IMPORTLIB} -o"
        TOOLCHAIN_DLL_DEFS="${TOOLCHAIN_DLL_DEFS} -DWXUSINGDLL=1"

        PIC_FLAG="-UWXUSINGDLL -DWXMAKINGDLL=1 -D_DLL=1 -D_WINDLL=1"

        dnl Don't build seperate GL library
        WX_ALL="\$(build_libdir)/${WX_LIBRARY_NAME_SHARED}"
        WX_ALL_INSTALLED="CREATE_INSTALLED_LINKS"

        if test "$wxUSE_OPENGL" = "yes"; then
            LIBS="${LIBS} ${OPENGL_LIBS}"
        fi
      ;;

      *-*-beos* )
        dnl can't use gcc under BeOS for shared library creation because it
        dnl complains about missing 'main'
        SHARED_LD="${LD} -shared -o"
      ;;

      *-*-irix* )
        dnl default settings are ok for gcc
        if test "$GCC" != "yes"; then
            PIC_FLAG="-KPIC"
        fi
      ;;

      *-*-freebsd* | *-*-openbsd* | *-*-netbsd* | \
      *-*-sunos4* | \
      *-*-osf* | \
      *-*-dgux5* | \
      *-*-sysv5* )
        dnl defaults are ok
      ;;

      *)
        AC_MSG_ERROR(unknown system type $host.)
    esac

    dnl set target to shared if not explicitly chose static before
    if test "x$WX_TARGET_LIBRARY" = "x"; then
        WX_TARGET_LIBRARY="${WX_LIBRARY_NAME_SHARED}"
        WX_TARGET_LIBRARY_GL="${WX_LIBRARY_NAME_SHARED_GL}"
    fi

    dnl do not alter the LIBRARY_TYPE strings "so" and "a", they are magic
    WX_TARGET_LIBRARY_TYPE="so"
    INSTALL_LIBRARY='$(INSTALL_PROGRAM)'
fi

dnl do not 'else' this, it may be changed in the above conditional.
if test "$wxUSE_SHARED" = "no"; then

    dnl give static wxBase and wxMSW build a working install target
    if test "$wxUSE_GUI" = "no" -o "$USE_WIN32" = 1 ; then
        dnl we're here because WX_ALL_INSTALLED is empty, but play safe anyway
        WX_ALL_INSTALLED="${WX_ALL_INSTALLED} preinstall"
    fi

    if test "$wxUSE_MAC" = 1; then
        WX_ALL_INSTALLED="${WX_ALL_INSTALLED} preinstall"
    fi

    if test "$wxUSE_OPENGL" = "yes"; then
        WX_ALL_INSTALLED="${WX_ALL_INSTALLED} preinstall_gl"
        WX_ALL="\$(build_libdir)/${WX_LIBRARY_NAME_STATIC} \$(build_libdir)/${WX_LIBRARY_NAME_STATIC_GL}"
    else
        WX_ALL="\$(build_libdir)/${WX_LIBRARY_NAME_STATIC}"
    fi

    WX_TARGET_LIBRARY="${WX_LIBRARY_NAME_STATIC}"
    WX_TARGET_LIBRARY_GL="${WX_LIBRARY_NAME_STATIC_GL}"

    WX_TARGET_LIBRARY_TYPE="a"
    INSTALL_LIBRARY='$(INSTALL_DATA)'

    dnl wx-config should assume the --static flag by default if we don't have
    dnl any shared libs anyhow
    STATIC_FLAG="yes"
else
    STATIC_FLAG="no"
fi

if test "$wxUSE_MAC" = 1; then
    dnl add the resources target for wxMac
    LIBWXMACRES="\$(top_builddir)/lib/${WX_RESOURCES_MACOSX_ASCII}"
    WX_ALL="${WX_ALL} ${LIBWXMACRES}"
    WX_ALL_INSTALLED="${WX_ALL_INSTALLED} preinstall_res"
    AC_CHECK_PROG(RESCOMP, Rez, Rez, /Developer/Tools/Rez)
    AC_CHECK_PROG(DEREZ, DeRez, DeRez, /Developer/Tools/DeRez)
    MACOSX_BUNDLE="bundle"
    dnl resources are bundled both with shared library and applications
    dnl since the carb resource *must* be included in the application
    LIBWXMACRESCOMP="\$(RESCOMP) -t APPL Carbon.r ${LIBWXMACRES} -o \$(BIN_PROGRAM)"
    LIBWXMACRESWXCONFIG="${RESCOMP} -t APPL Carbon.r \${prefix}/lib/${WX_RESOURCES_MACOSX_ASCII} -o"
else
    if test "$wxUSE_PM" = 1; then
        LIBWXMACRESCOMP="emxbind -ep \$(BIN_PROGRAM)"
    fi
fi

dnl ---------------------------------------------------------------------------
dnl Checks for typedefs
dnl ---------------------------------------------------------------------------

dnl   defines mode_t if not already defined
AC_TYPE_MODE_T
dnl   defines off_t if not already defined
AC_TYPE_OFF_T
dnl   defines pid_t if not already defined
AC_TYPE_PID_T
dnl   defines size_t if not already defined
AC_TYPE_SIZE_T
dnl   defines uid_t and gid_t if not already defined
AC_TYPE_UID_T

dnl check what exactly size_t is on this machine - this is necessary to avoid
dnl ambiguos overloads in several places, notably wx/string.h and wx/array.h
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_CHECK([if size_t is unsigned int],
    wx_cv_size_t_is_uint,
    dnl an obvious check like AC_TRY_COMPILE[struct Foo { ... };] doesn't work
    dnl with egcs (at least) up to 1.1.1 as it allows you to compile duplicate
    dnl methods in a local class (i.e. class inside a function) declaration
    dnl without any objections!!
    dnl
    dnl hence the hack below: we must have Foo at global scope!
    AC_TRY_COMPILE([#include <stddef.h>],
        [
            return 0; }

            struct Foo { void foo(size_t); void foo(unsigned int); };

            int bar() {
        ],
        wx_cv_size_t_is_uint=no,
        wx_cv_size_t_is_uint=yes
    )
)

if test "$wx_cv_size_t_is_uint" = "yes"; then
    AC_DEFINE(wxSIZE_T_IS_UINT)
else
    AC_CACHE_CHECK([if size_t is unsigned long],
        wx_cv_size_t_is_ulong,
        AC_TRY_COMPILE([#include <stddef.h>],
            [
                return 0; }

                struct Foo { void foo(size_t); void foo(unsigned long); };

                int bar() {
            ],
            wx_cv_size_t_is_ulong=no,
            wx_cv_size_t_is_ulong=yes
        )
    )

    if test "$wx_cv_size_t_is_ulong" = "yes"; then
        AC_DEFINE(wxSIZE_T_IS_ULONG)
    fi
fi

AC_LANG_RESTORE

dnl ---------------------------------------------------------------------------
dnl Checks for structures
dnl ---------------------------------------------------------------------------

dnl does passwd struct has the pw_gecos field?
AC_CACHE_CHECK([for pw_gecos in struct passwd], wx_cv_struct_pw_gecos,
    [
        AC_TRY_COMPILE([#include <pwd.h>],
             [
                char *p;
                struct passwd *pw;
                p = pw->pw_gecos;
             ],
             [
                wx_cv_struct_pw_gecos=yes
             ],
             [
                wx_cv_struct_pw_gecos=no
             ]
        )
    ]
)

if test "$wx_cv_struct_pw_gecos" = "yes"; then
    AC_DEFINE(HAVE_PW_GECOS)
fi

dnl ---------------------------------------------------------------------------
dnl Check for functions
dnl ---------------------------------------------------------------------------

dnl don't check for wchar_t functions if we haven't got wchar_t itself
if test "$wx_cv_sizeof_wchar_t" != "0"; then
    AC_DEFINE(wxUSE_WCHAR_T)

    dnl check for wcslen in all possible places
    WCSLEN_FOUND=0
    WCHAR_LINK=
    AC_CHECK_FUNCS(wcslen, WCSLEN_FOUND=1)

    if test "$WCSLEN_FOUND" = 0; then
        if test "$TOOLKIT" = "MSW"; then
            AC_CHECK_LIB(msvcrt, wcslen, WCHAR_OK=1)
        else
            AC_CHECK_LIB(w, wcslen, [
                            WCHAR_LINK=" -lw"
                            WCSLEN_FOUND=1
                        ])
        fi
    fi

    if test "$WCSLEN_FOUND" = 1; then
        AC_DEFINE(HAVE_WCSLEN)
    fi

    dnl try to use wcsrtombs instead of wcstombs which is buggy in old GNU
    dnl libc versions if possible
    AC_CHECK_FUNCS(wcsrtombs)
else
    AC_MSG_WARN([Wide character support is unavailable])
fi

dnl *printf() functions sometimes are available in the library but not
dnl prototyped -- if this is the case, we can't use them from C++ code, but to
dnl detect this we have to use C++ compiler for testing
AC_LANG_SAVE
AC_LANG_CPLUSPLUS

dnl check for vsnprintf() -- a safe version of vsprintf())
AC_CHECK_FUNCS(vsnprintf)

if test "$wxUSE_UNICODE" = yes; then
    dnl also look if we have wide char IO functions
    AC_CHECK_FUNCS(fputwc wprintf vswprintf)
    dnl MinGW has a vswprintf with a different prototype, and
    dnl a _vsnwprintf with the correct prototype, but AC_CHECK_FUNCS
    dnl finds it even if it is not declared in some versions...
    AC_MSG_CHECKING([for _vsnwprintf])
    AC_TRY_COMPILE([#include <wchar.h>],
                   [&_vsnwprintf;],
                   [AC_MSG_RESULT([yes])
                    AC_DEFINE(HAVE__VSNWPRINTF)],
                   [AC_MSG_RESULT([no])]);
fi

AC_LANG_RESTORE



dnl the following tests are for Unix(like) systems only
if test "$TOOLKIT" != "MSW"; then

dnl check for available version of iconv()

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AM_ICONV
LIBS="$LIBICONV $LIBS"
AC_LANG_RESTORE

dnl check for POSIX signals if we need them
if test "$wxUSE_ON_FATAL_EXCEPTION" = "yes" -a "$wxUSE_UNIX" = "yes"; then
    AC_CHECK_FUNCS(sigaction)

    if test "$ac_cv_func_sigaction" = "no"; then
        AC_MSG_WARN([No POSIX signal functions on this system, wxApp::OnFatalException will not be called])
        wxUSE_ON_FATAL_EXCEPTION=no
    fi

    if test "$wxUSE_ON_FATAL_EXCEPTION" = "yes"; then
      AC_LANG_SAVE
      AC_LANG_CPLUSPLUS

      AC_CACHE_CHECK([for sa_handler type], wx_cv_type_sa_handler,
      [
        AC_TRY_COMPILE([#include <signal.h>],
                     [
                        extern void testSigHandler(int);

                        struct sigaction sa;
                        sa.sa_handler = testSigHandler;
                     ], [
                        wx_cv_type_sa_handler=int
                     ], [
                        wx_cv_type_sa_handler=void
                     ])
      ])

      AC_LANG_RESTORE

      AC_DEFINE_UNQUOTED(wxTYPE_SA_HANDLER, $wx_cv_type_sa_handler)
    fi
fi

dnl check for the function for temp files creation
AC_CHECK_FUNCS(mkstemp mktemp, break)

dnl get the library function to use for wxGetDiskSpace(): it is statfs() under
dnl Linux and *BSD and statvfs() under Solaris
AC_CACHE_CHECK(for statfs, wx_cv_func_statfs,
    AC_TRY_COMPILE(
        [
             #if defined(__BSD__)
               #include <sys/param.h>
               #include <sys/mount.h>
             #else
               #include <sys/vfs.h>
             #endif
        ],
        [
             long l;
             struct statfs fs;
             statfs("/", &fs);
             l = fs.f_bsize;
             l += fs.f_blocks;
             l += fs.f_bavail;
        ],
        [
             wx_cv_func_statfs=yes
        ],
        [
             wx_cv_func_statfs=no
        ]
    )
)

if test "$wx_cv_func_statfs" = "yes"; then
    AC_DEFINE(HAVE_STATFS)
else
    AC_CACHE_CHECK(for statvfs, wx_cv_func_statvfs,
        AC_TRY_COMPILE(
            [
                 #include <sys/statvfs.h>
            ],
            [
                 long l;
                 struct statvfs fs;
                 statvfs("/", &fs);
                 l = fs.f_bsize;
                 l += fs.f_blocks;
                 l += fs.f_bavail;
            ],
            [
                 wx_cv_func_statvfs=yes
            ],
            [
                 wx_cv_func_statvfs=no
            ]
        )
    )

    if test "$wx_cv_func_statvfs" = "yes"; then
        AC_DEFINE(HAVE_STATVFS)
    else
        AC_MSG_WARN([wxGetDiskSpace() function won't work without statfs()])
    fi
fi

dnl check for fcntl() or at least flock() needed by Unix implementation of
dnl wxSingleInstanceChecker
if test "$wxUSE_SNGLINST_CHECKER" = "yes"; then
    AC_CHECK_FUNCS(fcntl flock, break)

    if test "$ac_cv_func_fcntl" != "yes" -a "$ac_cv_func_flock" != "yes"; then
        AC_MSG_WARN(wxSingleInstanceChecker not available)
        wxUSE_SNGLINST_CHECKER=no
    fi
fi

dnl check for timegm() used by datetime.cpp
AC_CHECK_FUNCS(timegm)

dnl look for a function to modify the environment
AC_CHECK_FUNCS(putenv setenv, break)

HAVE_SOME_SLEEP_FUNC=0
if test "$USE_BEOS" = 1; then
    dnl BeOS has its own (wonder where did they get it from) sleep() function
    dnl in unistd.h
    AC_DEFINE(HAVE_SLEEP)
    HAVE_SOME_SLEEP_FUNC=1
fi

if test "$USE_DARWIN" = 1; then
    dnl Mac OS X/Darwin has both nanosleep and usleep
    dnl but only usleep is defined in unistd.h
    AC_DEFINE(HAVE_USLEEP)
    HAVE_SOME_SLEEP_FUNC=1
fi

if test "$HAVE_SOME_SLEEP_FUNC" != 1; then
    dnl try nanosleep() in libc and libposix4, if this fails - usleep()
    POSIX4_LINK=
    AC_CHECK_FUNCS(nanosleep,
        AC_DEFINE(HAVE_NANOSLEEP),
        [
            AC_CHECK_LIB(posix4, nanosleep,
                [
                    AC_DEFINE(HAVE_NANOSLEEP)
                    POSIX4_LINK=" -lposix4"
                ],
                [
                    AC_CHECK_FUNCS(usleep,
                        AC_DEFINE(HAVE_USLEEP),
                        AC_MSG_WARN([wxSleep() function will not work])
                    )
                ]
            )
        ]
    )
fi

dnl check for uname (POSIX) and gethostname (BSD)
AC_CHECK_FUNCS(uname gethostname, break)

dnl check for MT-safe version of strtok (on DEC Alpha, it's ok for C compiler
dnl but not for C++ one - hence change language)
AC_LANG_SAVE
AC_LANG_CPLUSPLUS

AC_CHECK_FUNCS(strtok_r)

AC_LANG_RESTORE

dnl check for inet_addr and inet_aton (these may live either in libc, or in
dnl libnsl or libresolv or libsocket)
INET_LINK=
AC_CHECK_FUNCS(inet_addr,
    AC_DEFINE(HAVE_INET_ADDR),
    [
        AC_CHECK_LIB(nsl, inet_addr,
            INET_LINK="nsl",
            AC_CHECK_LIB(resolv, inet_addr,
                INET_LINK="resolv",
                AC_CHECK_LIB(socket, inet_addr,
                    INET_LINK="socket"
                )
            )
        )
    ]
)

AC_CHECK_FUNCS(inet_aton,
        AC_DEFINE(HAVE_INET_ATON),
        [
            dnl only check it in the same lib
            AC_CHECK_LIB($INET_LINK, inet_aton, AC_DEFINE(HAVE_INET_ATON))
        ])

if test "x$INET_LINK" != "x"; then
    AC_DEFINE(HAVE_INET_ADDR)
    INET_LINK=" -l$INET_LINK"
fi

fi
dnl if !MSW

dnl ===========================================================================
dnl Now we have all the info we need - use it!
dnl ===========================================================================

dnl flush the cache
AC_CACHE_SAVE

dnl ---------------------------------------------------------------------------
dnl thread support for Unix (for Win32 see past the next matching "else")
dnl ---------------------------------------------------------------------------

dnl under MSW (except mingw32) we always have thread support
CPP_MT_FLAG=
if test "$TOOLKIT" != "MSW"; then

    dnl the code below:
    dnl
    dnl   defines THREADS_LINK and THREADS_CFLAGS which are the options
    dnl   necessary to build the MT programs for the linker and compiler
    dnl   respectively
    dnl
    dnl   sets wxUSE_THREADS=1 if thread support is activated

    THREADS_LINK=
    THREADS_CFLAGS=

    if test "$wxUSE_THREADS" = "yes" ; then
        if test "$wxUSE_WINE" = 1 ; then
            AC_MSG_WARN([Threads are not supported under WINE... disabled])
            wxUSE_THREADS="no"
        elif test "$USE_BEOS" = 1; then
            AC_MSG_WARN([BeOS threads are not yet supported... disabled])
            wxUSE_THREADS="no"
        fi
    fi

    if test "$wxUSE_THREADS" = "yes" ; then
        dnl find if POSIX threads are available
        dnl
        dnl the tests here are based on ACX_PTHREAD macro from autoconf macro
        dnl archive from http://ac-archive.sourceforge.net/
        dnl
        dnl thanks to Steven G. Johnson <stevenj@alum.mit.edu> and Alejandro
        dnl Forero Cuervo <bachue@bachue.com> for the original code

        dnl TODO: cache the result

        dnl define the list of the thread options to try in the loop below
        dnl with the convention that anything starting with '-' is a cpp flag
        dnl while anything else is a library (i.e. there is an implicit "-l")
        THREAD_OPTS="-pthread"
        case "${host}" in
          *-*-solaris2* | *-*-sunos4* )
                if test "x$GCC" = "xyes"; then
                    dnl Solaris/gcc combination use this one for some reason
                    THREAD_OPTS="-pthreads $THREAD_OPTS"
                else
                    THREAD_OPTS="-mt $THREAD_OPTS"
                fi
                ;;
          *-*-freebsd*)
                dnl look, in order, for the kernel threads, then Linux threads
                dnl and finally the userland threads
                THREAD_OPTS="-kthread lthread $THREAD_OPTS c_r"
                ;;
          *-*-darwin* | *-*-cygwin* )
                dnl Darwin / Mac OS X just uses -lpthread tested below
                dnl and so does Cygwin
                THREAD_OPTS=""
                ;;
          *-*-aix*)
                dnl AIX calls the library libpthreads - thanks IBM!
                THREAD_OPTS="pthreads"
                ;;
        esac

        dnl simply linking with libpthread should make the test below work but
        dnl it's far from certain that the threaded programs compiled without
        dnl any special switches actually work, so try it after all the others
        THREAD_OPTS="$THREAD_OPTS pthread none"

        dnl now test for all possibilities
        THREADS_OK=no
        for flag in $THREAD_OPTS; do
            case $flag in
                none)
                    AC_MSG_CHECKING([whether pthreads work without any flags])
                    ;;

                -*)
                    AC_MSG_CHECKING([whether pthreads work with $flag])
                    THREADS_CFLAGS="$flag"
                    ;;

                *)
                    AC_MSG_CHECKING([for the pthreads library -l$flag])
                    THREADS_LINK="-l$flag"
                    ;;
              esac

              save_LIBS="$LIBS"
              save_CFLAGS="$CFLAGS"
              LIBS="$THREADS_LINK $LIBS"
              CFLAGS="$THREADS_CFLAGS $CFLAGS"

              AC_TRY_LINK([#include <pthread.h>],
                          [pthread_create(0,0,0,0);],
                          THREADS_OK=yes)

              LIBS="$save_LIBS"
              CFLAGS="$save_CFLAGS"

              AC_MSG_RESULT($THREADS_OK)
              if test "x$THREADS_OK" = "xyes"; then
                      break;
              fi

              THREADS_LINK=""
              THREADS_CFLAGS=""
      done

      if test "x$THREADS_OK" != "xyes"; then
          wxUSE_THREADS=no
          AC_MSG_WARN([No thread support on this system... disabled])
      else
          dnl yes, these special compiler flags should be used with the
          dnl linker as well
          LDFLAGS="$THREADS_CFLAGS $LDFLAGS"
          LIBS="$THREADS_LINK $LIBS"

          AC_MSG_CHECKING([if more special flags are required for pthreads])
          flag=no
          case "${host}" in
            *-aix*)
                dnl again quoting from
                dnl http://www-1.ibm.com/servers/esdd/articles/gnu.html:
                dnl
                dnl     When compiling and linking with -pthread, the library
                dnl     search path should include -L/usr/lib/threads at the
                dnl     beginning of the path.
                LDFLAGS="-L/usr/lib/threads $LDFLAGS"
                flag="-D_THREAD_SAFE"
                ;;
            *-freebsd*)
                flag="-D_THREAD_SAFE"
                ;;
            *-hp-hpux* )
                flag="-D_REENTRANT"
                ;;
            *solaris* | alpha*-osf*)
                flag="-D_REENTRANT"
                ;;
          esac
          AC_MSG_RESULT(${flag})
          if test "x$flag" != xno; then
              THREADS_CFLAGS="$THREADS_CFLAGS $flag"
          fi

          if test "x$THREADS_CFLAGS" != "x"; then
            dnl don't add these options to CPPFLAGS as cpp might not know them
            CFLAGS="$CFLAGS $THREADS_CFLAGS"
            CXXFLAGS="$CXXFLAGS $THREADS_CFLAGS"
          fi
      fi
    fi

    dnl do other tests only if we are using threads
    if test "$wxUSE_THREADS" = "yes" ; then
      AC_CHECK_FUNCS(thr_setconcurrency)

      AC_CHECK_HEADERS(sched.h)
      if test "$ac_cv_header_sched_h" = "yes"; then
          AC_CHECK_FUNC(sched_yield,
            AC_DEFINE(HAVE_SCHED_YIELD),
            [
                AC_CHECK_LIB(posix4,
                    sched_yield,
                    [AC_DEFINE(HAVE_SCHED_YIELD) POSIX4_LINK=" -lposix4"],
                    AC_MSG_WARN(wxThread::Yield will not work properly)
                )
            ]
          )
      fi

      dnl to be able to set the thread priority, we need to have all of the
      dnl following functions:
      dnl   1. pthread_attr_getschedpolicy
      dnl   2. sched_get_priority_min and sched_get_priority_max
      dnl      (this one can be in either libpthread or libposix4 (under Solaris))
      dnl   3. pthread_attr_getschedparam and pthread_attr_setschedparam
      HAVE_PRIOR_FUNCS=0
      AC_CHECK_FUNC(pthread_attr_getschedpolicy,
                     AC_CHECK_FUNC(pthread_attr_setschedparam,
                       AC_CHECK_FUNC(sched_get_priority_max,
                           HAVE_PRIOR_FUNCS=1,
                           AC_CHECK_LIB([posix4], sched_get_priority_max,
                             [
                                HAVE_PRIOR_FUNCS=1
                                POSIX4_LINK=" -lposix4"
                             ],
                           )
                       )
                     )
                   )

      if test "$HAVE_PRIOR_FUNCS" = 1; then
        AC_DEFINE(HAVE_THREAD_PRIORITY_FUNCTIONS)
      else
        AC_MSG_WARN(Setting thread priority will not work)
      fi

      AC_CHECK_FUNC(pthread_cancel,
                    AC_DEFINE(HAVE_PTHREAD_CANCEL),
                    AC_MSG_WARN([wxThread::Kill() will not work properly]))

      AC_CACHE_CHECK([for pthread_cleanup_push/pop], wx_cv_func_pthread_cleanup_push,
      [
        AC_TRY_COMPILE([#include <pthread.h>],
                     [
                        pthread_cleanup_push(NULL, NULL);
                        pthread_cleanup_pop(0);
                     ], [
                        wx_cv_func_pthread_cleanup_push=yes
                     ], [
                        wx_cv_func_pthread_cleanup_push=no
                     ])
      ])

      if test "$wx_cv_func_pthread_cleanup_push" = "yes"; then
          AC_DEFINE(HAVE_THREAD_CLEANUP_FUNCTIONS)
      fi

      dnl mutexattr_t initialization is done in quite different ways on different
      dnl platforms, so check for a few things:
      dnl
      dnl HAVE_MUTEX_RECURSIVE means that we can create recursive mutexes
      dnl HAVE_MUTEXATTR_SETTYPE means that we do it using
      dnl pthread_mutexattr_settype(PTHREAD_MUTEX_RECURSIVE) and if it is not
      dnl defined, we do it by directly assigned
      dnl PTHREAD_MUTEX_RECURSIVE_MUTEX_INITIALIZER_NP to attr

      AC_CACHE_CHECK([for pthread_mutexattr_t], wx_cv_type_pthread_mutexattr_t,
      [
        AC_TRY_COMPILE([#include <pthread.h>],
            [
               pthread_mutexattr_t attr;
               pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);
            ], [
               wx_cv_type_pthread_mutexattr_t=yes
            ], [
               wx_cv_type_pthread_mutexattr_t=no
            ]
        )
      ])

      if test "$wx_cv_type_pthread_mutexattr_t" = "yes"; then
        AC_DEFINE(HAVE_PTHREAD_MUTEXATTR_T)
      else
        dnl don't despair, there may be another way to do it
        AC_CACHE_CHECK([for PTHREAD_RECURSIVE_MUTEX_INITIALIZER],
                       wx_cv_type_pthread_rec_mutex_init,
        [
            AC_TRY_COMPILE([#include <pthread.h>],
                [
                    pthread_mutex_t attr = PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP;
                ], [
                    wx_cv_type_pthread_rec_mutex_init=yes
                ], [
                    wx_cv_type_pthread_rec_mutex_init=no
                ]
            )
        ])
        if test "$wx_cv_type_pthread_rec_mutex_init" = "yes"; then
          AC_DEFINE(HAVE_PTHREAD_RECURSIVE_MUTEX_INITIALIZER)
        else
          dnl this may break code working elsewhere, so at least warn about it
          AC_MSG_WARN([wxMutex won't be recursive on this platform])
        fi
      fi
    fi

dnl from if !MSW
else
    if test "$wxUSE_THREADS" = "yes" ; then
      case "${host}" in
        *-*-mingw32* )
            dnl check if the compiler accepts -mthreads
            AC_CACHE_CHECK([if compiler supports -mthreads],
                wx_cv_cflags_mthread,
                [
                    CFLAGS_OLD="$CFLAGS"
                    CFLAGS="$CFLAGS -mthreads"
                    AC_TRY_COMPILE([], [],
                        wx_cv_cflags_mthread=yes,
                        wx_cv_cflags_mthread=no
                    )
                ]
            )

            if test "$wx_cv_cflags_mthread" = "yes"; then
                dnl it does, use it
                CXXFLAGS="$CXXFLAGS -mthreads"
                TOOLCHAIN_DEFS="$TOOLCHAIN_DEFS -mthreads"
                LDFLAGS="$LDFLAGS -mthreads"
            else
                dnl it doesn't
                CFLAGS="$CFLAGS_OLD"
            fi
        ;;
      esac
    fi
fi

if test "$wxUSE_THREADS" = "yes"; then
  AC_DEFINE(wxUSE_THREADS)

  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS thread"
else
  dnl on some systems, _REENTRANT should be defined if we want to use any _r()
  dnl functions - add tests for other functions here as well
  if test "$ac_cv_func_strtok_r" = "yes"; then
    AC_MSG_CHECKING(if -D_REENTRANT is needed)
    if test "$NEEDS_D_REENTRANT_FOR_R_FUNCS" = 1; then
        TOOLCHAIN_DEFS="${TOOLCHAIN_DEFS} -D_REENTRANT"
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
    fi
  fi
fi

if test "$WXGTK20" = 1 ; then
  AC_DEFINE_UNQUOTED(__WXGTK20__,$WXGTK20)
  WXGTK12=1
fi

if test "$WXGTK12" = 1 ; then
  AC_DEFINE_UNQUOTED(__WXGTK12__,$WXGTK12)
fi

if test "$WXGTK127" = 1 ; then
  AC_DEFINE_UNQUOTED(__WXGTK127__,$WXGTK127)
fi

WXDEBUG=

if test "$wxUSE_DEBUG_INFO" = "yes" ; then
    WXDEBUG="-g"
    wxUSE_OPTIMISE=no
fi

if test "$wxUSE_DEBUG_GDB" = "yes" ; then
    wxUSE_DEBUG_INFO=yes
    WXDEBUG="-ggdb"
fi

if test "$wxUSE_DEBUG_FLAG" = "yes" ; then
    AC_DEFINE(WXDEBUG)
    WXDEBUG_DEFINE="-D__WXDEBUG__"
else
    if test "$wxUSE_GTK" = 1 ; then
        WXDEBUG_DEFINE="-DGTK_NO_CHECK_CASTS"
    fi
fi

if test "$wxUSE_MEM_TRACING" = "yes" ; then
    AC_DEFINE(wxUSE_MEMORY_TRACING)
    AC_DEFINE(wxUSE_GLOBAL_MEMORY_OPERATORS)
    AC_DEFINE(wxUSE_DEBUG_NEW_ALWAYS)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS memcheck"
fi

if test "$wxUSE_DMALLOC" = "yes" ; then
    DMALLOC_LIBS="-ldmalloc"
fi

PROFILE=
if test "$wxUSE_PROFILE" = "yes" ; then
    PROFILE=" -pg"
fi

CODE_GEN_FLAGS=
CODE_GEN_FLAGS_CXX=
if test "$GCC" = "yes" ; then
    if test "$wxUSE_NO_RTTI" = "yes" ; then
        CODE_GEN_FLAGS_CXX="$CODE_GEN_FLAGS_CXX -fno-rtti"
    fi
    if test "$wxUSE_NO_EXCEPTIONS" = "yes" ; then
        CODE_GEN_FLAGS_CXX="$CODE_GEN_FLAGS_CXX -fno-exceptions"
    fi
    if test "$wxUSE_PERMISSIVE" = "yes" ; then
        CODE_GEN_FLAGS="$CODE_GEN_FLAGS -fpermissive"
    fi
    if test "$USE_WIN32" = 1 ; then
        # I'm not even really sure what this was ever added to solve,
        # but someone added it for mingw native builds, so I guess
        # they had a reason, right??
        CODE_GEN_FLAGS="$CODE_GEN_FLAGS -fno-pcc-struct-return"
    fi

    dnl Ian Brown <ian.brown@printsoft.de> reports that versions of gcc before
    dnl 3.0 overflow the table of contents on rs6000 as they create an entry
    dnl for each subroutine by default -- using the switch below only creates
    dnl one entry per file instead at the price of minor performance penalty
    dnl
    dnl As of wx2.4 a bug in the hppa gcc compiler causes a similar problem
    dnl without -ffunction-sections.  No idea how long we'll need to maintain
    dnl this, or even the extent of gcc/wx version combinations affected, but
    dnl also as above, this 'fix' does not come without side effects.
    dnl
    dnl TODO: test for the gcc version here (how?)
    case "${host}" in
      powerpc*-*-aix* )
        CODE_GEN_FLAGS="$CODE_GEN_FLAGS -mminimal-toc"
        ;;
      *-hppa* )
        CODE_GEN_FLAGS="$CODE_GEN_FLAGS -ffunction-sections"
        ;;
    esac
fi

if test "$wxUSE_OPTIMISE" = "no" ; then
    OPTIMISE=
else
    if test "$GCC" = yes ; then
        OPTIMISE="-O2"
        case "${host}" in
            i586-*-*|i686-*-* )
            OPTIMISE="${OPTIMISE} "
        ;;
        esac
    else
        OPTIMISE="-O"
    fi
fi

if test "$WXWIN_COMPATIBILITY_2" = "yes"; then
    AC_DEFINE(WXWIN_COMPATIBILITY_2)

    WXWIN_COMPATIBILITY_2_2="yes"
fi

if test "x$WXWIN_COMPATIBILITY_2_2" != "xno"; then
    AC_DEFINE(WXWIN_COMPATIBILITY_2_2)
fi

dnl ---------------------------------------------------------------------------
dnl the library may be built without GUI classes at all
dnl ---------------------------------------------------------------------------

if test "$wxUSE_GUI" = "yes"; then
  AC_DEFINE(wxUSE_GUI)

  dnl the things we always pull in the GUI version of the library:
  dnl 1. basic things like wxApp, wxWindow, wxControl, wxFrame, wxDialog (the
  dnl    library really can't be built without those)
  dnl 2. basic controls: wxButton, wxStaticText, wxTextCtrl (these are used in
  dnl    almost any program and the first 2 are needed to show a message box
  dnl    which want to be always able to do)
  dnl 3. GDI stuff: icon, cursors and all that. Although it would be very nice
  dnl    to compile without them (if the app doesn't do any drawing, it doesn't
  dnl    need the dcs, pens, brushes, ...), this just can't be done now
  dnl 4. menu stuff: wxMenu, wxMenuBar, wxMenuItem
  dnl 5. misc stuff: timers, settings, message box
else
  AC_DEFINE(wxUSE_NOGUI)
fi

dnl ---------------------------------------------------------------------------
dnl Unix/Windows
dnl ---------------------------------------------------------------------------

if test "$wxUSE_UNIX" = "yes"; then
  AC_DEFINE(wxUSE_UNIX)
fi

dnl ---------------------------------------------------------------------------
dnl Register non-GUI class options for makefiles and setup.h
dnl ---------------------------------------------------------------------------

if test "$wxUSE_APPLE_IEEE" = "yes"; then
  AC_DEFINE(wxUSE_APPLE_IEEE)
fi

if test "$wxUSE_TIMER" = "yes"; then
  AC_DEFINE(wxUSE_TIMER)
fi

if test "$wxUSE_WAVE" = "yes"; then
  AC_DEFINE(wxUSE_WAVE)
fi

if test "$wxUSE_CMDLINE_PARSER" = "yes"; then
  AC_DEFINE(wxUSE_CMDLINE_PARSER)
fi

if test "$wxUSE_STOPWATCH" = "yes"; then
  AC_DEFINE(wxUSE_STOPWATCH)
fi

if test "$wxUSE_DATETIME" = "yes"; then
  AC_DEFINE(wxUSE_DATETIME)
fi

if test "$wxUSE_TIMEDATE" = "yes"; then
  AC_DEFINE(wxUSE_TIMEDATE)
fi

if test "$wxUSE_FILE" = "yes"; then
  AC_DEFINE(wxUSE_FILE)
fi

if test "$wxUSE_FFILE" = "yes"; then
  AC_DEFINE(wxUSE_FFILE)
fi

if test "$wxUSE_FILESYSTEM" = "yes"; then
  AC_DEFINE(wxUSE_FILESYSTEM)
fi

if test "$wxUSE_FS_INET" = "yes"; then
  AC_DEFINE(wxUSE_FS_INET)
fi

if test "$wxUSE_FS_ZIP" = "yes"; then
  AC_DEFINE(wxUSE_FS_ZIP)
fi

if test "$wxUSE_ZIPSTREAM" = "yes"; then
  AC_DEFINE(wxUSE_ZIPSTREAM)
fi

if test "$wxUSE_ON_FATAL_EXCEPTION" = "yes"; then
  AC_DEFINE(wxUSE_ON_FATAL_EXCEPTION)
fi

if test "$wxUSE_SNGLINST_CHECKER" = "yes"; then
  AC_DEFINE(wxUSE_SNGLINST_CHECKER)
fi

if test "$wxUSE_BUSYINFO" = "yes"; then
  AC_DEFINE(wxUSE_BUSYINFO)
fi

if test "$wxUSE_STD_IOSTREAM" = "yes"; then
  AC_DEFINE(wxUSE_STD_IOSTREAM)
fi

if test "$wxUSE_TEXTBUFFER" = "yes"; then
    AC_DEFINE(wxUSE_TEXTBUFFER)
fi

if test "$wxUSE_TEXTFILE" = "yes"; then
  if test "$wxUSE_FILE" != "yes" -o "$wxUSE_TEXTBUFFER" != "yes" ; then
    AC_MSG_WARN(wxTextFile requires wxFile and wxTextBuffer... disabled)
  else
    AC_DEFINE(wxUSE_TEXTFILE)
  fi
fi

if test "$wxUSE_CONFIG" = "yes" ; then
  if test "$wxUSE_TEXTFILE" != "yes"; then
    AC_MSG_WARN(wxConfig requires wxTextFile... disabled)
  else
    AC_DEFINE(wxUSE_CONFIG)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS config"
  fi
fi

if test "$wxUSE_INTL" = "yes" ; then
  if test "$wxUSE_FILE" != "yes"; then
    AC_MSG_WARN(I18n code requires wxFile... disabled)
  else
    AC_DEFINE(wxUSE_INTL)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS internat"
    GUIDIST="$GUIDIST INTL_DIST"
  fi
fi

if test "$wxUSE_LOG" = "yes"; then
  AC_DEFINE(wxUSE_LOG)

    if test "$wxUSE_LOGGUI" = "yes"; then
      AC_DEFINE(wxUSE_LOGGUI)
    fi

    if test "$wxUSE_LOGWINDOW" = "yes"; then
      AC_DEFINE(wxUSE_LOGWINDOW)
    fi

    if test "$wxUSE_LOGDIALOG" = "yes"; then
      AC_DEFINE(wxUSE_LOG_DIALOG)
    fi
fi

if test "$wxUSE_LONGLONG" = "yes"; then
  AC_DEFINE(wxUSE_LONGLONG)
fi

if test "$wxUSE_GEOMETRY" = "yes"; then
  AC_DEFINE(wxUSE_GEOMETRY)
fi

if test "$wxUSE_DIALUP_MANAGER" = "yes" ; then
  AC_DEFINE(wxUSE_DIALUP_MANAGER)
  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS dialup"
fi

if test "$wxUSE_STREAMS" = "yes" ; then
  AC_DEFINE(wxUSE_STREAMS)
fi

dnl ---------------------------------------------------------------------------
dnl time/date functions
dnl ------------------------------------------------------------------------

if test "$wxUSE_DATETIME" = "yes"; then
    dnl check for strptime
    AC_CHECK_FUNCS(strptime)

    dnl check for timezone variable
    dnl   doesn't exist under Darwin / Mac OS X which uses tm_gmtoff instead
    AC_CACHE_CHECK(for timezone variable in <time.h>,
                   wx_cv_var_timezone,
                   [
                        AC_TRY_COMPILE(
                            [
                                #include <time.h>
                            ],
                            [
                                int tz;
                                tz = timezone;
                            ],
                            [
                                wx_cv_var_timezone=timezone
                            ],
                            [
                                AC_TRY_COMPILE(
                                    [
                                        #include <time.h>
                                    ],
                                    [
                                        int tz;
                                        tz = _timezone;
                                    ],
                                    [
                                        wx_cv_var_timezone=_timezone
                                    ],
                                    [
                                        AC_TRY_COMPILE(
                                            [
                                                #include <time.h>
                                            ],
                                            [
                                                int tz;
                                                tz = __timezone;
                                            ],
                                            [
                                                wx_cv_var_timezone=__timezone
                                            ],
                                            [
                                                if test "$USE_DOS" = 0 ; then
                                                    AC_MSG_WARN(no timezone variable, will use tm_gmtoff instead)
                                                fi
                                            ]
                                        )
                                    ]
                                )
                            ]
                        )
                   ]
    )

    dnl as we want $wx_cv_var_timezone to be expanded, use AC_DEFINE_UNQUOTED
    if test "x$wx_cv_var_timezone" != x ; then
        AC_DEFINE_UNQUOTED(WX_TIMEZONE, $wx_cv_var_timezone)
    fi

    dnl check for localtime (it's POSIX, but the check can do no harm...)
    AC_CHECK_FUNCS(localtime)

    if test "$ac_cv_func_localtime" = "yes"; then
        AC_CACHE_CHECK(for tm_gmtoff in struct tm,
                       wx_cv_struct_tm_has_gmtoff,
        [
            AC_TRY_COMPILE(
                [
                    #include <time.h>
                ],
                [
                    struct tm tm;
                    tm.tm_gmtoff++;
                ],
                [
                    wx_cv_struct_tm_has_gmtoff=yes
                ],
                wx_cv_struct_tm_has_gmtoff=no
            )
        ])
    fi

    if test "$wx_cv_struct_tm_has_gmtoff" = "yes"; then
        AC_DEFINE(WX_GMTOFF_IN_TM)
    fi

    dnl check for gettimeofday (SVr4, BSD 4.3) and ftime (V7, BSD 4.3) for the
    dnl function to be used for high resolution timers
    AC_CHECK_FUNCS(gettimeofday ftime, break)

    if test "$ac_cv_func_gettimeofday" = "yes"; then
        AC_CACHE_CHECK([whether gettimeofday takes two arguments],
                       wx_cv_func_gettimeofday_has_2_args,
        [
            dnl on some _really_ old systems it takes only 1 argument
            AC_LANG_SAVE
            AC_LANG_CPLUSPLUS

            AC_TRY_COMPILE(
                [
                    #include <sys/time.h>
                    #include <unistd.h>
                ],
                [
                    struct timeval tv;
                    gettimeofday(&tv, NULL);
                ],
                wx_cv_func_gettimeofday_has_2_args=yes,
                AC_TRY_COMPILE(
                    [
                        #include <sys/time.h>
                        #include <unistd.h>
                    ],
                    [
                        struct timeval tv;
                        gettimeofday(&tv);
                    ],
                    wx_cv_func_gettimeofday_has_2_args=no,
                    [
                        AC_MSG_WARN([failed to determine number of gettimeofday() arguments])
                        wx_cv_func_gettimeofday_has_2_args=unknown
                    ]
                )
            )
            AC_LANG_RESTORE
        ])

        if test "$wx_cv_func_gettimeofday_has_2_args" != "yes"; then
            AC_DEFINE(WX_GETTIMEOFDAY_NO_TZ)
        fi
    fi

    AC_DEFINE(wxUSE_TIMEDATE)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS typetest"
fi

dnl ------------------------------------------------------------------------
dnl wxSocket
dnl ------------------------------------------------------------------------

dnl VZ: the GUI hooks wxSocket needs are not implemented yet in wxMGL
if test "$wxUSE_SOCKETS" = "yes"; then
    if test "$wxUSE_MGL" = "1"; then
        AC_MSG_WARN([wxSocket not yet supported under MGL... disabled])
        wxUSE_SOCKETS="no"
    fi
fi

if test "$wxUSE_SOCKETS" = "yes"; then
    dnl under MSW we always have sockets
    if test "$TOOLKIT" != "MSW"; then
        dnl under Solaris and OS/2, socket functions live in -lsocket
        AC_CHECK_FUNC(socket,,
            AC_CHECK_LIB(socket, socket,
                if test "$INET_LINK" != " -lsocket"; then
                    INET_LINK="$INET_LINK -lsocket"
                fi,
                [
                    AC_MSG_WARN([socket library not found - sockets will be disabled])
                    wxUSE_SOCKETS=no
                ]
            )
        )
    fi
fi

if test "$wxUSE_SOCKETS" = "yes" ; then
    dnl this test may be appropriate if building under cygwin
    dnl right now I'm assuming it also uses the winsock stuff
    dnl like mingw does..  -- RL
    if test "$TOOLKIT" != "MSW"; then
        dnl determine the type of third argument for getsockname
        AC_CACHE_CHECK([what is the type of the third argument of getsockname],
                       wx_cv_type_getsockname3,
            [
                AC_LANG_SAVE
                AC_LANG_CPLUSPLUS

                AC_TRY_COMPILE(
                    [
                        #include <sys/types.h>
                        #include <sys/socket.h>
                    ],
                    [
                        socklen_t len;
                        getsockname(0, 0, &len);
                    ],
                    wx_cv_type_getsockname3=socklen_t,
                    AC_TRY_COMPILE(
                        [
                            #include <sys/types.h>
                            #include <sys/socket.h>
                        ],
                        [
                            size_t len;
                            getsockname(0, 0, &len);
                        ],
                        wx_cv_type_getsockname3=size_t,
                        AC_TRY_COMPILE(
                            [
                                #include <sys/types.h>
                                #include <sys/socket.h>
                            ],
                            [
                                int len;
                                getsockname(0, 0, &len);
                            ],
                            wx_cv_type_getsockname3=int,
                            wx_cv_type_getsockname3=unknown
                        )
                    )
                )

                AC_LANG_RESTORE
            ])

        if test "$wx_cv_type_getsockname3" = "unknown"; then
            wxUSE_SOCKETS=no
            AC_MSG_WARN([Couldn't find socklen_t synonym for this system])
        else
            AC_DEFINE_UNQUOTED(SOCKLEN_T, $wx_cv_type_getsockname3)
        fi
    fi
fi

if test "$wxUSE_SOCKETS" = "yes" ; then
    AC_DEFINE(wxUSE_SOCKETS)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS sockets"
fi

dnl ---------------------------------------------------------------------------
dnl Joystick support
dnl ---------------------------------------------------------------------------

if test "$wxUSE_GUI" = "yes"; then

    if test "$TOOLKIT" = "MAC"; then
        AC_MSG_WARN([Joystick not yet supported under Mac OS X... disabled])
        wxUSE_JOYSTICK=no
     fi
    if test "$TOOLKIT" = "MOTIF"; then
        AC_MSG_WARN([Joystick not yet supported under Motif... disabled])
        wxUSE_JOYSTICK=no
     fi
    if test "$TOOLKIT" = "X11"; then
        AC_MSG_WARN([Joystick not yet supported under X11... disabled])
        wxUSE_JOYSTICK=no
     fi

    dnl under MSW we always have joystick support
    if test "$TOOLKIT" != "MSW"; then
        if test "$wxUSE_JOYSTICK" = "yes"; then
            dnl joystick support is only for Linux 2.1.x or greater
            AC_CHECK_HEADERS(linux/joystick.h)
            if test "$ac_cv_header_linux_joystick_h" != "yes"; then
                wxUSE_JOYSTICK=no
                AC_MSG_WARN(Joystick not supported by this system... disabled)
            fi
        fi
    fi

    if test "$wxUSE_JOYSTICK" = "yes"; then
        AC_DEFINE(wxUSE_JOYSTICK)
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS joytest"
    fi
fi

dnl ------------------------------------------------------------------------
dnl DLL support
dnl ------------------------------------------------------------------------

dnl under MSW we always have LoadLibrary/GetProcAddress
if test "$TOOLKIT" != "MSW"; then

    HAVE_DL_FUNCS=0
    HAVE_SHL_FUNCS=0
    if test "$wxUSE_DYNAMIC_LOADER" = "yes" -o "$wxUSE_DYNLIB_CLASS" = "yes" ; then
        if test "$USE_DARWIN" = 1; then
            dnl dlopen/dlerror is implemented in dynlib.cpp for Darwin/Mac OS X
            HAVE_DL_FUNCS=1
        else
            dnl the test is a bit complicated because we check for dlopen() both with
            dnl and without -ldl and we also try to find shl_load() if there is no
            dnl dlopen() on this system
            AC_CHECK_FUNCS(dlopen,
            [
                AC_DEFINE(HAVE_DLOPEN)
                HAVE_DL_FUNCS=1
            ],
            [
                AC_CHECK_LIB(dl, dlopen,
                            [
                                AC_DEFINE(HAVE_DLOPEN)
                                HAVE_DL_FUNCS=1
                                DL_LINK=" -ldl$DL_LINK"
                            ],
                            [
                                AC_CHECK_FUNCS(shl_load,
                                              [
                                                AC_DEFINE(HAVE_SHL_LOAD)
                                                HAVE_SHL_FUNCS=1
                                              ],
                                              [
                                                AC_CHECK_LIB(shl_load, dld,
                                                             [
                                                                HAVE_SHL_FUNCS=1
                                                                DL_LINK=" -ldld$DL_LINK"
                                                             ])
                                              ])
                            ])
            ])

        dnl check also for dlerror()
        if test "$HAVE_DL_FUNCS" = 1; then
            AC_CHECK_FUNCS(dlerror,
                           AC_DEFINE(HAVE_DLERROR),
                           AC_CHECK_LIB(dl, dlerror, AC_DEFINE(HAVE_DLERROR)))
        fi
        fi

        if test "$HAVE_DL_FUNCS" = 0; then
            if test "$HAVE_SHL_FUNCS" = 0; then
              if test "$USE_UNIX" = 1; then
                  AC_MSG_WARN([Missing dynamic loading support, several features will be disabled])
                  wxUSE_DYNAMIC_LOADER=no
                  wxUSE_DYNLIB_CLASS=no
              else
                  AC_MSG_WARN([Assuming wxLibrary class works on this platform])
              fi
            fi
        fi
    fi
fi

if test "$wxUSE_DYNAMIC_LOADER" = "yes" ; then
    AC_DEFINE(wxUSE_DYNAMIC_LOADER)
elif test "$wxUSE_DYNLIB_CLASS" = "yes" ; then
    AC_DEFINE(wxUSE_DYNLIB_CLASS)
fi

dnl ---------------------------------------------------------------------------
dnl String stuff
dnl ---------------------------------------------------------------------------

if test "$wxUSE_FONTMAP" = "yes" ; then
  AC_DEFINE(wxUSE_FONTMAP)
fi

if test "$wxUSE_UNICODE" = "yes" ; then
  AC_DEFINE(wxUSE_UNICODE)

  if test "$wxUSE_MSW" != 1; then
      wxUSE_UNICODE_MSLU=no
  fi

  if test "$wxUSE_MSW" = 1 -a "$wxUSE_UNICODE_MSLU" = "yes"; then
        AC_CHECK_LIB(unicows,main,
            [
                AC_DEFINE(wxUSE_UNICODE_MSLU)
            ],
            [
                AC_MSG_WARN([Compiler doesn't support MSLU (libunicows.a), disabled.
                             Applications will only run on Windows NT/2000/XP!])
                wxUSE_UNICODE_MSLU=no
            ])
    fi
fi

if test "$wxUSE_wxUSE_EXPERIMENTAL_PRINTF" = "yes"; then
  AC_DEFINE(wxUSE_EXPERIMENTAL_PRINTF)
fi


dnl ----------------------------------------------------------------
dnl iODBC support
dnl ----------------------------------------------------------------

IODBC_C_SRC=""
if test "$wxUSE_ODBC" = "yes" ; then
    AC_DEFINE(wxUSE_ODBC)
    WXODBCFLAG="-D_IODBC_"
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS db"
fi

dnl ----------------------------------------------------------------
dnl Register PostScript options for makefiles and setup.h
dnl ----------------------------------------------------------------

if test "$wxUSE_POSTSCRIPT" = "yes" ; then
  AC_DEFINE(wxUSE_POSTSCRIPT)
fi

AC_DEFINE(wxUSE_AFM_FOR_POSTSCRIPT)

AC_DEFINE(wxUSE_NORMALIZED_PS_FONTS)

dnl ---------------------------------------------------------------------------
dnl big GUI components: MDI, doc/view, printing, help, ...
dnl ---------------------------------------------------------------------------

if test "$wxUSE_CONSTRAINTS" = "yes"; then
    AC_DEFINE(wxUSE_CONSTRAINTS)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS layout"
fi

if test "$wxUSE_MDI_ARCHITECTURE" = "yes"; then

dnl     There is now experimental generic MDI support
dnl     if test "$wxUSE_UNIVERSAL" = "yes"; then
dnl         AC_MSG_WARN(MDI not yet supported for wxUniversal... disabled)
dnl         wxUSE_MDI_ARCHITECTURE=no
dnl     fi

   if test "$wxUSE_MDI_ARCHITECTURE" = "yes"; then
       AC_DEFINE(wxUSE_MDI_ARCHITECTURE)
       SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS mdi"
   fi
fi

if test "$wxUSE_DOC_VIEW_ARCHITECTURE" = "yes" ; then
    AC_DEFINE(wxUSE_DOC_VIEW_ARCHITECTURE)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS docview"
    if test "$wxUSE_MDI_ARCHITECTURE" = "yes"; then
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS docvwmdi"
    fi
fi

if test "$wxUSE_HELP" = "yes"; then
    AC_DEFINE(wxUSE_HELP)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS help"

    if test "$wxUSE_MSW" = 1; then
      if test "$wxUSE_MS_HTML_HELP" = "yes"; then
        AC_DEFINE(wxUSE_MS_HTML_HELP)
      fi
    fi

    if test "$wxUSE_WXHTML_HELP" = "yes"; then
      if test "$wxUSE_HTML" = "yes"; then
        AC_DEFINE(wxUSE_WXHTML_HELP)
      else
        AC_MSG_WARN(Cannot use wxHTML-based help without wxHTML so it won't be compiled)
        wxUSE_WXHTML_HELP=no
      fi
    fi
fi

if test "$wxUSE_PRINTING_ARCHITECTURE" = "yes" ; then
    if test "$wxUSE_CONSTRAINTS" != "yes"; then
        AC_MSG_WARN(Printing support cannot be used without constraints so it won't be compiled without it)
    else
        AC_DEFINE(wxUSE_PRINTING_ARCHITECTURE)
    fi
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS printing"
fi

if test "$wxUSE_PROLOGIO" = "yes" ; then
    AC_DEFINE(wxUSE_PROLOGIO)
    ALL_OBJECTS="$ALL_OBJECTS parser.o"
fi

if test "$wxUSE_RESOURCES" = "yes" ; then
    if test "$wxUSE_NANOX" = "yes"; then
        AC_MSG_WARN([Cannot use resource database functions in NanoX])
    else
        AC_DEFINE(wxUSE_RESOURCES)
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS resource"
    fi
    if test "$wxUSE_PROLOGIO" != "yes" ; then
        ALL_OBJECTS="$ALL_OBJECTS parser.o"
    fi
fi

if test "$wxUSE_X_RESOURCES" = "yes"; then
    AC_DEFINE(wxUSE_X_RESOURCES)
fi

dnl ---------------------------------------------------------------------------
dnl IPC: IPC, Drag'n'Drop, Clipboard, ...
dnl ---------------------------------------------------------------------------

dnl check for ole headers and disable a few features requiring it if not
dnl present (earlier versions of mingw32 don't have ole2.h)
if test "$wxUSE_MSW" = 1 -a \( "$wxUSE_DATAOBJ"       = "yes" \
                          -o "$wxUSE_CLIPBOARD"     = "yes" \
                          -o "$wxUSE_OLE"     = "yes" \
                          -o "$wxUSE_DRAG_AND_DROP" = "yes" \) ; then
    AC_CHECK_HEADERS(ole2.h)

    if test "$ac_cv_header_ole2_h" = "yes" ; then
        if test "$GCC" = yes ; then
            AC_LANG_SAVE
            AC_LANG_CPLUSPLUS

            AC_MSG_CHECKING([if g++ requires -fvtable-thunks])
            AC_TRY_COMPILE([#include <windows.h>
                            #include <ole2.h>],
                           [],
                           [AC_MSG_RESULT(no)],
                           [AC_MSG_RESULT(yes)
                            CODE_GEN_FLAGS_CXX="$CODE_GEN_FLAGS_CXX -fvtable-thunks"])
            AC_LANG_RESTORE
            ALL_OBJECTS="$ALL_OBJECTS \$(OLEOBJS)"
            LIBS=" -lrpcrt4 -loleaut32 -lole32 -luuid$LIBS"
            AC_DEFINE(wxUSE_OLE)

        fi

        dnl for OLE clipboard and dnd
        AC_DEFINE(wxUSE_DATAOBJ)
    else
        AC_MSG_WARN([Some features disabled because OLE headers not found])

        wxUSE_CLIPBOARD=no
        wxUSE_DRAG_AND_DROP=no
        wxUSE_DATAOBJ=no
        wxUSE_OLE=no
    fi

    if test "$wxUSE_METAFILE" = "yes"; then
        AC_DEFINE(wxUSE_METAFILE)

        dnl this one should probably be made separately configurable
        AC_DEFINE(wxUSE_ENH_METAFILE)
    fi
fi

if test "$wxUSE_WINE" = 1 -a \( "$wxUSE_DATAOBJ"       = "yes" \
                          -o "$wxUSE_CLIPBOARD"     = "yes" \
                          -o "$wxUSE_OLE"     = "yes" \
                          -o "$wxUSE_DRAG_AND_DROP" = "yes" \) ; then
    AC_CHECK_HEADERS(ole2.h)

    if test "$ac_cv_header_ole2_h" = "yes" ; then
        if test "$GCC" = yes ; then
            AC_LANG_SAVE
            AC_LANG_CPLUSPLUS

            AC_MSG_CHECKING([if g++ requires -fvtable-thunks])
            AC_TRY_COMPILE([#include <windows.h>
                            #include <ole2.h>],
                           [],
                           [AC_MSG_RESULT(no)],
                           [AC_MSG_RESULT(yes)
                            CODE_GEN_FLAGS_CXX="$CODE_GEN_FLAGS_CXX -fvtable-thunks"])
            AC_LANG_RESTORE
            ALL_OBJECTS="$ALL_OBJECTS \$(OLEOBJS)"
            LIBS=" -lwine_uuid$LIBS"
            AC_DEFINE(wxUSE_OLE)

        fi

        dnl for OLE clipboard and dnd
        AC_DEFINE(wxUSE_DATAOBJ)
    else
        AC_MSG_WARN([Some features disabled because OLE headers not found])

        wxUSE_CLIPBOARD=no
        wxUSE_DRAG_AND_DROP=no
        wxUSE_DATAOBJ=no
        wxUSE_OLE=no
    fi

    if test "$wxUSE_METAFILE" = "yes"; then
        AC_DEFINE(wxUSE_METAFILE)

        dnl this one should probably be made separately configurable
        AC_DEFINE(wxUSE_ENH_METAFILE)
    fi
fi

if test "$wxUSE_IPC" = "yes"; then
    if test "$wxUSE_SOCKETS" != "yes"; then
        AC_MSG_WARN(wxWindows IPC classes require sockets... disabled)
    fi

    AC_DEFINE(wxUSE_IPC)
fi

if test "$wxUSE_CLIPBOARD" = "yes"; then
    if test "$wxUSE_MGL" = 1; then
        AC_MSG_WARN([Clipboard not yet supported under MGL... disabled])
        wxUSE_CLIPBOARD=no
    fi

    if test "$wxUSE_CLIPBOARD" = "yes"; then
        AC_DEFINE(wxUSE_CLIPBOARD)

        dnl required by clipboard code in configuration check
        AC_DEFINE(wxUSE_DATAOBJ)
    fi
fi

if test "$wxUSE_DRAG_AND_DROP" = "yes" ; then
    if test "$wxUSE_GTK" = 1; then
        if test "$WXGTK12" != 1; then
            AC_MSG_WARN([Drag and drop is only supported under GTK+ 1.2... disabled])
            wxUSE_DRAG_AND_DROP=no
        fi
    fi

    if test "$wxUSE_MOTIF" = 1; then
        AC_MSG_WARN([Drag and drop not yet supported under Motif... disabled])
        wxUSE_DRAG_AND_DROP=no
    fi

    if test "$wxUSE_X11" = 1; then
        AC_MSG_WARN([Drag and drop not yet supported under X11... disabled])
        wxUSE_DRAG_AND_DROP=no
    fi

    if test "$wxUSE_MGL" = 1; then
        AC_MSG_WARN([Drag and drop not yet supported under MGL... disabled])
        wxUSE_DRAG_AND_DROP=no
    fi

    if test "$wxUSE_DRAG_AND_DROP" = "yes"; then
        AC_DEFINE(wxUSE_DRAG_AND_DROP)
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS dnd"
    fi

fi

if test "$wxUSE_SPLINES" = "yes" ; then
  AC_DEFINE(wxUSE_SPLINES)
fi

dnl ---------------------------------------------------------------------------
dnl GUI controls
dnl ---------------------------------------------------------------------------

USES_CONTROLS=0
if test "$wxUSE_CONTROLS" = "yes"; then
  USES_CONTROLS=1
fi

if test "$wxUSE_ACCEL" = "yes"; then
  AC_DEFINE(wxUSE_ACCEL)
  USES_CONTROLS=1
fi

if test "$wxUSE_BUTTON" = "yes"; then
  AC_DEFINE(wxUSE_BUTTON)
  USES_CONTROLS=1
fi

if test "$wxUSE_BMPBUTTON" = "yes"; then
  AC_DEFINE(wxUSE_BMPBUTTON)
  USES_CONTROLS=1
fi

if test "$wxUSE_CALCTRL" = "yes"; then
  AC_DEFINE(wxUSE_CALENDARCTRL)
  USES_CONTROLS=1
  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS calendar"
fi

if test "$wxUSE_CARET" = "yes"; then
  AC_DEFINE(wxUSE_CARET)
  USES_CONTROLS=1
  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS caret"
fi

if test "$wxUSE_COMBOBOX" = "yes"; then
  AC_DEFINE(wxUSE_COMBOBOX)
  USES_CONTROLS=1
fi

if test "$wxUSE_CHOICE" = "yes"; then
  AC_DEFINE(wxUSE_CHOICE)
  USES_CONTROLS=1
fi

if test "$wxUSE_CHECKBOX" = "yes"; then
  AC_DEFINE(wxUSE_CHECKBOX)
  USES_CONTROLS=1
fi

if test "$wxUSE_CHECKLST" = "yes"; then
  AC_DEFINE(wxUSE_CHECKLISTBOX)
  USES_CONTROLS=1
  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS checklst"
fi

if test "$wxUSE_GAUGE" = "yes"; then
  AC_DEFINE(wxUSE_GAUGE)
  USES_CONTROLS=1
fi

if test "$wxUSE_NEW_GRID" = "yes"; then
  wxUSE_GRID="yes"
  AC_DEFINE(wxUSE_NEW_GRID)
  USES_CONTROLS=1
  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS newgrid"
fi

if test "$wxUSE_GRID" = "yes"; then
  AC_DEFINE(wxUSE_GRID)
  USES_CONTROLS=1
  SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS grid"
fi

if test "$wxUSE_IMAGLIST" = "yes"; then
    AC_DEFINE(wxUSE_IMAGLIST)
fi

if test "$wxUSE_LISTBOX" = "yes"; then
    AC_DEFINE(wxUSE_LISTBOX)
    USES_CONTROLS=1
fi

if test "$wxUSE_LISTCTRL" = "yes"; then
    if test "$wxUSE_IMAGLIST" = "yes"; then
        AC_DEFINE(wxUSE_LISTCTRL)
        USES_CONTROLS=1
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS listctrl"
    else
        AC_MSG_WARN([wxListCtrl requires wxImageList and won't be compiled without it])
    fi
fi

if test "$wxUSE_NOTEBOOK" = "yes"; then
    AC_DEFINE(wxUSE_NOTEBOOK)
    USES_CONTROLS=1
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS notebook"
fi

if test "$wxUSE_PROPSHEET" = "yes"; then
    AC_DEFINE(wxUSE_PROPSHEET)
    USES_CONTROLS=1
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS proplist"
fi

if test "$wxUSE_RADIOBOX" = "yes"; then
    AC_DEFINE(wxUSE_RADIOBOX)
    USES_CONTROLS=1
fi

if test "$wxUSE_RADIOBTN" = "yes"; then
    AC_DEFINE(wxUSE_RADIOBTN)
    USES_CONTROLS=1
fi

if test "$wxUSE_SASH" = "yes"; then
    AC_DEFINE(wxUSE_SASH)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS sashtest"
fi

if test "$wxUSE_SCROLLBAR" = "yes"; then
    AC_DEFINE(wxUSE_SCROLLBAR)
    USES_CONTROLS=1
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS scroll scrollsub"
fi

if test "$wxUSE_SLIDER" = "yes"; then
    AC_DEFINE(wxUSE_SLIDER)
    USES_CONTROLS=1
fi

if test "$wxUSE_SPINBTN" = "yes"; then
    AC_DEFINE(wxUSE_SPINBTN)
    USES_CONTROLS=1
fi

if test "$wxUSE_SPINCTRL" = "yes"; then
    AC_DEFINE(wxUSE_SPINCTRL)
    USES_CONTROLS=1
fi

if test "$wxUSE_SPLITTER" = "yes"; then
    AC_DEFINE(wxUSE_SPLITTER)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS splitter"
fi

if test "$wxUSE_STATBMP" = "yes"; then
    AC_DEFINE(wxUSE_STATBMP)
    USES_CONTROLS=1
fi

if test "$wxUSE_STATBOX" = "yes"; then
    AC_DEFINE(wxUSE_STATBOX)
    USES_CONTROLS=1
fi

if test "$wxUSE_STATTEXT" = "yes"; then
    AC_DEFINE(wxUSE_STATTEXT)
    USES_CONTROLS=1
fi

if test "$wxUSE_STATLINE" = "yes"; then
    if test "$wxUSE_WINE" = 1 ; then
        AC_MSG_WARN([wxStaticLine is not supported under WINE])
    else
        AC_DEFINE(wxUSE_STATLINE)
        USES_CONTROLS=1
    fi
fi

if test "$wxUSE_STATUSBAR" = "yes"; then
    AC_DEFINE(wxUSE_STATUSBAR)
    USES_CONTROLS=1

    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS statbar"
fi

if test "$wxUSE_TABDIALOG" = "yes"; then
    AC_DEFINE(wxUSE_TAB_DIALOG)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS tab"
fi

if test "$wxUSE_TEXTCTRL" = "yes"; then
    AC_DEFINE(wxUSE_TEXTCTRL)
    USES_CONTROLS=1
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS text"
fi

if test "$wxUSE_TOGGLEBTN" = "yes"; then
    if test "$wxUSE_MAC" = 1; then
        AC_MSG_WARN([Toggle button not yet supported under Mac OS X... disabled])
        wxUSE_TOGGLEBTN=no
    fi
    if test "$wxUSE_UNIVERSAL" = "yes"; then
        AC_MSG_WARN([Toggle button not yet supported under wxUniversal... disabled])
        wxUSE_TOGGLEBTN=no
    fi

    if test "$wxUSE_TOGGLEBTN" = "yes"; then
        AC_DEFINE(wxUSE_TOGGLEBTN)
        USES_CONTROLS=1
    fi
fi

if test "$wxUSE_TOOLBAR_SIMPLE" = "yes"; then
    AC_DEFINE(wxUSE_TOOLBAR_SIMPLE)
    wxUSE_TOOLBAR="yes"
    USES_CONTROLS=1
fi

if test "$wxUSE_TOOLBAR" = "yes"; then
    AC_DEFINE(wxUSE_TOOLBAR)
    USES_CONTROLS=1

    dnl if wxUSE_TOOLBAR and !wxUSE_TOOLBAR_SIMPLE => wxUSE_TOOLBAR_NATIVE
    if test "$wxUSE_TOOLBAR_SIMPLE" != "yes"; then
        wxUSE_TOOLBAR_NATIVE="yes"
    fi

    if test "$wxUSE_TOOLBAR_NATIVE" = "yes"; then
        AC_DEFINE(wxUSE_TOOLBAR_NATIVE)
        USES_CONTROLS=1
    fi

    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS toolbar"
fi

if test "$wxUSE_TOOLTIPS" = "yes"; then
    if test "$wxUSE_MOTIF" = 1; then
        AC_MSG_WARN([wxTooltip not supported yet under Motif... disabled])
    else
        if test "$wxUSE_WINE" = 1; then
            AC_MSG_WARN([wxTooltip not supported under WINE... disabled])
        else
            if test "$wxUSE_UNIVERSAL" = "yes"; then
                AC_MSG_WARN([wxTooltip not supported yet in wxUniversal... disabled])
            else
                AC_DEFINE(wxUSE_TOOLTIPS)
            fi
        fi
    fi
fi

if test "$wxUSE_TREECTRL" = "yes"; then
    if test "$wxUSE_IMAGLIST" = "yes"; then
        AC_DEFINE(wxUSE_TREECTRL)
        USES_CONTROLS=1
        SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS treectrl"
    else
        AC_MSG_WARN([wxTreeCtrl requires wxImageList and won't be compiled without it])
    fi
fi

if test "$wxUSE_POPUPWIN" = "yes"; then
    if test "$wxUSE_MAC" = 1; then
        AC_MSG_WARN([Popup window not yet supported under Mac OS X... disabled])
    else
        if test "$wxUSE_MOTIF" = 1; then
            AC_MSG_WARN([wxPopupWindow not yet supported under Motif... disabled])
        else
            if test "$wxUSE_PM" = 1; then
                AC_MSG_WARN([wxPopupWindow not yet supported under PM... disabled])
            else
                AC_DEFINE(wxUSE_POPUPWIN)

                USES_CONTROLS=1
            fi
        fi
    fi
fi

if test "$wxUSE_TIPWINDOW" = "yes"; then
    if test "$wxUSE_PM" = 1; then
        AC_MSG_WARN([wxTipWindow not yet supported under PM... disabled])
    else
        AC_DEFINE(wxUSE_TIPWINDOW)
    fi
fi

if test "$USES_CONTROLS" = 1; then
    AC_DEFINE(wxUSE_CONTROLS)
fi

dnl ---------------------------------------------------------------------------
dnl misc options
dnl ---------------------------------------------------------------------------

if test "$wxUSE_TREELAYOUT" = "yes"; then
    AC_DEFINE(wxUSE_TREELAYOUT)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS treelay"
fi

if test "$wxUSE_DRAGIMAGE" = "yes"; then
    AC_DEFINE(wxUSE_DRAGIMAGE)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS dragimag"
fi

if test "$wxUSE_MENUS" = "yes"; then
    AC_DEFINE(wxUSE_MENUS)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS menu"
fi

if test "$wxUSE_METAFILE" = "yes"; then
    AC_DEFINE(wxUSE_METAFILE)
fi

if test "$wxUSE_MIMETYPE" = "yes"; then
    AC_DEFINE(wxUSE_MIMETYPE)
fi

if test "$wxUSE_SYSTEM_OPTIONS" = "yes"; then
    AC_DEFINE(wxUSE_SYSTEM_OPTIONS)
if test "$TOOLKIT" = "MSW"; then
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS taskbar"
fi

fi

if test "$wxUSE_PROTOCOL" = "yes"; then
    if test "$wxUSE_SOCKETS" != "yes"; then
        AC_MSG_WARN(Protocol classes require sockets... disabled)
        wxUSE_PROTOCOL=no
    fi

    if test "$wxUSE_PROTOCOL" = "yes"; then
        AC_DEFINE(wxUSE_PROTOCOL)

        if test "$wxUSE_PROTOCOL_HTTP" = "yes"; then
            AC_DEFINE(wxUSE_PROTOCOL_HTTP)
        fi
        if test "$wxUSE_PROTOCOL_FTP" = "yes"; then
            AC_DEFINE(wxUSE_PROTOCOL_FTP)
        fi
        if test "$wxUSE_PROTOCOL_FILE" = "yes"; then
            AC_DEFINE(wxUSE_PROTOCOL_FILE)
        fi
    fi
fi

if test "$wxUSE_URL" = "yes"; then
    if test "$wxUSE_PROTOCOL" != "yes"; then
        AC_MSG_WARN(wxURL class requires wxProtocol... disabled)
        wxUSE_URL=no
    fi
    if test "$wxUSE_URL" = "yes"; then
        AC_DEFINE(wxUSE_URL)
    fi
fi

if test "$wxUSE_MINIFRAME" = "yes"; then
    AC_DEFINE(wxUSE_MINIFRAME)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS minifram"
fi

if test "$wxUSE_HTML" = "yes"; then
    AC_DEFINE(wxUSE_HTML)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS html"
fi

if test "$wxUSE_VALIDATORS" = "yes"; then
    AC_DEFINE(wxUSE_VALIDATORS)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS validate"
fi

if test "$wxUSE_PALETTE" = "yes" ; then
  AC_DEFINE(wxUSE_PALETTE)
fi

if test "$wxUSE_IMAGE" = "yes" ; then
  AC_DEFINE(wxUSE_IMAGE)
fi

if test "$wxUSE_GIF" = "yes" ; then
  AC_DEFINE(wxUSE_GIF)
fi

if test "$wxUSE_PCX" = "yes" ; then
  AC_DEFINE(wxUSE_PCX)
fi

if test "$wxUSE_IFF" = "yes" ; then
  AC_DEFINE(wxUSE_IFF)
fi

if test "$wxUSE_PNM" = "yes" ; then
  AC_DEFINE(wxUSE_PNM)
fi

if test "$wxUSE_XPM" = "yes" ; then
  AC_DEFINE(wxUSE_XPM)
fi

if test "$wxUSE_ICO_CUR" = "yes" ; then
  AC_DEFINE(wxUSE_ICO_CUR)
fi

if test "$wxUSE_UNICODE" = "yes" -a "$wxUSE_UNICODE_MSLU" = "yes" ; then
  dnl Must be done this late because -lunicows must be before all the other libs
  LIBS=" -lunicows $LIBS"
fi

dnl ---------------------------------------------------------------------------
dnl common dialog
dnl ---------------------------------------------------------------------------

if test "$wxUSE_CHOICEDLG" = "yes"; then
    AC_DEFINE(wxUSE_CHOICEDLG)
fi

if test "$wxUSE_COLOURDLG" = "yes"; then
    AC_DEFINE(wxUSE_COLOURDLG)
fi

if test "$wxUSE_FILEDLG" = "yes"; then
    AC_DEFINE(wxUSE_FILEDLG)
fi

if test "$wxUSE_FINDREPLDLG" = "yes"; then
    AC_DEFINE(wxUSE_FINDREPLDLG)
fi

if test "$wxUSE_FONTDLG" = "yes"; then
    AC_DEFINE(wxUSE_FONTDLG)
fi

if test "$wxUSE_DIRDLG" = "yes"; then
    if test "$wxUSE_TREECTRL" != "yes"; then
        AC_MSG_WARN(wxDirDialog requires wxTreeCtrl so it won't be compiled without it)
    else
        AC_DEFINE(wxUSE_DIRDLG)
    fi
fi

if test "$wxUSE_MSGDLG" = "yes"; then
    AC_DEFINE(wxUSE_MSGDLG)
fi

if test "$wxUSE_NUMBERDLG" = "yes"; then
    AC_DEFINE(wxUSE_NUMBERDLG)
fi

if test "$wxUSE_PROGRESSDLG" = "yes"; then
    if test "$wxUSE_CONSTRAINTS" != "yes"; then
       AC_MSG_WARN(wxProgressDialog requires constraints so it won't be compiled without them)
    else
        AC_DEFINE(wxUSE_PROGRESSDLG)
    fi
fi

if test "$wxUSE_SPLASH" = "yes"; then
    AC_DEFINE(wxUSE_SPLASH)
fi

if test "$wxUSE_STARTUP_TIPS" = "yes"; then
    if test "$wxUSE_CONSTRAINTS" != "yes"; then
       AC_MSG_WARN(Startup tips requires constraints and won't be compiled without them)
    else
        AC_DEFINE(wxUSE_STARTUP_TIPS)
    fi
fi

if test "$wxUSE_TEXTDLG" = "yes"; then
    AC_DEFINE(wxUSE_TEXTDLG)
fi

if test "$wxUSE_WIZARDDLG" = "yes"; then
    AC_DEFINE(wxUSE_WIZARDDLG)
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS wizard"
fi

dnl ---------------------------------------------------------------------------
dnl get the string with OS info - used by wxGetOsDescription()
dnl ---------------------------------------------------------------------------

if test "$cross_compiling" = "yes"; then
    dnl Use best guess from host as we can't use uname when cross compiling
    OSINFO="\"$host\""
else
    dnl attualy work out OS version
    OSINFO=`uname -s -r -m`
    OSINFO="\"$OSINFO\""
fi

AC_DEFINE_UNQUOTED(WXWIN_OS_DESCRIPTION, $OSINFO)

dnl ---------------------------------------------------------------------------
dnl define the variable containing the installation prefix (used in dcpsg.cpp)
dnl ---------------------------------------------------------------------------

if test "x$prefix" != "xNONE"; then
    wxPREFIX=$prefix
else
    wxPREFIX=$ac_default_prefix
fi

AC_DEFINE_UNQUOTED(wxINSTALL_PREFIX, "$wxPREFIX")

dnl ---------------------------------------------------------------------------
dnl Output the makefiles and such from the results found above
dnl ---------------------------------------------------------------------------

dnl all additional libraries (except wxWindows itself) we link with

dnl note that we always link with -lm except for Mac OS X
dnl extended.c uses floor() and is always linked in

if test "$wxUSE_MAC" = 1 ; then
    LDFLAGS="$LDFLAGS -framework Carbon -framework System"
fi

dnl FIXME: should this be covered by the conditional above
dnl given the -lm comment there?  Or should that comment (and
dnl this one) be removed..   [ 7 Nov 2001 ]

LIBS="$ZLIB_LINK $POSIX4_LINK $INET_LINK $WCHAR_LINK $DL_LINK $LIBS"

dnl Only add the -lm library if floating point functions cannot be used
dnl without it.  This check is important on cygwin because of the bizarre
dnl way that they have organized functions into libraries.  On cygwin, both
dnl libc.a and libm.a are symbolic links to a single lib libcygwin.a.  This
dnl means that
dnl   1) linking with -lm is not necessary, and
dnl   2) linking with -lm is dangerous if the order of libraries is wrong
dnl In particular, if you compile any program with -mno-cygwin and link with
dnl -lm, it will crash instantly when it is run.  This happens because the
dnl linker incorrectly links the Cygwin libm.a (==libcygwin.a), which replaces
dnl the ___main function instead of allowing it to be defined by
dnl /usr/lib/mingw/libmingw32.a as it should be.
dnl
dnl On MacOS X, this test will find that -lm is unnecessary and leave it out.
dnl
dnl Just check a few floating point functions. If they are all found without
dnl -lm, then we must not need -lm.
have_cos=0
have_floor=0
AC_CHECK_FUNCS(cos, have_cos=1)
AC_CHECK_FUNCS(floor, have_floor=1)
AC_MSG_CHECKING(if floating point functions link without -lm)
if test "$have_cos" = 1 -a "$have_floor" = 1; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
    LIBS="$LIBS -lm"
    # use different functions to avoid configure caching
    have_sin=0
    have_ceil=0
    AC_CHECK_FUNCS(sin, have_sin=1)
    AC_CHECK_FUNCS(ceil, have_ceil=1)
    AC_MSG_CHECKING(if floating point functions link with -lm)
    if test "$have_sin" = 1 -a "$have_ceil" = 1; then
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
        # not sure we should warn the user, crash, etc.
    fi
fi

if test "$wxUSE_GUI" = "yes"; then

    LIBS="$GUI_TK_LIBRARY $PNG_LINK $JPEG_LINK $TIFF_LINK $LIBS"

    dnl TODO add checks that these samples will really compile (i.e. all the
    dnl      library features they need are present)

    dnl TODO some samples are never built so far:
    dnl      ipc, mfc, nativdlg, oleauto, ownerdrw
    SAMPLES_SUBDIRS="$SAMPLES_SUBDIRS artprov controls dialogs \
                     drawing dynamic erase event exec font image \
                     minimal propsize rotate widgets"

    dnl this is needed to be able to find AFM files
    CPPFLAGS="$CPPFLAGS \$(EXTRADEFS) \$(APPEXTRADEFS)"
else
    SAMPLES_SUBDIRS="console"
fi


dnl all -I options we must pass to the compiler
dnl
dnl note that the order is somewhat important, in particular the ZLIB_INCLUDE
dnl and other stuff for the built in libraries should come first to avoid
dnl including the system headers with the same name (it is particularly
dnl important for zlib because XFree 4.2.0 has its own, horribly old and
dnl incompatible, zlib.h) and the wxWindows headers should come first anyhow
INCLUDES="-I\${top_builddir}/lib/wx/include/${TOOLCHAIN_NAME} \
-I\${top_srcdir}/include \
$REGEX_INCLUDE $ZLIB_INCLUDE $PNG_INCLUDE $JPEG_INCLUDE $TIFF_INCLUDE \
$TOOLKIT_INCLUDE"

dnl wxGTK does not need TOOLKIT includes in wx-config
if test "$wxUSE_GTK" = 1; then
    WXCONFIG_INCLUDE=
else
    WXCONFIG_INCLUDE="$TOOLKIT_INCLUDE"
fi

dnl C/C++ compiler options used to compile wxWindows
if test "$GXX" = yes ; then
    dnl CXXWARNINGS="-Wall -W -Wcast-qual -Werror"
    CXXWARNINGS="-Wall"
    dnl should enable this one day...
    dnl CXXWARNINGS="-Wall -Werror"

    dnl Add this *after* all compile tests, we don't need or want generated
    dnl depfiles until actually building the lib
    if test "$wxUSE_NO_DEPS" = "no" ; then
        CFLAGS="-MMD $CFLAGS"
        CXXFLAGS="-MMD $CXXFLAGS"
    fi
fi

EXTRA_CFLAGS="$WXDEBUG $WXODBCFLAG $PROFILE $OPTIMISE"

dnl remove the extra white space from the cc/c++/ld options
CPPFLAGS=`echo $INCLUDES $CPPFLAGS | sed 's/ \\+/ /g'`
CFLAGS=`echo $EXTRA_CFLAGS $CFLAGS $CXXWARNINGS | sed 's/ \\+/ /g'`
CXXFLAGS=`echo $EXTRA_CFLAGS $CXXFLAGS $CXXWARNINGS | sed 's/ \+/ /g'`
LIBS=`echo $LIBS | sed 's/ \+/ /g'`

LDFLAGS="$LDFLAGS $PROFILE"

dnl for convenience, sort the samples in alphabetical order
dnl
dnl FIXME For some mysterious reasons, sometimes the directories are duplicated
dnl       in this list - hence uniq. But normally, this shouldn't be needed!
dnl
dnl       Unfortunately, there is a bug in OS/2's tr, such that
dnl       tr ' ' '\n' introduces DOS-like line breaks, whereas tr '\n' ' '
dnl       only removes the Unix-like part of the introduced line break.
SAMPLES_SUBDIRS="`echo $SAMPLES_SUBDIRS | tr -s ' ' | tr ' ' '\n' | sort | uniq | tr '\n' ' '| tr -d '\r'`"

dnl makefile variables
AC_SUBST(LEX_STEM)
AC_SUBST(PATH_IFS)

dnl global options
AC_SUBST(WX_MAJOR_VERSION_NUMBER)
AC_SUBST(WX_MINOR_VERSION_NUMBER)
AC_SUBST(WX_RELEASE_NUMBER)
AC_SUBST(WX_LIBRARY_NAME_STATIC)
AC_SUBST(WX_LIBRARY_NAME_SHARED)
AC_SUBST(WX_LIBRARY_BASENAME)
AC_SUBST(WX_LIBRARY_IMPORTLIB)
AC_SUBST(WX_TARGET_LIBRARY)
AC_SUBST(WX_LIBRARY_LINK1)
AC_SUBST(WX_LIBRARY_LINK2)
AC_SUBST(PROGRAM_EXT)

dnl global gl options
AC_SUBST(WX_LIBRARY_NAME_STATIC_GL)
AC_SUBST(WX_LIBRARY_NAME_SHARED_GL)
AC_SUBST(WX_TARGET_LIBRARY_GL)
AC_SUBST(WX_LIBRARY_LINK1_GL)
AC_SUBST(WX_LIBRARY_LINK2_GL)

dnl are we supposed to create the links?
AC_SUBST(WX_ALL)
AC_SUBST(WX_ALL_INSTALLED)

AC_SUBST(SHARED_LD)
AC_SUBST(PIC_FLAG)
AC_SUBST(CODE_GEN_FLAGS)
AC_SUBST(CODE_GEN_FLAGS_CXX)

AC_SUBST(SONAME_FLAGS)
AC_SUBST(SONAME_FLAGS_GL)
AC_SUBST(WX_TARGET_LIBRARY_SONAME)
AC_SUBST(WX_TARGET_LIBRARY_TYPE)

AC_SUBST(STATIC_FLAG)

dnl debugging options
AC_SUBST(WXDEBUG_DEFINE)

dnl toolkit options
AC_SUBST(USE_GUI)
AC_SUBST(AFMINSTALL)
AC_SUBST(WIN32INSTALL)
AC_SUBST(TOOLKIT)
AC_SUBST(TOOLKIT_DIR)
AC_SUBST(TOOLKIT_VPATH)
AC_SUBST(TOOLCHAIN_NAME)
AC_SUBST(TOOLCHAIN_DEFS)
AC_SUBST(TOOLCHAIN_DLL_DEFS)

dnl wx-config options
AC_SUBST(host_alias)
AC_SUBST(cross_compiling)
AC_SUBST(WXCONFIG_LIBS)
AC_SUBST(WXCONFIG_LIBS_GL)
AC_SUBST(WXCONFIG_LIBS_STATIC)
AC_SUBST(WXCONFIG_LIBS_STATIC_GL)
AC_SUBST(WXCONFIG_INCLUDE)
AC_SUBST(WXCONFIG_RPATH)
AC_SUBST(WX_LARGEFILE_FLAGS)

dnl the list of files to compile/install
AC_SUBST(ALL_OBJECTS)
AC_SUBST(ALL_HEADERS)
AC_SUBST(ALL_SOURCES)

dnl distribution vars
AC_SUBST(GUIDIST)
AC_SUBST(PORT_FILES)
AC_SUBST(DISTDIR)

dnl additional subdirectories where we will build
AC_SUBST(SAMPLES_SUBDIRS)

dnl additional libraries and linker settings
AC_SUBST(LDFLAGS)
AC_SUBST(LDFLAGS_GL)
AC_SUBST(LDFLAGS_VERSIONING)
AC_SUBST(LDFLAGS_EXE)
AC_SUBST(OPENGL_LIBS)
AC_SUBST(DMALLOC_LIBS)
AC_SUBST(EXTRADEFS)
AC_SUBST(WX_VERSION_TAG)

dnl additional resurces settings
AC_SUBST(RESCOMP)
AC_SUBST(RESFLAGS)
AC_SUBST(RESPROGRAMOBJ)
AC_SUBST(WX_RESOURCES_MACOSX_ASCII)
AC_SUBST(WX_RESOURCES_MACOSX_DATA)

dnl additional for Mac OS X
AC_SUBST(DEREZ)
AC_SUBST(MACOSX_BUNDLE)
AC_SUBST(LIBWXMACRES)
AC_SUBST(LIBWXMACRESCOMP)
AC_SUBST(LIBWXMACRESWXCONFIG)

dnl other tools
AC_SUBST(GCC)
AC_SUBST(DLLTOOL)
AC_SUBST(AS)
AC_SUBST(NM)
AC_SUBST(LD)
AC_SUBST(MAKEINFO)
AC_SUBST(INSTALL_LIBRARY)

dnl MAKE_SET will be replaced with "MAKE=..." or nothing if make sets MAKE
dnl itself (this macro is required if SUBDIRS variable is used in Makefile.am
dnl - and we do use it)
AC_PROG_MAKE_SET

dnl move setup.h back if available
if test -f lib/wx/include/${TOOLCHAIN_NAME}/wx/setup.h; then
    mv -f lib/wx/include/${TOOLCHAIN_NAME}/wx/setup.h setup.h
fi

AC_CONFIG_HEADER(setup.h:setup.h.in)

dnl we need to pass SAMPLES_SUBDIRS (and some other) to the configure in
dnl samples and the only way to do it is to use the environment (another
dnl idea could have been to use the cache but this wouldn't work when
dnl configure doesn't use cache at all which is the default with autoconf 2.50)
wx_cv_path_samplesubdirs=$SAMPLES_SUBDIRS
wx_cv_if_gnu_make=$IF_GNU_MAKE
wx_cv_path_ifs=$PATH_IFS
wx_cv_program_ext=$PROGRAM_EXT
wx_cv_target_library=$WX_TARGET_LIBRARY
wx_cv_target_library_gl=$WX_TARGET_LIBRARY_GL
wx_cv_target_libtype=$WX_TARGET_LIBRARY_TYPE
wx_cv_library_basename=${WX_LIBRARY_BASENAME}
wx_cv_release=${WX_RELEASE}
wx_cv_current=${WX_CURRENT}
wx_cv_revision=${WX_REVISION}
wx_cv_age=${WX_AGE}
export wx_cv_path_samplesubdirs wx_cv_if_gnu_make \
       wx_cv_path_ifs wx_cv_program_ext \
       wx_cv_target_library wx_cv_target_library_gl wx_cv_target_libtype \
       wx_cv_library_basename wx_cv_release wx_cv_current wx_cv_revision wx_cv_age


AC_CONFIG_SUBDIRS(demos samples utils contrib)

dnl create each of the files in the space separated list from the file.in
dnl (the original file name may be overriden by appending another name after a
dnl colon)
AC_OUTPUT([
            wx-config
            version-script
            src/make.env
            src/makeprog.env
            src/makelib.env
            Makefile
          ],
          [
            dnl This test is required to make the following idempotent.
            dnl Otherwise running config.status or rerunning configure
            dnl would stomp the wx-config link or try to move it onto
            dnl itself.
            dnl Use -h instead of -L to test for link (GD)
            dnl   -h is documented as obsolete under Mac OS X but works
            dnl   -L is obsolete under Solaris8
            if test ! -h wx-config; then
                chmod +x wx-config
                mv wx-config wx${TOOLCHAIN_NAME}-config
                ${LN_S} wx${TOOLCHAIN_NAME}-config wx-config
            fi

            if test ! -d lib; then
              mkdir lib
            fi
            if test ! -d lib/wx; then
              mkdir lib/wx
            fi
            if test ! -d lib/wx/include; then
              mkdir lib/wx/include
            fi
            if test ! -d lib/wx/include/${TOOLCHAIN_NAME}; then
              mkdir lib/wx/include/${TOOLCHAIN_NAME}
            fi
            if test ! -d lib/wx/include/${TOOLCHAIN_NAME}/wx; then
              mkdir lib/wx/include/${TOOLCHAIN_NAME}/wx
            fi
            if test -f setup.h; then
              mv -f setup.h lib/wx/include/${TOOLCHAIN_NAME}/wx/setup.h
            fi
          ],
          [
            TOOLCHAIN_NAME="${TOOLCHAIN_NAME}"
            LN_S="${LN_S}"
          ]
         )

dnl report on what we decided to do
echo
echo "Configured wxWindows ${WX_VERSION} for \`${host}'"
echo ""
echo "  Which GUI toolkit should wxWindows use?                 ${TOOLKIT:-base only}"

echo "  Should wxWindows be compiled in debug mode?             ${wxUSE_DEBUG:-no}"
echo "  Should wxWindows be linked as a shared library?         ${wxUSE_SHARED:-no}"
echo "  Should wxWindows be compiled in Unicode mode?           ${wxUSE_UNICODE:-no}"

echo "  What level of wxWindows compatibility should be enabled?"
echo "                                       wxWindows 2.0      ${WXWIN_COMPATIBILITY_2:-no}"
echo "                                       wxWindows 2.2      ${WXWIN_COMPATIBILITY_2_2:-yes}"

echo "  Which libraries should wxWindows use?"
echo "                                       jpeg               ${wxUSE_LIBJPEG-none}"
echo "                                       png                ${wxUSE_LIBPNG-none}"
echo "                                       regex              ${wxUSE_REGEX}"
echo "                                       tiff               ${wxUSE_LIBTIFF-none}"
echo "                                       zlib               ${wxUSE_ZLIB}"

echo ""

dnl vi: set et sts=4 sw=4 com=\:dnl:
