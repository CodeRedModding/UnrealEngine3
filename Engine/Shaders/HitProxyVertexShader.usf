/*=============================================================================
	HitProxyVertexShader.hlsl: Vertex shader for rendering hit proxies.
	Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"

struct FHitProxyVSToPS
{
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
#if USE_INSTANCING	
	float4 InstanceHitProxyId : TEXCOORD5;
#endif
	float4 PixelPosition : TEXCOORD6;
	float4 CameraVectorOrVertexColor : TEXCOORD7;
	float4 Position : POSITION;
};

#if USING_SM5_TESSELLATION	
	struct FHitProxyVSToDS
	{
		FVertexFactoryInterpolantsVSToDS FactoryInterpolants;
	#if USE_INSTANCING	
		float4 InstanceHitProxyId : TEXCOORD5;
	#endif
		#if PER_PIXEL_CAMERA_VECTOR
			float4 VertexColor : TEXCOORD7;
		#endif
		float4 Position : VS_To_DS_Position;
		OPTIONAL_VertexID_VS_To_DS
	};
	
	#define FHitProxyVSOutput FHitProxyVSToDS
#else
	#define FHitProxyVSOutput FHitProxyVSToPS
#endif

#if USING_SM5_TESSELLATION

	#define FPassSpecificVSToDS FHitProxyVSToDS
	#define FPassSpecificVSToPS FHitProxyVSToPS
	
	FHitProxyVSToDS PassInterpolate(FHitProxyVSToDS a, float aInterp, FHitProxyVSToDS b, float bInterp)
	{
		FHitProxyVSToDS O;

		O.FactoryInterpolants = VertexFactoryInterpolate(a.FactoryInterpolants, aInterp, b.FactoryInterpolants, bInterp);
		
		#if PER_PIXEL_CAMERA_VECTOR
			TESSELLATION_INTERPOLATE_MEMBER(VertexColor);
		#endif

		#if USE_INSTANCING	
			TESSELLATION_INTERPOLATE_MEMBER(InstanceHitProxyId);
		#endif

		return O;
	}

	FHitProxyVSToPS PassFinalizeTessellationOutput(FHitProxyVSToDS Interpolants, float4 WorldPosition, FMaterialTessellationParameters MaterialParameters)
	{
		FHitProxyVSToPS O;
		
		O.FactoryInterpolants = VertexFactoryAssignInterpolants(Interpolants.FactoryInterpolants);
		
		#if PER_PIXEL_CAMERA_VECTOR
			O.CameraVectorOrVertexColor = MaterialParameters.VertexColor;
		#else
			O.CameraVectorOrVertexColor.xyz = TransformWorldVectorToTangent(MaterialParameters.TangentToWorld,CameraPositionDS.xyz - WorldPosition.xyz * CameraPositionDS.w);
			O.CameraVectorOrVertexColor.w = 1.0f;
		#endif

	#if USE_INSTANCING	
			O.InstanceHitProxyId = Interpolants.InstanceHitProxyId;
	#endif

		// Finally, transform position to clip-space
		ISOLATE
		{
			O.Position = MulMatrix(ViewProjectionMatrixDS,WorldPosition);
			O.Position = ApplyTemporalAAJitter(O.Position);
		}
			
	#if WORLD_POS
		O.PixelPosition = WorldPosition;
	#else
		O.PixelPosition = O.Position;
	#endif
		return O;
	}
	
	#include "Tessellation.usf"
#endif

#if VERTEXSHADER

void Main(
	FVertexFactoryInput Input,
	OPTIONAL_VertexID
	out FHitProxyVSOutput Output
	)
{
	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4	WorldPosition = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float3x3 TangentBasis = VertexFactoryGetTangentBasis(Input, VFIntermediates);

	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPosition.xyz, TangentBasis);
	WorldPosition.xyz += GetMaterialWorldPositionOffset(VertexParameters);

#if USE_INSTANCING
	Output.InstanceHitProxyId = VertexFactoryGetInstanceHitProxyId(Input, VFIntermediates);
#endif

#if USING_SM5_TESSELLATION
	Output.Position = WorldPosition;
	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToDS(Input, VFIntermediates);
	
	#if PER_PIXEL_CAMERA_VECTOR
		Output.VertexColor = VertexFactoryGetVertexColor( Input, VFIntermediates );
	#endif
	
#else

	ISOLATE
	{
		Output.Position = MulMatrix(ViewProjectionMatrix,WorldPosition);
		Output.Position = ApplyTemporalAAJitter(Output.Position);
	}

	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates);
	#if WORLD_POS
		Output.PixelPosition = WorldPosition;
	#else
		Output.PixelPosition = Output.Position;
	#endif

	Output.CameraVectorOrVertexColor = 1;
	#if PER_PIXEL_CAMERA_VECTOR
		Output.CameraVectorOrVertexColor = VertexFactoryGetVertexColor(Input, VFIntermediates);
	#else
		Output.CameraVectorOrVertexColor.xyz = VertexFactoryWorldToTangentSpace(Input,VFIntermediates,TangentBasis,CameraPositionVS.xyz - WorldPosition.xyz * CameraPositionVS.w);
	#endif
	
#endif

	OutputVertexID( Output );
}

#endif // VERTEXSHADER
