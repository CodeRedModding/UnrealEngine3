UNIFORM( vec4, BatchFloat[120] );
ATTRIBUTE( vec4, Position, POSITION );
ATTRIBUTE( vec4, Color, COLOR0 );
ATTRIBUTE( vec2, TexCoords0, TEXCOORD0 );
ATTRIBUTE( float, vbatch, BLENDINDICES0 );
OUT_VARYING_DEFAULT( vec4, fuDFShadowColor, TEXCOORD4 );
OUT_VARYING_DEFAULT( float, fuDFShadowEnable, TEXCOORD2 );
OUT_VARYING_DEFAULT( vec4, fuDFShadowOffset, TEXCOORD5 );
OUT_VARYING_DEFAULT( vec4, fuDFSize, TEXCOORD3 );
OUT_VARYING_DEFAULT( vec2, tc, TEXCOORD0 );
OUT_VARYING_LOW( vec4, vcolor, COLOR0 );
OUT_BUILTIN( vec4, gl_Position, POSITION )
void main() {
// E TextDFA

   vcolor = Color * BatchFloat[int(0.1+8.0*vbatch+2.0)] + BatchFloat[int(0.1+8.0*vbatch+7.0)];
  tc = TexCoords0;
// E position


  gl_Position = Position;
  gl_Position.x = dot(Position, BatchFloat[int(0.1+8.0*vbatch+3.0+(0.0))]);
  gl_Position.y = dot(Position, BatchFloat[int(0.1+8.0*vbatch+3.0+(1.0))]);  
// E 
  fuDFShadowColor = BatchFloat[int(0.1+8.0*vbatch)];
// E 
  fuDFShadowEnable = BatchFloat[int(0.1+8.0*vbatch+5.0)].r;
// E 
  fuDFShadowOffset = BatchFloat[int(0.1+8.0*vbatch+6.0)];
// E 
  fuDFSize = BatchFloat[int(0.1+8.0*vbatch+1.0)];

}

