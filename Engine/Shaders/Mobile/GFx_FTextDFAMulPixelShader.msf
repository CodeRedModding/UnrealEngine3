#define RETURN_COLOR(Color) Color
UNIFORM( vec4, scolor );
UNIFORM( float, DFShadowEnable );
UNIFORM( vec2, DecalOffset );
UNIFORM( vec4, DFSize );
#if USE_GFX_GAMMA_CORRECTION
UNIFORM( float, InverseGamma );
#endif
UNIFORM_SAMPLER2D( tex, TEXUNIT0 );
IN_VARYING_DEFAULT( vec2, tc, TEXCOORD0 );
IN_VARYING_LOW( vec4, vcolor, COLOR0 );
OUT_BUILTIN( vec4, gl_FragColor, COLOR )
PIXEL_MAIN 
{
// E TextDFA

	float BaseDist = texture2D(tex,tc).r;
	float DFWidth = DUDX(tc.x, DFSize.w * , 0.1);
	float DFShadowWidth = DFSize.x * 0.5;

	gl_FragColor = vec4(vcolor.rgb, smoothstep(0.5 - DFWidth, 0.5 + DFWidth, BaseDist));

	if (DFShadowEnable >= 1.0)
	{
		float ShadowDist = texture2D(tex,tc + DecalOffset.xy).r;
		vec4 Shadow = vec4(scolor.rgb, scolor.a * smoothstep(0.5 - DFShadowWidth, 0.5 + DFShadowWidth, ShadowDist));
		gl_FragColor = mix(Shadow, gl_FragColor, gl_FragColor.a);
	}

	gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);// E Mul
  //gl_FragColor = mix(vec4(1.0), gl_FragColor, vec4(gl_FragColor.a));
// E gamma
  ////gl_FragColor = RETURN_COLOR (vec4(pow(clamp(gl_FragColor.rgb,0.0,1.0), vec3(InverseGamma)),gl_FragColor.a));
gl_FragColor = RETURN_COLOR (gl_FragColor);

}

