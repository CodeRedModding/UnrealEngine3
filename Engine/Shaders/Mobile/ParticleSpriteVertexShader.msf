/**
 * Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
 */

OUT_BUILTIN(vec4, gl_Position, POSITION)


////////////////////////
// Conditions
////////////////////////

#define NEED_INTERMEDIATE_WORLD_POSITION 0
#define NEED_MASK_TEXTURE 0
#define NEED_PIXEL_WORLD_POSITION 0
#define NEED_VERTEX_COLOR 0


#if (ALPHA_VALUE_SOURCE >= ALPHA_VALUE_SOURCE_MASK_RED) && (ALPHA_VALUE_SOURCE <= ALPHA_VALUE_SOURCE_MASK_BLUE)
	#undef NEED_MASK_TEXTURE
	#define NEED_MASK_TEXTURE 1
#endif

#if USE_EMISSIVE
	#if (EMISSIVE_MASK_SOURCE >= EMISSIVE_MASK_SOURCE_MASK_TEXTURE_RED) && (EMISSIVE_MASK_SOURCE <= EMISSIVE_MASK_SOURCE_MASK_TEXTURE_ALPHA)
		#undef NEED_MASK_TEXTURE
		#define NEED_MASK_TEXTURE 1
	#endif
#endif

#if USE_GRADIENT_FOG
	#undef NEED_INTERMEDIATE_WORLD_POSITION
	#define NEED_INTERMEDIATE_WORLD_POSITION 1
#endif

#if USE_HEIGHT_FOG
	#undef NEED_PIXEL_WORLD_POSITION
	#define NEED_PIXEL_WORLD_POSITION 1
#endif

#if USE_UNIFORM_COLOR_MULTIPLY
	#if (COLOR_MULTIPLY_SOURCE >= COLOR_MULTIPLY_SOURCE_MASK_TEXTURE_RED)&& (COLOR_MULTIPLY_SOURCE <= COLOR_MULTIPLY_SOURCE_MASK_TEXTURE_ALPHA)
		#undef NEED_MASK_TEXTURE
		#define NEED_MASK_TEXTURE 1
	#endif
#endif


////////////////////////
// Variables
////////////////////////

UNIFORM(mat4, LocalToWorld);
UNIFORM(mat4, ViewProjection);
UNIFORM(vec4, CameraRight);
UNIFORM(vec4, CameraUp);
UNIFORM(float, AxisRotationVectorSourceIndex);
UNIFORM(vec4, AxisRotationVectors[2]);
UNIFORM(vec3, ParticleUpRightResultScalars);
UNIFORM(vec4, FadeColorAndAmount);

ATTRIBUTE(vec4, Position, POSITION);
ATTRIBUTE(vec4, OldPosition, NORMAL);
ATTRIBUTE(vec3, Size, TANGENT);
ATTRIBUTE(vec2, Rotation_Sizer, BLENDWEIGHT);

#if SUBUV_PARTICLES
	ATTRIBUTE(vec4, TexCoords0, TEXCOORD0);
#else
	ATTRIBUTE(vec2, TexCoords0, TEXCOORD0);
#endif

ATTRIBUTE(vec4, ParticleColor, TEXCOORD1);

#if SUBUV_PARTICLES
	ATTRIBUTE(vec4, Interp_Sizer, TEXCOORD2);
#endif

OUT_VARYING_DEFAULT( vec4, Interp_TexCoord, TEXCOORD0 );
OUT_VARYING_MEDIUM( vec4, Interp_Color, COLOR0 );
OUT_VARYING_LOW( vec4, GlobalEffectColorAndAmount, COLOR1 );

#if SUBUV_PARTICLES
	OUT_VARYING_LOW( float, Interp_BlendAlpha, TEXCOORD1 );
#endif

#if NEED_MASK_TEXTURE
    OUT_VARYING_HIGH( vec2, UVMask, TEXCOORD6 );
#endif

#if USE_GRADIENT_FOG
	UNIFORM(float, FogOneOverSquaredRange);
	UNIFORM(float, FogStartSquared);
	UNIFORM(vec4, FogColor;) 
#endif
	
#if NEED_PIXEL_WORLD_POSITION
    OUT_VARYING_MEDIUM( vec3, VarWorldPosition, TODO );
#endif

#if USE_UNIFORM_COLOR_MULTIPLY
	UNIFORM(vec4, UniformMultiplyColor);
	OUT_VARYING_LOW( vec4, ColorMultiply, TEXCOORD5 );
#endif


////////////////////////
// Implementation
////////////////////////

vec3 SafeNormalize(vec3 V)
{
	return V / sqrt(max(dot(V, V), 0.01));
}


void main( )
{
    #if NEED_VERTEX_COLOR
        // Swap vertex color Red and Blue channel (reversed due to platform-specific byte order)
        vec4 VertexColorRGBA = VertexColor.bgra;
    #endif

	// Screen alignment
	vec4 Pos = MulMatrix(LocalToWorld, Position);
	vec4 OldPos = MulMatrix(LocalToWorld, OldPosition);

	vec4 Right_Final;
	vec4 Up_Final;

	#if PARTICLE_SCREEN_ALIGNMENT == PARTICLESCREENALIGN_CAMERAFACING
		Right_Final = (-1.0 * cos(Rotation_Sizer.x) * CameraUp) + (sin(Rotation_Sizer.x) * CameraRight);
		Up_Final = (sin(Rotation_Sizer.x) * CameraUp) + (cos(Rotation_Sizer.x) * CameraRight);
	#else
		vec3 CameraDirection = SafeNormalize(CameraWorldPosition - Pos.xyz);

		#if PARTICLE_SCREEN_ALIGNMENT == PARTICLESCREENALIGN_VELOCITY
			vec3 ParticleDirection = SafeNormalize(Pos.xyz - OldPos.xyz);
			Right_Final = vec4(SafeNormalize(cross(CameraDirection, ParticleDirection)), 0.0);
			Up_Final = vec4(-ParticleDirection, 0.0);

		#else //if PARTICLE_SCREEN_ALIGNMENT == PARTICLESCREENALIGN_LOCKEDAXIS
			int ARVIndex = int(AxisRotationVectorSourceIndex);
			vec4 AxisSource = AxisRotationVectors[ARVIndex];
		
			vec4 Axis_Calculation = vec4(SafeNormalize(cross(CameraDirection, AxisSource.xyz)), 0.0) * AxisSource.w;
		
			Right_Final = (Axis_Calculation * AxisRotationVectorSourceIndex) + (AxisSource * (1.0 - AxisRotationVectorSourceIndex));
			Up_Final = Axis_Calculation * (1.0 - AxisRotationVectorSourceIndex) + (AxisSource * AxisRotationVectorSourceIndex);
			Right_Final.w = 0.0;
			Up_Final.w = 0.0;
		#endif
	#endif

	// the following code avoids vec2 (not supported on NGP), int conversion (not supported on ANDROID) and array access (creates wasteful temporaries)
	{
		// Rotation_Sizer.y -> LocalCornerXY
		// 0 -> -0.5 -0.5
		// 1 -> -0.5  0.5 
		// 2 ->  0.5  0.5
		// 3 ->  0.5 -0.5
		float LocalCornerX = Rotation_Sizer.y > 1.5 ? 0.5 : -0.5;
		float LocalCornerY = 1.0 - abs(Rotation_Sizer.y - 1.5);

		Pos = Pos + (Size.x * LocalCornerX) * Right_Final + (Size.y * LocalCornerY) * Up_Final;
	}

	// Calculate position
	#if NEED_PIXEL_WORLD_POSITION
		VarWorldPosition = Pos.xyz;
	#endif

	gl_Position = MulMatrix( ViewProjection, Pos );

	// Texture coordinates
	#if SUBUV_PARTICLES
		Interp_TexCoord.xy = BASE_TEX_COORD_XFORM(TexCoords0.xy);
		Interp_TexCoord.zw = BASE_TEX_COORD_XFORM(TexCoords0.zw);
	#else
		Interp_TexCoord.xy = TexCoords0.xy;

		#if USE_BASE_TEX_COORD_XFORM || USE_NORMAL_TEX_COORD_XFORM || USE_EMISSIVE_TEX_COORD_XFORM
	        Interp_TexCoord.zw = XFORM_TEX_COORD(TexCoords0.xy);
		#else
			Interp_TexCoord.zw = TexCoords0.xy;
		#endif
	#endif

	// Calculate color
	Interp_Color = ParticleColor;

	#if USE_PREMULTIPLIED_OPACITY
		Interp_Color.rgb *= Interp_Color.a;
	#endif

	#if SUBUV_PARTICLES
		Interp_BlendAlpha = Interp_Sizer.x;
	#endif

	// Color multiply
	#if USE_UNIFORM_COLOR_MULTIPLY
		ColorMultiply = UniformMultiplyColor;

		#if USE_PREMULTIPLIED_OPACITY
			ColorMultiply.rgb *= UniformMultiplyColor.a;
			ColorMultiply.w = 1.0;
		#endif
	#endif
	
	// Texture masking
	#if NEED_MASK_TEXTURE
        vec2 MaskTexCoords;

        MaskTexCoords = TexCoords0.xy;

        // Store the mask offset UVs.  Note that we do not transform these UVs.
        UVMask = MASK_TEX_COORD_XFORM(MaskTexCoords);
	#endif

	// Fog
    #if !USE_HEIGHT_FOG && USE_GRADIENT_FOG
        // Compute the fog factor (a lerped value between 0 and 1) for each vertex

        // We determine the fog factor by getting the vertex distance and then interpolating
        // that between the start and end ranges for fog.
        float VertDistSquared = dot(Pos.xyz, Pos.xyz);
        float FogColorAmount = FogColor.w * clamp( ( VertDistSquared - FogStartSquared ) * FogOneOverSquaredRange, 0.0, 1.0);

        // Finally, fold in the fade color here to avoid the additional mix in the pixel shader
        GlobalEffectColorAndAmount.xyz = mix(FogColor.xyz * FogColorAmount, FadeColorAndAmount.xyz, FadeColorAndAmount.w);
        GlobalEffectColorAndAmount.w = 1.0 - (FogColorAmount + FadeColorAndAmount.w - (FogColorAmount * FadeColorAndAmount.w));
    #else
        // If we're not in the gadient fog case, the fade color and any potentially fully saturated fog color have
        // already been folded into the FadeColorAndAmount uniform, so pre-multiply and pass that through 
        GlobalEffectColorAndAmount.xyz = FadeColorAndAmount.xyz * FadeColorAndAmount.w;
        GlobalEffectColorAndAmount.w = 1.0 - FadeColorAndAmount.w;
    #endif
}
