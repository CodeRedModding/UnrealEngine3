/*=============================================================================
	LandscapeVertexFactoryMobilePreview.usf: PC PC implementation of mobile landscape shader, for the mobile emu.
	Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

#include "DecalFactoryCommon.usf"

// In SM5, Vertex color can coexist with TANGENTTOWORLD0 and TANGENTTOWORLD2
// Other platforms don't have enough interpolators
#define ALLOW_VERTEX_COLOR (!WORLD_COORDS || SM5_PROFILE)

float4x4 PreviousLocalToWorld;
float LocalToWorldRotDeterminantFlip;
float3x3 WorldToLocal;
float4 LightmapCoordinateScaleBias;
float4 ShadowmapCoordinateScaleBias;


// Landscape-specific uniforms
float4 LightmapScaleBias;
float4 LayerUVScaleBias;
float4 LodValues;
float4 LodDistancesValues;

struct FVertexFactoryInput
{
	float4	Position	: POSITION;
	float4	NextMipPosition	: TANGENT;
	half4	TangentZ	: NORMAL;
	half4	Color		: COLOR1;

#if NEEDS_VERTEX_LIGHTMAP
	float4 LightMapA : TEXCOORD5;
	float4 LightMapB : TEXCOORD6;
#elif NEEDS_SIMPLE_VERTEX_LIGHTMAP
	float4 LightMapA : TEXCOORD5;
#endif

};

struct FPositionOnlyVertexFactoryInput
{
	float4	Position	: POSITION;
	float4	NextMipPosition	: TANGENT;
};

struct FVertexFactoryInterpolantsVSToPS
{
#if WORLD_COORDS
	TANGENTTOWORLD_INTERPOLATOR_BLOCK
#endif

#if ALLOW_VERTEX_COLOR
	// NOTE: When USE_INSTANCING is 1, the Color.a interpolant is filled with the per-instance fade factor instead of VertexColor alpha
	float4	Color : COLOR0;
#endif

#if NEEDS_LIGHTMAP_COORDINATE
	float2	LightMapCoordinate					: TEXCOORD0;
#if NUM_MATERIAL_TEXCOORDS
	float4	TexCoords[(NUM_MATERIAL_TEXCOORDS+1)/2]	: TEXCOORD1;
#endif
#else
#if NUM_MATERIAL_TEXCOORDS
	float4	TexCoords[(NUM_MATERIAL_TEXCOORDS+1)/2]	: TEXCOORD0;
#endif
#endif

#if !COMPILER_SUPPORTS_EMPTY_STRUCTS && !WORLD_COORDS && !NEEDS_LIGHTMAP_COORDINATE && !NUM_MATERIAL_TEXCOORDS
	float4 Dummy : TEXCOORD0;
#endif
};

struct FVertexFactoryInterpolantsVSToDS
{
	FVertexFactoryInterpolantsVSToPS InterpolantsVSToPS;
	
	// If the PS does not call for world coords, provide our own for use in the DS
#if !WORLD_COORDS
	// First row of the tangent to world matrix
	float3	TangentToWorld0	: VS_To_DS_TangentToWorld0;
	// Last row of the tangent to world matrix in xyz
	float4	TangentToWorld2	: VS_To_DS_TangentToWorld2;
#endif
};

#if USING_SM5_TESSELLATION
float2 VertexFactoryGetTextureCoordinateDS( FVertexFactoryInterpolantsVSToDS Interpolants )
{
#if NUM_MATERIAL_TEXCOORDS
	return Interpolants.InterpolantsVSToPS.TexCoords[0].xy;
#else // #if NUM_MATERIAL_TEXCOORDS
	return float2(0,0);
#endif // #if NUM_MATERIAL_TEXCOORDS
}

float4 VertexFactoryGetWorldNormalDS( FVertexFactoryInterpolantsVSToDS Interpolants )
{
#if WORLD_COORDS
	return Interpolants.InterpolantsVSToPS.TangentToWorld2;
#else
	return Interpolants.TangentToWorld2;
#endif
}

float3 VertexFactoryGetWorldTangentDS( FVertexFactoryInterpolantsVSToDS Interpolants )
{
#if WORLD_COORDS
	return Interpolants.InterpolantsVSToPS.TangentToWorld0;
#else
	return Interpolants.TangentToWorld0;
#endif
}
#endif // #if USING_SM5_TESSELLATION

FVertexFactoryInterpolantsVSToPS VertexFactoryAssignInterpolants(FVertexFactoryInterpolantsVSToDS Input)
{
	return Input.InterpolantsVSToPS;
}

struct FVertexFactoryIntermediates
{
	float4	Position;
	half3	TangentX;
	// TangentZ.w contains sign of tangent basis determinant
	half4	TangentZ;
	half4   Color;

#if NUM_MATERIAL_TEXCOORDS && !(DECAL_FACTORY && MATERIAL_DECAL)
	float2	TexCoords[NUM_MATERIAL_TEXCOORDS];
#endif

#if NEEDS_LIGHTMAP_COORDINATE
	float2	LightMapCoordinate;
#endif
};

/** Converts from vertex factory specific interpolants to a FMaterialTessellationParameters, which is used by material inputs. */
FMaterialTessellationParameters GetMaterialTessellationParameters(FVertexFactoryInterpolantsVSToDS Interpolants, float3 CameraLocalWorldPosition)
{
	FMaterialTessellationParameters	Result;
#if NUM_MATERIAL_TEXCOORDS
	UNROLL
	for(int CoordinateIndex = 0;CoordinateIndex < NUM_MATERIAL_TEXCOORDS;CoordinateIndex += 2)
	{
		Result.TexCoords[CoordinateIndex] = Interpolants.InterpolantsVSToPS.TexCoords[CoordinateIndex/2].xy;
		if(CoordinateIndex + 1 < NUM_MATERIAL_TEXCOORDS)
		{
			Result.TexCoords[CoordinateIndex + 1] = Interpolants.InterpolantsVSToPS.TexCoords[CoordinateIndex/2].wz;
		}
	}
#endif

#if !WORLD_COORDS
	half3 TangentToWorld0 = UnpackColor3( Interpolants.TangentToWorld0.xyz );
	half4 TangentToWorld2 = UnpackColor4( Interpolants.TangentToWorld2 );
#else
	half3 TangentToWorld0 = UnpackColor3( Interpolants.InterpolantsVSToPS.TangentToWorld0.xyz );
	half4 TangentToWorld2 = UnpackColor4( Interpolants.InterpolantsVSToPS.TangentToWorld2 );
#endif

#if ALLOW_VERTEX_COLOR
	Result.VertexColor = Interpolants.InterpolantsVSToPS.Color;
#else
	Result.VertexColor = 1;	
#endif

	Result.TangentToWorldPreScale = 1;

	// $ These get set with a call to CalcMaterialTessellationParameters() utility in the material later on if necessary
	Result.TangentReflectionVector = 0;

#if DECAL_FACTORY
	Result.TangentToWorld = CalcInvTangentBasisDecal( TangentToWorld0 );
#else
	Result.TangentToWorld = CalcTangentToWorld( TangentToWorld0, TangentToWorld2 );
#endif

	Result.WorldPosition = CameraLocalWorldPosition + CameraWorldPos.xyz;

#if DOMAINSHADER
	Result.TangentCameraVector = TransformWorldVectorToTangent(Result.TangentToWorld,CameraPositionDS.xyz - CameraLocalWorldPosition.xyz * CameraPositionDS.w);
#endif // #if DOMAINSHADER

	return Result;
}

/** Converts from vertex factory specific interpolants to a FMaterialPixelParameters, which is used by material inputs. */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	FMaterialPixelParameters	Result;
#if NUM_MATERIAL_TEXCOORDS
	UNROLL
	for(int CoordinateIndex = 0;CoordinateIndex < NUM_MATERIAL_TEXCOORDS;CoordinateIndex += 2)
	{
		Result.TexCoords[CoordinateIndex] = Interpolants.TexCoords[CoordinateIndex/2].xy;
		UNROLL
		for(uint SampleIndex = 0;SampleIndex < NUM_TEXCOORD_SAMPLES;++SampleIndex)
		{
			Result.SampleTexCoords[SampleIndex][CoordinateIndex] = EvaluateAttributeAtSample(Interpolants.TexCoords[CoordinateIndex/2].xy,SampleIndex);
		}
		if(CoordinateIndex + 1 < NUM_MATERIAL_TEXCOORDS)
		{
			Result.TexCoords[CoordinateIndex + 1] = Interpolants.TexCoords[CoordinateIndex/2].wz;
			UNROLL
			for(uint SampleIndex = 0;SampleIndex < NUM_TEXCOORD_SAMPLES;++SampleIndex)
			{
				Result.SampleTexCoords[SampleIndex][CoordinateIndex + 1] = EvaluateAttributeAtSample(Interpolants.TexCoords[CoordinateIndex/2].wz,SampleIndex);
			}
		}
	}
#endif
#if WORLD_COORDS
	half3 TangentToWorld0 = UnpackColor3( Interpolants.TangentToWorld0.xyz );
	half4 TangentToWorld2 = UnpackColor4( Interpolants.TangentToWorld2 );
	Result.UnMirrored = TangentToWorld2.w;
#endif

#if ALLOW_VERTEX_COLOR
	// NOTE: When USE_INSTANCING is 1, the Color.a interpolant is filled with the per-instance fade factor instead of VertexColor alpha
	Result.VertexColor = Interpolants.Color;
#else
	Result.VertexColor = 1;
#endif

	Result.TangentNormal = 0;
	Result.TangentCameraVector = 0;
	Result.TangentReflectionVector = 0;
	Result.ScreenPosition = 0;
	Result.TangentLightVector = 0;
#if WORLD_COORDS	
	#if DECAL_FACTORY
		Result.TangentToWorld = CalcInvTangentBasisDecal( TangentToWorld0 );
	#else
		Result.TangentToWorld = CalcTangentToWorld( TangentToWorld0, TangentToWorld2 );
	#endif
#endif
#if MATERIAL_DECAL
	#if DECAL_FACTORY && NUM_MATERIAL_TEXCOORDS > 1
		Result.DecalAttenuation = Interpolants.TexCoords[0].z;
		Result.DecalPlaneDistance = Interpolants.TexCoords[0].w;
	#else
		Result.DecalAttenuation = 1;
		Result.DecalPlaneDistance = 0;
	#endif
#endif

#if LIGHTMAP_UV_ACCESS
#if NEEDS_LIGHTMAP_COORDINATE	//TEXTURE_LIGHTMAP || SIMPLE_TEXTURE_LIGHTMAP
	Result.LightmapUVs = Interpolants.LightMapCoordinate.xy;
#else
	Result.LightmapUVs = float2(0, 0);
#endif
#endif

	Result.TwoSidedSign = 1;
	return Result;
}

// When we're using instancing on Xbox, the vertex attributes are in the FVertexFactoryIntermediates, rather than the VertexFactoryInput struct.
#define VertexAttributes	Intermediates


float4 VertexFactoryGetVertexColor(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4 Color = VertexAttributes.Color FCOLOR_COMPONENT_SWIZZLE;
	return Color;
}

/** Converts from vertex factory specific input to a FMaterialVertexParameters, which is used by vertex shader material inputs. */
FMaterialVertexParameters GetMaterialVertexParameters( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentBasis )
{
	FMaterialVertexParameters Result;
	Result.WorldPosition = WorldPosition - PreViewTranslation.xyz;
	Result.VertexColor = VertexFactoryGetVertexColor(Input, Intermediates);

	float3x3 TangentToLocal = transpose(TangentBasis);

	#if ROW_MAJOR
		// does not handle instancing!
		float3x3 TangentToWorld = mul((float3x3)LocalToWorld, TangentToLocal); 
	#else
		float3x3 TangentToWorld = mul(transpose((float3x3)LocalToWorld), TangentToLocal); 
	#endif

	Result.TangentToWorld = TangentToWorld;

#if NUM_MATERIAL_TEXCOORDS && !(DECAL_FACTORY && MATERIAL_DECAL)
	for(int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS; CoordinateIndex++)
	{
		// TexCoords for the vertex shader instanced meshes on XBox360 are not implemented.
		Result.TexCoords[CoordinateIndex] = 0.0f;
	}
#endif
	return Result;
}

#if NEEDS_LIGHTMAP_COORDINATE
float2 GetLightMapCoordinate(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.LightMapCoordinate.xy;
}

#if NEEDS_SHADOWMAP_COORDINATE
float2 GetShadowMapCoordinate(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.LightMapCoordinate.xy * ShadowmapCoordinateScaleBias.xy + ShadowmapCoordinateScaleBias.zw;
}
#endif
#endif

#if NEEDS_VERTEX_LIGHTMAP
void VertexFactoryGetVertexLightMap(FVertexFactoryInput Input,out float4 LightMapA,out float4 LightMapB)
{
	LightMapA = Input.LightMapA;
	LightMapB = Input.LightMapB;
}
#elif NEEDS_SIMPLE_VERTEX_LIGHTMAP
void VertexFactoryGetSimpleVertexLightMap(FVertexFactoryInput Input,out float4 LightMapA)
{
	LightMapA = Input.LightMapA;
}
#endif

float4 CalcWorldPosition(float4 Position)
{
	return MulMatrix(LocalToWorld,Position);
}

float4 DecodeInputPosition(float4 InputPosition, float4 NextMipPosition)
{
	float4 InputPositionLod0 = float4( InputPosition.xy * LodValues.x, ((InputPosition.z + 256.0 * InputPosition.w) - 32768.0) * (1.0/128.0), 1.0 );
	float4 InputPositionLod1 = float4( NextMipPosition.xy * LodValues.y, ((NextMipPosition.z + 256.0 * NextMipPosition.w) - 32768.0) * (1.0/128.0), 1.0 );

	// calculate amount of morphing based on LOD.
	float LodDistance = length(LodDistancesValues.xy - InputPositionLod0.xy);
	float MorphAlpha = clamp( (LodDistance - LodDistancesValues.z) * LodDistancesValues.w, 0.0, 1.0 );

	return lerp( InputPositionLod0, InputPositionLod1, MorphAlpha * LodValues.z );
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;

	Intermediates.Position = DecodeInputPosition(Input.Position, Input.NextMipPosition);
	Intermediates.Color = Input.Color;
	Intermediates.TangentZ = Input.TangentZ;
	Intermediates.TangentX = normalize( float3(Input.TangentZ.z, 0, -Input.TangentZ.x) );
	#if NEEDS_LIGHTMAP_COORDINATE
		Intermediates.LightMapCoordinate = Intermediates.Position.xy * LightmapScaleBias.xy + LightmapScaleBias.zw;
	#endif

	#if !(DECAL_FACTORY && MATERIAL_DECAL) && NUM_MATERIAL_TEXCOORDS > 0
		Intermediates.TexCoords[0] = Intermediates.Position.xy + LayerUVScaleBias.xy;
	#endif
	#if !(DECAL_FACTORY && MATERIAL_DECAL) && NUM_MATERIAL_TEXCOORDS > 1
		Intermediates.TexCoords[1] = Intermediates.Position.xy * LayerUVScaleBias.zw;
	#endif
	#if !(DECAL_FACTORY && MATERIAL_DECAL) && NUM_MATERIAL_TEXCOORDS > 2
		Intermediates.TexCoords[2] = Intermediates.Position.xy + LayerUVScaleBias.xy;
	#endif

	#if NUM_MATERIAL_TEXCOORDS > 3 && !(DECAL_FACTORY && MATERIAL_DECAL)
		for(int CoordinateIndex = 3; CoordinateIndex < NUM_MATERIAL_TEXCOORDS; CoordinateIndex++)
		{
			Intermediates.TexCoords[CoordinateIndex] = float2(0.0,0.0);
		}
	#endif

	return Intermediates;
}

/**
* Get the 3x3 tangent basis vectors for this vertex factory
* this vertex factory will calculate the binormal on-the-fly
*
* @param Input - vertex input stream structure
* @return 3x3 matrix
*/
float3x3 VertexFactoryGetTangentBasis( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	float3x3 Result=0;	
	float4 TangentZ = TangentBias(VertexAttributes.TangentZ);

#if DECAL_FACTORY	
	Result = ProjectDecalTangents(float3(TangentZ.x,TangentZ.y,TangentZ.z));
#else	

	// pass-thru the tangent
	Result[0] = TangentBias(VertexAttributes.TangentX);
	// pass-thru the normal
	Result[2] = float3(TangentZ.x,TangentZ.y,TangentZ.z);	
	
	// derive the binormal by getting the cross product of the normal and tangent
	Result[1] = cross(Result[2], Result[0]) * TangentZ.w;	
	// Recalculate TangentX off of the other two vectors
	// This corrects quantization error since TangentX was passed in as a quantized vertex input
	// The error shows up most in specular off of a mesh with a smoothed UV seam (normal is smooth, but tangents vary across the seam)
	Result[0] = cross(Result[1], Result[2]) * TangentZ.w;
#endif

	return Result;
}

float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return CalcWorldPosition(Intermediates.Position);
}

void CalcTangentToWorld(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, out float3 TangentToWorld0, out float4 TangentToWorld2)
{
	float3x3 LocalToTangent = VertexFactoryGetTangentBasis(Input, Intermediates);
	// The inverse of LocalToTangent is just the transpose because it is an orthonormal basis
	float3x3 TangentToLocal = transpose(LocalToTangent);

	#if ROW_MAJOR
		float3x3 TangentToWorld = mul((float3x3)LocalToWorld, TangentToLocal); 
	#else
		float3x3 TangentToWorld = mul(transpose((float3x3)LocalToWorld), TangentToLocal); 
	#endif

	TangentToWorld0 = TangentToWorld[0];
	TangentToWorld2 = float4(TangentToWorld[2], TangentBias(VertexAttributes.TangentZ.w) * LocalToWorldRotDeterminantFlip);

	TangentToWorld0 = PackColor3( TangentToWorld0 );
	TangentToWorld2 = PackColor4( TangentToWorld2 );
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;
#if NUM_MATERIAL_TEXCOORDS
	// Ensure the unused components of the last packed texture coordinate are initialized.
	Interpolants.TexCoords[(NUM_MATERIAL_TEXCOORDS + 1) / 2 - 1] = 0;

#if MATERIAL_DECAL
	#if DECAL_FACTORY
		// first uv pair are the projected decal coords
		Interpolants.TexCoords[0].xy = ComputeDecalTexCoord(VertexAttributes.Position);
		// next uv pair stores: z=decal attenutation w=distance of vertex to decal origin
		Interpolants.TexCoords[0].z = CalcDecalAttenuation(TangentBias(Input.TangentZ).xyz);
		Interpolants.TexCoords[0].w = CalcDistanceToDecalOrigin(VertexAttributes.Position.xyz);
	#else
		Interpolants.TexCoords[0].xy = VertexAttributes.TexCoords[0];
	#endif
#else
	UNROLL
	for(int CoordinateIndex = 0;CoordinateIndex < NUM_MATERIAL_TEXCOORDS;CoordinateIndex += 2)
	{
		Interpolants.TexCoords[CoordinateIndex / 2].xy = VertexAttributes.TexCoords[CoordinateIndex];
		if(CoordinateIndex + 1 < NUM_MATERIAL_TEXCOORDS)
		{
			Interpolants.TexCoords[CoordinateIndex / 2].wz = VertexAttributes.TexCoords[CoordinateIndex + 1];
		}
	}
#endif
#endif

#if NEEDS_LIGHTMAP_COORDINATE
	Interpolants.LightMapCoordinate.xy = VertexAttributes.LightMapCoordinate * LightmapCoordinateScaleBias.xy + LightmapCoordinateScaleBias.wz;
#endif

#if WORLD_COORDS
	CalcTangentToWorld(Input, Intermediates, Interpolants.TangentToWorld0.xyz, Interpolants.TangentToWorld2);
#endif

#if ALLOW_VERTEX_COLOR
	Interpolants.Color = VertexFactoryGetVertexColor(Input, Intermediates);
#endif

	#if !COMPILER_SUPPORTS_EMPTY_STRUCTS && !WORLD_COORDS && !NEEDS_LIGHTMAP_COORDINATE && !NUM_MATERIAL_TEXCOORDS
		Interpolants.Dummy = float4(0,0,0,0);
	#endif

	return Interpolants;
}

FVertexFactoryInterpolantsVSToDS VertexFactoryGetInterpolantsVSToDS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	FVertexFactoryInterpolantsVSToDS Interpolants;
	
	Interpolants.InterpolantsVSToPS = VertexFactoryGetInterpolantsVSToPS(Input, Intermediates);
	
#if !WORLD_COORDS
	// If the PS does not call for world coords, provide our own for use in the DS
	CalcTangentToWorld(Input, Intermediates, Interpolants.TangentToWorld0, Interpolants.TangentToWorld2);
#endif
	
	return Interpolants;
}

/** for depth-only pass */
float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	return CalcWorldPosition(DecodeInputPosition(Input.Position, Input.NextMipPosition));
}

float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return MulMatrix(PreviousLocalToWorld,Intermediates.Position);
}

/**
* Transform a vector from world space to tangent space
*
* @param Input - vertex input stream structure
* @param TangentBasis - 3x3 matrix to transform to tangent space
* @param WorldVector - vector in world space to transform 
* @return vector in tangent space
*/
float3 VertexFactoryWorldToTangentSpace( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3x3 TangentBasis, float3 WorldVector )
{
	// we use a straight mul here because we are generating the matrix, so we don't worry about column major vs row major (which is what MulMatrix manages per-platform)
	return mul(TangentBasis, MulMatrix(WorldToLocal,WorldVector));
}

half3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	half4 Normal = TangentBias(VertexAttributes.TangentZ);
	Normal.w = 0;
	half4 WorldNormal = MulMatrix( LocalToWorld, Normal );
	return WorldNormal.xyz;
}

float3x3 VertexFactoryGetTangentBasis(FVertexFactoryInterpolantsVSToDS Interpolants)
{
	// This duplicates stuff already going on in GetMaterialTessellationParameters(), so
	// maybe the hull shader could leverage that instead?
#if !WORLD_COORDS
	half3 TangentToWorld0 = UnpackColor3( Interpolants.TangentToWorld0.xyz );
	half4 TangentToWorld2 = UnpackColor4( Interpolants.TangentToWorld2 );
#else
	half3 TangentToWorld0 = UnpackColor3( Interpolants.InterpolantsVSToPS.TangentToWorld0.xyz );
	half4 TangentToWorld2 = UnpackColor4( Interpolants.InterpolantsVSToPS.TangentToWorld2 );
#endif

#if DECAL_FACTORY
	float3x3 TangentToWorld = CalcInvTangentBasisDecal( TangentToWorld0 );
#else
	float3x3 TangentToWorld = CalcTangentToWorld( TangentToWorld0, TangentToWorld2 );
#endif

	return TangentToWorld;
}

float4 VertexFactoryGetWorldNormal(float3x3 TangentToWorld)
{
	return float4(mul(TangentToWorld, float3(0,0,1)), 0);
}

float4 VertexFactoryGetWorldNormal(FVertexFactoryInterpolantsVSToDS Interpolants)
{
	float3x3 TangentToWorld = VertexFactoryGetTangentBasis(Interpolants);
	return VertexFactoryGetWorldNormal(TangentToWorld);
}
