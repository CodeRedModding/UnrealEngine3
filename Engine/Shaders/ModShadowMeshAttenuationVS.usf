/*=============================================================================
	ModShadowMeshAttenuationVS.usf: Mesh attenutation VS for modulated shadows
	Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"

float4 LightPosition;

struct FModShadowMeshAttenuationVSToPS
{
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
	float3 TangentLightVector : TEXCOORD4;
	float4 CameraVectorOrVertexColor : TEXCOORD5;
	float4 PixelPosition : TEXCOORD6;
	float4 Position : POSITION;
};

#if USING_SM5_TESSELLATION	
	struct FModShadowMeshAttenuationVSToDS
	{
		FVertexFactoryInterpolantsVSToDS FactoryInterpolants;
		
		#if PER_PIXEL_CAMERA_VECTOR
			float4 VertexColor : TEXCOORD6;
		#endif

		float4 Position : VS_To_DS_Position;
	};
	
	#define FModShadowMeshAttenuationVSOutput FModShadowMeshAttenuationVSToDS
#else
	#define FModShadowMeshAttenuationVSOutput FModShadowMeshAttenuationVSToPS
#endif

#if USING_SM5_TESSELLATION	
	#define FPassSpecificVSToDS FModShadowMeshAttenuationVSToDS
	#define FPassSpecificVSToPS FModShadowMeshAttenuationVSToPS
	#define MODSHADOWATTENUATE_INTERPOLATE_MEMBER(member) O.member = a.member * aInterp + b.member * bInterp

	FModShadowMeshAttenuationVSToDS PassInterpolate(FModShadowMeshAttenuationVSToDS a, float aInterp, FModShadowMeshAttenuationVSToDS b, float bInterp)
	{
		FModShadowMeshAttenuationVSToDS O;
		
		O.FactoryInterpolants = VertexFactoryInterpolate(a.FactoryInterpolants, aInterp, b.FactoryInterpolants, bInterp);
		
		#if PER_PIXEL_CAMERA_VECTOR
			MODSHADOWATTENUATE_INTERPOLATE_MEMBER(VertexColor);
		#endif

		return O;
	}

	#undef MODSHADOWATTENUATE_INTERPOLATE_MEMBER
	
	FModShadowMeshAttenuationVSToPS PassFinalizeTessellationOutput(FModShadowMeshAttenuationVSToDS Interpolants, float4 WorldPosition, FMaterialTessellationParameters MaterialParameters)
	{
		FModShadowMeshAttenuationVSToPS O;
		
		O.FactoryInterpolants = VertexFactoryAssignInterpolants(Interpolants.FactoryInterpolants);
		
		#if PER_PIXEL_CAMERA_VECTOR
			O.CameraVectorOrVertexColor = MaterialParameters.VertexColor;
		#else
			O.CameraVectorOrVertexColor.xyz = TransformWorldVectorToTangent(MaterialParameters.TangentToWorld,CameraPositionDS.xyz - WorldPosition.xyz * CameraPositionDS.w);
			O.CameraVectorOrVertexColor.w = 1.0f;
		#endif
		
		O.TangentLightVector = TransformWorldVectorToTangent(MaterialParameters.TangentToWorld,LightPosition.xyz - WorldPosition.xyz);

		// Finally, transform position to clip-space
		ISOLATE
		{
			O.Position = MulMatrix(ViewProjectionMatrixDS,WorldPosition);
			O.Position = ApplyTemporalAAJitter(O.Position);
		}
			
	#if WORLD_POS
		O.PixelPosition = WorldPosition;
	#else
		O.PixelPosition = O.Position;
	#endif
		
		return O;
	}
	
	#include "Tessellation.usf"
#endif

#if VERTEXSHADER

void Main(
	FVertexFactoryInput Input,
	out FModShadowMeshAttenuationVSOutput Output
	)
{
	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPosition = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float3x3 TangentBasis = VertexFactoryGetTangentBasis(Input, VFIntermediates);

	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPosition.xyz, TangentBasis);
	// Isolate instructions used for world position offset on xbox 360, 
	// As these cause the optimizer to generate different position calculating instructions in each pass, resulting in self-z-fighting.
	// This is only necessary for shaders used in passes that have depth testing enabled.
	ISOLATE
	{
		WorldPosition.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}
	
#if USING_SM5_TESSELLATION
	Output.Position = WorldPosition;
	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToDS(Input, VFIntermediates);
	
	#if PER_PIXEL_CAMERA_VECTOR
		Output.VertexColor = VertexFactoryGetVertexColor( Input, VFIntermediates );
	#endif
	
#else // !USING_SM5_TESSELLATION

	ISOLATE
	{
#if WITH_REALD
		FDepthAllocateOutput DBAResult = DepthAllocate(WorldPosition);
		Output.Position = DBAResult.DBAPixelPosition;
#else
		Output.Position = MulMatrix(ViewProjectionMatrix,WorldPosition);
#endif
		Output.Position = ApplyTemporalAAJitter(Output.Position);
	}

	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates);
	#if WORLD_POS
		Output.PixelPosition = WorldPosition;
	#else
#if WITH_REALD
		Output.PixelPosition = DBAResult.DBAPixelPosition;
#else
		Output.PixelPosition = Output.Position;
#endif
	#endif

	Output.CameraVectorOrVertexColor = 1;
	#if PER_PIXEL_CAMERA_VECTOR
		Output.CameraVectorOrVertexColor = VertexFactoryGetVertexColor( Input, VFIntermediates );
	#else
		Output.CameraVectorOrVertexColor.xyz = VertexFactoryWorldToTangentSpace(Input,VFIntermediates,TangentBasis,CameraPositionVS.xyz - WorldPosition.xyz * CameraPositionVS.w);
	#endif

	Output.TangentLightVector = VertexFactoryWorldToTangentSpace(Input,VFIntermediates,TangentBasis,LightPosition.xyz - WorldPosition.xyz);
	
#endif //USING_SM5_TESSELLATION
}

#endif
