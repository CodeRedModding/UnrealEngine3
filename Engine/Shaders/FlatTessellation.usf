/*=============================================================================
	FlatTessellation.usf: Shader fragments for flat tessellation
	Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

#if DISPLACEMENT_ANTICRACK
#define IN_CONTROL_POINTS 12
#else
#define IN_CONTROL_POINTS 3
#endif

struct FHullShaderConstantOutput
{
	// Tess factor for the FF HW block
	float TessFactor[3]    : SV_TessFactor;
	float InsideTessFactor : SV_InsideTessFactor;
};

struct FFlatTessellationHSToDS
{
	FPassSpecificVSToDS PassSpecificData;

	// scale factors in tangent space
	float3 DisplacementScale : Flat_DisplacementScales;

	// Tessellation multiplier.
	float TessellationMultiplier : Flat_TessellationMultiplier;

#if DISPLACEMENT_ANTICRACK
	// dominant edge and vertex data used to avoid cracking when displacing
	FHullShaderConstantDominantVertexData DominantVertex : Flat_DominantVertex;
	FHullShaderConstantDominantEdgeData DominantEdge : Flat_DominantEdge;
#endif
};

#if HULLSHADER

	FHullShaderConstantOutput HS_FlatTrianglesConstant( const OutputPatch<FFlatTessellationHSToDS, 3> I )
	{
		FHullShaderConstantOutput O = (FHullShaderConstantOutput)0;
	    
		float3 WorldPostion0 = I[0].PassSpecificData.Position.xyz;
		float3 WorldPostion1 = I[1].PassSpecificData.Position.xyz;
		float3 WorldPostion2 = I[2].PassSpecificData.Position.xyz;

		float4 TessellationMultipliers;
		TessellationMultipliers.x = 0.5 * (I[0].TessellationMultiplier + I[1].TessellationMultiplier);
		TessellationMultipliers.y = 0.5 * (I[1].TessellationMultiplier + I[2].TessellationMultiplier);
		TessellationMultipliers.z = 0.5 * (I[2].TessellationMultiplier + I[0].TessellationMultiplier);
		TessellationMultipliers.w = (I[0].TessellationMultiplier + I[1].TessellationMultiplier + I[2].TessellationMultiplier) / 3.0;

		//@todo: This should be vectorized and done in the MainHull shader.
		float4 CompositeTessellationFactors = TessellationMultipliers * CalculateCompositeTessellationFactors(WorldPostion0,WorldPostion1,WorldPostion2);
		
		O.TessFactor[0] = CompositeTessellationFactors.x; // 1->2 edge
		O.TessFactor[1] = CompositeTessellationFactors.y; // 2->0 edge
		O.TessFactor[2] = CompositeTessellationFactors.z; // 0->1 edge
		O.InsideTessFactor = CompositeTessellationFactors.w;
		
		return O;
	}

	[domain("tri")]
	[partitioning("fractional_odd")]
	[outputtopology("triangle_cw")]
	[patchconstantfunc("HS_FlatTrianglesConstant")]
	[outputcontrolpoints(3)]
	FFlatTessellationHSToDS MainHull( InputPatch<FPassSpecificVSToDS, IN_CONTROL_POINTS> I, uint ControlPointID : SV_OutputControlPointID )
	{
		FFlatTessellationHSToDS O = (FFlatTessellationHSToDS) 0;
		
		float3x3 TangentBasis = VertexFactoryGetTangentBasis(I[ControlPointID].FactoryInterpolants);
		O.DisplacementScale = GetTangentSpaceNonUniformScales(TangentBasis);

		const uint NextControlPointID = ControlPointID < 2 ? ControlPointID + 1 : 0; // (ControlPointID + 1) % 3

		O.PassSpecificData = I[ControlPointID];
		O.TessellationMultiplier = GetTessellationMultiplier( I[ControlPointID] );

#if DISPLACEMENT_ANTICRACK
		// NextControlPointID is first opposite edge vert
		// NextNextControlPointID is second opposite edge vert
		const uint NextNextControlPointID = NextControlPointID < 2 ? NextControlPointID + 1 : 0;

		// We also need the neghbors of the opposite edge verts
		const uint NextNeighborControlPointID = 3 + 2 * NextControlPointID;	// neighbor for first opposite edge vert
		const uint NextNeighborNextControlPointID = NextNeighborControlPointID + 1; // neighbor for second opposite edge vert

		// Dominant vertex is provided explicitly
		const uint DominantVertexControlPointID = 9 + ControlPointID;
		O.DominantVertex = GenerateDominantVertexData(I[DominantVertexControlPointID]);

		// we need the other verts from each prim to generate the edges, clock wise winding
		O.DominantEdge = GenerateDominantEdgeData(I[NextControlPointID],I[NextNextControlPointID],I[NextNeighborControlPointID],I[NextNeighborNextControlPointID]);
#endif	// DISPLACEMENT_ANTICRACK
		
		return O;
	}
#endif

#if DOMAINSHADER
	[domain("tri")]
	FPassSpecificVSToPS MainDomain(
		FHullShaderConstantOutput HSConstantData,
		const OutputPatch<FFlatTessellationHSToDS, 3> I,
		float3 BarycentricCoords : SV_DomainLocation )
	{
		// Get the barycentric coords
		float U = BarycentricCoords.x;
		float V = BarycentricCoords.y;
		float W = BarycentricCoords.z;
		
		// Interpolate world position according to our tessellation scheme
		float4 WorldPosition = I[0].PassSpecificData.Position * U + I[1].PassSpecificData.Position * V + I[2].PassSpecificData.Position * W;
		
		// Interp remaining attributes (construct barycentric interp from bilerp primitives)
		// NB: the HLSL compiler resolves the 1.f to something efficient (i.e. no-op)
		FPassSpecificVSToDS Interp = PassInterpolate(
			PassInterpolate( I[0].PassSpecificData, U, I[1].PassSpecificData, V ), 1.f,
			I[2].PassSpecificData, W );
																		
		FMaterialTessellationParameters MaterialParameters = GetMaterialTessellationParameters(Interp.FactoryInterpolants, WorldPosition.xyz);

#if DISPLACEMENT_ANTICRACK

		float2 DisplacementTexCoords = 0;
#if NUM_MATERIAL_TEXCOORDS
		DisplacementTexCoords = GetTextureCoordinateDS( Interp );
#endif
		
		FMaterialTessellationParameters DisplacementMaterialParameters = MaterialParameters;
		
		// Override to dominant data if along edge or at control vert.  This is necessary to avoid cracks caused by primitives
		// from disjoint locations in UV space abutting each other.
		ApplyDominantData(
			DisplacementTexCoords, DisplacementMaterialParameters.TangentToWorld,
			UnpackColor4( GetNormalDS( Interp ) ), UnpackColor3( GetTangentDS( Interp ) ),
			U, V, W,
			I[0].DominantEdge, I[1].DominantEdge, I[2].DominantEdge,
			I[0].DominantVertex, I[1].DominantVertex, I[2].DominantVertex );
							
		// Override texture coordinate 0.
#if NUM_MATERIAL_TEXCOORDS
		DisplacementMaterialParameters.TexCoords[0].xy = DisplacementTexCoords.xy;
#endif

		// We calculate separate params for displacement because these depend on the potentially-modified
		// tanget space (as a result of crack-free)				
		CalcMaterialTessellationParameters(MaterialParameters);
		CalcMaterialTessellationParameters(DisplacementMaterialParameters); 

#else

		CalcMaterialTessellationParameters(MaterialParameters);
		FMaterialTessellationParameters DisplacementMaterialParameters = MaterialParameters;

#endif	// DISPLACEMENT_ANTICRACK

		// tangent space displacement scaling
		DisplacementMaterialParameters.TangentToWorldPreScale = I[0].DisplacementScale*U + I[1].DisplacementScale*V + I[2].DisplacementScale*W;

		// world space displacement value.  This will likely use the tangent2world transform.
		float3 WorldDisplacement = GetMaterialWorldDisplacement(DisplacementMaterialParameters);

		WorldPosition.xyz += WorldDisplacement;

		return PassFinalizeTessellationOutput(Interp, WorldPosition,MaterialParameters);
	}
#endif
