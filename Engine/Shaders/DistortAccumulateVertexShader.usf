/*=============================================================================
	DistortionAccumulateVertexShader.usf: Vertex shader for accumulating distortion offsets
	Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"

struct FDistortAccumulateVSToPS
{
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
	float4	PixelPosition	: TEXCOORD5;
	float4	CameraVectorOrVertexColor : TEXCOORD6;
	float4	Position		: POSITION;
};

#if USING_SM5_TESSELLATION	
	struct FDistortAccumulateVSToDS
	{
		FVertexFactoryInterpolantsVSToDS FactoryInterpolants;
		#if PER_PIXEL_CAMERA_VECTOR
			float4 VertexColor : TEXCOORD6;
		#endif
		float4 Position : VS_To_DS_Position;
		OPTIONAL_VertexID_VS_To_DS
	};
	
	#define FDistortAccumulateVSOutput FDistortAccumulateVSToDS
#else
	#define FDistortAccumulateVSOutput FDistortAccumulateVSToPS
#endif

#if USING_SM5_TESSELLATION	
	#define FPassSpecificVSToDS FDistortAccumulateVSToDS
	#define FPassSpecificVSToPS FDistortAccumulateVSToPS
	#define DISTORTACCUMULATE_INTERPOLATE_MEMBER(member) O.member = a.member * aInterp + b.member * bInterp

	FDistortAccumulateVSToDS PassInterpolate(FDistortAccumulateVSToDS a, float aInterp, FDistortAccumulateVSToDS b, float bInterp)
	{
		FDistortAccumulateVSToDS O;
		
		O.FactoryInterpolants = VertexFactoryInterpolate(a.FactoryInterpolants, aInterp, b.FactoryInterpolants, bInterp);
		
		#if PER_PIXEL_CAMERA_VECTOR
			DISTORTACCUMULATE_INTERPOLATE_MEMBER(VertexColor);
		#endif

		return O;
	}

	#undef DISTORTACCUMULATE_INTERPOLATE_MEMBER
	
	FDistortAccumulateVSToPS PassFinalizeTessellationOutput(FDistortAccumulateVSToDS Interpolants, float4 WorldPosition, FMaterialTessellationParameters MaterialParameters)
	{
		FDistortAccumulateVSToPS O;
		
		O.FactoryInterpolants = VertexFactoryAssignInterpolants(Interpolants.FactoryInterpolants);
		
		#if PER_PIXEL_CAMERA_VECTOR
			O.CameraVectorOrVertexColor = MaterialParameters.VertexColor;
		#else
			O.CameraVectorOrVertexColor.xyz = TransformWorldVectorToTangent(MaterialParameters.TangentToWorld,CameraPositionDS.xyz - WorldPosition.xyz * CameraPositionDS.w);
			O.CameraVectorOrVertexColor.w = 1.0f;
		#endif

		// Finally, transform position to clip-space
		O.Position = MulMatrix(ViewProjectionMatrixDS,WorldPosition);
			
	#if WORLD_POS
		O.PixelPosition = WorldPosition;
	#else
		O.PixelPosition = O.Position;
	#endif
		
		return O;
	}
	
	#include "Tessellation.usf"
#endif

#if VERTEXSHADER

/** transform mesh as normal */
void Main(
	FVertexFactoryInput Input,
	OPTIONAL_VertexID
	out FDistortAccumulateVSOutput Output
	)
{
	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4	WorldPosition = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float3x3 TangentBasis = VertexFactoryGetTangentBasis(Input, VFIntermediates);

	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPosition.xyz, TangentBasis);
	// Isolate instructions used for world position offset on xbox 360, 
	// As these cause the optimizer to generate different position calculating instructions in each pass, resulting in self-z-fighting.
	// This is only necessary for shaders used in passes that have depth testing enabled.
	ISOLATE
	{
		WorldPosition.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}
	
#if USING_SM5_TESSELLATION
	Output.Position = WorldPosition;
	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToDS(Input, VFIntermediates);
	
	#if PER_PIXEL_CAMERA_VECTOR
		Output.VertexColor = VertexFactoryGetVertexColor( Input, VFIntermediates );
	#endif
	
#else // !USING_SM5_TESSELLATION

	Output.Position = MulMatrix(ViewProjectionMatrix,WorldPosition);
	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates);
#if WORLD_POS
	Output.PixelPosition = WorldPosition;
#else
	Output.PixelPosition = Output.Position;
#endif

	Output.CameraVectorOrVertexColor = 1;
#if PER_PIXEL_CAMERA_VECTOR
	Output.CameraVectorOrVertexColor = VertexFactoryGetVertexColor(Input, VFIntermediates);
#else
	Output.CameraVectorOrVertexColor.xyz = VertexFactoryWorldToTangentSpace(Input,VFIntermediates,TangentBasis,CameraPositionVS.xyz - WorldPosition.xyz * CameraPositionVS.w);
#endif

#endif // USING_SM5_TESSELLATION

	OutputVertexID( Output );
}

#endif // VERTEXSHADER
